{"version":1,"ops":[{"type":1,"author":{"id":"4911e145ed3666db373487faf30dcac1c3ab4569"},"timestamp":1527522803,"metadata":{"github-id":"MDU6SXNzdWUzMjcwNjczMzk=","github-url":"https://github.com/perl11/cperl/issues/364","origin":"github"},"title":"Test::More plan() requires explicit `scalar`?  Behaviour difference wrt Test-Simple-1.302136","message":"First-time cperl user, here courtesy of the [cpantesters report](http://www.cpantesters.org/cpan/report/4e8bea0e-61fa-11e8-8fb1-ef5133556b3f) on my first CPAN distribution, [Text::PerlPP](https://metacpan.org/release/CXW/Text-PerlPP-0.500002).  All tests pass on p5p perl 5.10.1 (cygwin x86) and 5.26.1 (cygwin x64) (both perlbrew; CPAN Test::More 1.302136).  However, the `plan` call fails on cperl 5.26.2c (cygwin x64) (perlbrew; Test::More 1.401015c).\n\nMy test code has an [array of testcases](https://github.com/interpreters/perlpp/blob/4328bde9d30624323ec096168058302ab8afc859/t/02-basic.t#L10).  I then `plan tests =\u003e count_tests(\\@testcases, 1, 2);` ([here](https://github.com/interpreters/perlpp/blob/4328bde9d30624323ec096168058302ab8afc859/t/02-basic.t#L42)) using a function to count the tests (some list entries have multiple tests).  On cperl, `plan` gives me the error `Got an undefined number of tests`.\n\nI have the following MCVE.  Save as `foo.t` and run as `perl foo.t` for the failure or `perl foo.t 1` for success.\n\n    use 5.010001; use strict; use warnings; use Test::More;\n    \n    sub count_tests { return scalar @{+shift}; }\n    \n    my @testcases=qw(foo);\n    \n    plan tests =\u003e count_tests(\\@testcases) unless @ARGV;        # fails\n    plan tests =\u003e scalar count_tests(\\@testcases) if @ARGV;     # succeeds\n    \n    # Workaround:\n    #my $ntests = count_tests(\\@testcases);\n    #plan tests =\u003e $ntests;                          # succeeds\n    #plan tests =\u003e scalar $ntests;                   # succeeds\n    \n    ok(!!1, 'yep');\n\nWhy do I need to specify `scalar` on the `plan` line, even though `count_tests()` is returning a scalar?\n\nI do not know if this is intended behaviour or a bug.  Obviously, I have a workaround :) , but I would still like to know.  This probably won't be my last CPAN release, and I would like to write cperl-compatible test cases.\n\nI searched the issues and didn't find this one.  I did see discussion of strict typing in #153, and I wonder if that might be similar.  Also, #255 says `TODO Test::Script Have_Plan oddity in Test::Simple`, but doesn't explain what oddity that was.  Was it indeed this one?\n\nThanks very much!","files":null}]}