{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1485635757,"metadata":{"github-id":"MDU6SXNzdWUyMDM4Mjk2MjM=","github-url":"https://github.com/perl11/cperl/issues/246","origin":"github"},"title":"Detect hash slowdos","message":"See slowloris and slowdos. But this attack is much harder to perform, in fact it didn't happen so far in practice, it is only theoretical. (but with 2 easy to detect independent variables, timing and order, a solver will get to the seed even remotely by cutting down the search space dramatically). Not useful as normal DoS attacks are trivial, but theoretically possible.\n\nDistributed hashflood attacks could lead to memory exhaustion and denial of service, \nwhich would bypass the original login-like sleep protection.\nIf \u003e128 concurrent attacks are detected, exit hard. Use a global hash_slowdos counter.\nNote that this is also triggered by a 128*8*128 hash size single source attack (=131072).\nThis is still better, faster and smaller than the java solution to convert to a tree.\nWe log the attacker and can block him.\n\nThanks for JD for the problem.","files":null}]}