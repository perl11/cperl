{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1459408080,"metadata":{"github-id":"MDU6SXNzdWUxNDQ4MDk4Njg=","github-url":"https://github.com/perl11/cperl/issues/123","origin":"github"},"title":"Harmonize sizes, lengths and counts","message":"Harmonize the lengths, counts and sizes for string lengths, hash and array indices\nfrom a broken and inconsistent mix of int/I32 to SSize_t (31/63bit) with silent\ntruncation, overflows and unreachable elements. \nChange many wrong API sizes.\n\nSTRLEN (i.e.  Size_t) for string lengths, and I32 for HEK lengths,\nalso used by names.\n\nArray and hash indices and lengths are now all SSize_t (signed 31/63 bits).\nMaybe they should be either UV or Size_t, but I'm fine with keeping address\nspace the remaining safe for the rest, if someone wants to allocate an\noverlarge array or hash.  Esp.  the hash riter is not I32 anymore, so you\ncan now iterate over all hash keys without overflow, but there were many\nother silent 64-\u003e32bit truncations in helper functions.\n\nThis allows on 64bit systems 64bit string lengths, and 63bit array and\nhash sizes, but limits on 32bit systems the max. hash size from 32 to\n31bit. It allows syswrite of buffers \u003e2GB and fixes a couple of potential security\nexploits on 64bit (_which I'm not describing here_)\n\nAPI:\n\n```\n-Ap     |bool   |do_openn       |NN GV *gv|NN const char *oname|I32 len \\\n+Ap     |bool   |do_openn       |NN GV *gv|NN const char *oname|STRLEN len \\\n                                |int as_raw|int rawmode|int rawperm \\\n                                |NULLOK PerlIO *supplied_fp|NULLOK SV **svp \\\n-                               |I32 num\n+                               |U32 num\n Ap     |void*  |hv_common      |NULLOK HV *hv|NULLOK SV *keysv \\\n-                               |NULLOK const char* key|STRLEN klen|int flags \\\n+                               |NULLOK const char* key|I32 klen|int flags \\\n                                |int action|NULLOK SV *val|U32 hash\n Ap     |void*  |hv_common_key_len|NULLOK HV *hv|NN const char *key \\\n-                               |I32 klen_i32|const int action|NULLOK SV *val \\\n+                               |I32 klen|const int action|NULLOK SV *val \\\n                                |const U32 hash\n-Apod   |STRLEN |hv_fill        |NN HV *const hv\n+Apod   |SSize_t|hv_fill        |NN HV *const hv\n-Apd    |I32    |hv_iterinit    |NN HV *hv\n+Apd    |SSize_t|hv_iterinit    |NN HV *hv\n-pd     |I32    |sv_clean_all\n+pd     |Size_t |sv_clean_all\n-Apd    |char*  |sv_gets        |NN SV *const sv|NN PerlIO *const fp|I32 append\n+Apd    |char*  |sv_gets        |NN SV *const sv|NN PerlIO *const fp|STRLEN append\n/* deprecated */\n-Apd    |void   |sv_pos_u2b     |NULLOK SV *const sv|NN I32 *const offsetp|NULLOK I32 *const lenp\n+ApdD   |void   |sv_pos_u2b     |NULLOK SV *const sv|NN I32 *const offsetp|NULLOK I32 *const lenp\n-Apd    |void   |sv_pos_b2u     |NULLOK SV *const sv|NN I32 *const offsetp\n+ApdD   |void   |sv_pos_b2u     |NULLOK SV *const sv|NN I32 *const offsetp\n-po     |SV*    |hfree_next_entry       |NN HV *hv|NN STRLEN *indexp\n+po     |SV*    |hfree_next_entry       |NN HV *hv|NN SSize_t *indexp\n-s      |void   |hsplit         |NN HV *hv|STRLEN const oldsize|STRLEN newsize\n+s      |void   |hsplit         |NN HV *hv|SSize_t const oldsize|SSize_t newsize\n sM     |SV*    |hv_delete_common|NULLOK HV *hv|NULLOK SV *keysv \\\n-               |NULLOK const char *key|STRLEN klen|int k_flags|I32 d_flags \\\n+               |NULLOK const char *key|I32 klen|int k_flags|I32 d_flags \\\n                |U32 hash\n-sM     |void   |clear_placeholders     |NN HV *hv|U32 items\n+sM     |void   |clear_placeholders     |NN HV *hv|SSize_t items\n-s      |I32    |visit          |NN SVFUNC_t f|const U32 flags|const U32 mask\n+s      |Size_t |visit          |NN SVFUNC_t f|const U32 flags|const U32 mask\n-ApoR   |I32*   |hv_riter_p     |NN HV *hv\n+ApoR   |SSize_t*|hv_riter_p    |NN HV *hv\n-Apo    |void   |hv_riter_set   |NN HV *hv|I32 riter\n+Apo    |void   |hv_riter_set   |NN HV *hv|SSize_t riter\n-ApoR   |I32    |hv_placeholders_get    |NN const HV *hv\n-Apo    |void   |hv_placeholders_set    |NN HV *hv|I32 ph\n+ApoR   |SSize_t|hv_placeholders_get    |NN const HV *hv\n+Apo    |void   |hv_placeholders_set    |NN HV *hv|SSize_t ph\n-s      |I32    |find_array_subscript|NULLOK const AV *const av \\\n+s      |SSize_t|find_array_subscript|NULLOK const AV *const av \\\n                |NN const SV *const val\n\n-=for apidoc Am|STRLEN|HvNAMELEN|HV *stash\n+=for apidoc Am|I32|HvNAMELEN|HV *stash\n-=for apidoc Am|STRLEN|HvENAMELEN|HV *stash\n+=for apidoc Am|I32|HvENAMELEN|HV *stash\n-=for apidoc Am|STRLEN|HeKLEN|HE* he\n+=for apidoc Am|I32|HeKLEN|HE* he\n\n-=for apidoc Am|int|AvFILL|AV* av\n+=for apidoc Am|SSize_t|AvFILL|AV* av\n-=for apidoc Am|int|av_tindex|AV* av\n+=for apidoc Am|SSize_t|av_tindex|AV* av\n```\n\nInternal sizes:\n\n```\n-    I32                xhv_riter;      /* current root of iterator */\n+    SSize_t    xhv_riter;      /* current root of iterator */\n\n-    STRLEN      xhv_keys;       /* total keys, including placeholders */\n-    STRLEN      xhv_max;        /* subscript of last element of xhv_array */\n+    SSize_t     xhv_keys;       /* total keys, including placeholders */\n+    SSize_t     xhv_max;        /* subscript of last element of xhv_array */\n\n+#define HV_NO_RITER -1\n\n```","files":null}]}