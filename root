{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1505585787,"metadata":{"github-id":"MDU6SXNzdWUyNTgyNDg5OTE=","github-url":"https://github.com/perl11/cperl/issues/332","origin":"github"},"title":"fix fc (full case-folding)","message":"perl talks about doing full case-folding with fc, but misses the normalization step.\nNot even Unicode::UCD which implements all the non-default foldcase options (full, simple, mapping, status, turkic) offers full case-folding.\n\n\u003e Casefolding is the process of mapping strings to a form where case differences are erased; \n\u003e comparing two strings in their casefolded form is effectively a way of asking if two strings \n\u003e are equal, regardless of case.\n\nSee http://perl11.org/blog/foldcase.html\nComparing composed to decomposed strings does not help in comparisons.\n\nAdd it. First in the fast NFD form. (We call it FCD, fast fold-cased decomposed). We'll probably stay there to safe cpu and memory.\n\nAlso use the new optimized -ind Normalize canon table, implemented for safeclib `wcsfc_s()`, which does full case-folding on wchar_t, not utf-8. This is needed for better memory usage with unicode identifiers also. It needs 3x less memory than the current unfcan.h, 174772 =\u003e 55520. See #334 for this.\n\nNote that most fc results are already NFD, just the greek PROSGEGRAMMENI + YPOGEGRAMMENI\n U+1f80 .. U+1ff4 need to be decomposed also.\n\nTODO: on `sizeof(wchar_t)==2` systems (windows, cygwin, and aix/solaris 32bit) create the normalization tables with surrogate pairs already. fc tables are always below 0xffff.\n\ni.e. \n* `fc \"\\x{1f0a}\\x{345}\"` =\u003e `\"\\x{1F02}\\x{3B9}\"` but should be `\"\\x{1f82}\"` if normalized to NFC.\n* or if denormalized to NFD: `fc \"\\x{1f8A}\"` =\u003e U+1f82 =\u003e U+1F02 + U+0345, but perl does =\u003e `\\x{1F02}\\x{3B9}`","files":null}]}