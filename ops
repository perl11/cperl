{"version":1,"ops":[{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583501188,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NTc2NjM5NA==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-595766394"},"message":"But why should cperl disable it then?","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583501188,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2MjgxNTUz"},"target":"a960828d9767f677abc441d2f18e45bbbd27f93fa25d0822b95061ab2cde4085","message":"But why should cperl disable it then? lot of perl5 code is wrong because that mistake. cperl needs to catch it.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583501212,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlQ29tbWVudEVkaXQ6MzU2MjgxNjI1"},"target":"a960828d9767f677abc441d2f18e45bbbd27f93fa25d0822b95061ab2cde4085","message":"But why should cperl disable it then? lot of perl5 code is wrong because of that mistake. cperl needs to catch it.","files":null},{"type":3,"author":{"id":"c89f7af509e1fcb8f142d9c75e042be0d701c853"},"timestamp":1583572718,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjA2NjA5Mw==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-596066093"},"message":"How would you recommend I disable these warnings then?\n\n```\nBEGIN {\n  'warnings'-\u003eunimport('shadow') if \"$^V\" =~ /c$/;\n};\n```\n\nAt the top of every file affected (because it needs to be before the `package` statement) is pretty ugly.","files":null},{"type":3,"author":{"id":"c89f7af509e1fcb8f142d9c75e042be0d701c853"},"timestamp":1583572859,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjA2NjI4OQ==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-596066289"},"message":"Note that I'm not saying `use warnings` or `-w` shouldn't be able to enable these warnings. But right now, they happen without opting into them at all.","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583596031,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjEwMTQ4Nw==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-596101487"},"message":"No, I explicitly defaulted this new warning, because it detects real problems which should not be silenced. Rather fix the problem instead.","files":null},{"type":5,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583596054,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDMxMDc3OTIyNTg="},"added":["wontfix"],"removed":[]},{"type":3,"author":{"id":"c89f7af509e1fcb8f142d9c75e042be0d701c853"},"timestamp":1583599101,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjEwNjMzMA==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-596106330"},"message":"It doesn't detect problems though; it detects situations which might result in problems. Like how if you were parsing HTML and somehow ended up with a variable containing what you thought was a number, but it actually contained `\"5\u003c/span\u003e\"`, then:\n\n    say $var+1;\n\nWould result in a warning `Argument \"5\u003c/span\u003e\" isn't numeric in addition`. This isn't warning you about a *problem* because it does still give the correct answer of 6. It's warning you about a situation that *might* result in future problems.\n\nThe difference though is that \"numeric\" warnings are opt-in.\n\n\"shadow\" warnings are enabled without opting in. And the obvious way to opt out:\n\n    no warnings \"shadow\";\n\nIs not compatible with p5p's perl.","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583614245,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NjEzNjI4NQ==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-596136285"},"message":"Hmm, will discuss within my group, which came up with this problem.","files":null},{"type":3,"author":{"id":"c89f7af509e1fcb8f142d9c75e042be0d701c853"},"timestamp":1583844869,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NzA2OTg5NQ==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-597069895"},"message":"To summarize my feelings on this warning, because I don't think I have necessarily expressed my self clearly.\n\n    my $var = \"5\u003c/span\u003e\";   # perhaps because of broken HTML scraping\n    say 1+$var;             # warns about argument not being numeric\n\nI think we can all agree that the \"numeric\" warning category can be helpful, however:\n\n* Perl (neither p5p perl nor cperl!) does not enable this warning by default. It needs to be enabled using `use warnings` or `-w`.\n* If it is enabled, it can easily be disabled lexically using `no warnings \"numeric\"`.\n\nThe \"shadow\" warnings category is also useful, however:\n\n* It is enabled by default in cperl, without opting in.\n* It cannot easily be disabled because the obvious way of disabling it (`no warnings \"shadow\"`) will cause a fatal error on p5p perl.\n\nI do not dispute the usefulness of the warning, or question its existence. I only question the wisdom of making it enabled by default when it's annoying to disable.","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583866897,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NzI1ODQ3Nw==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-597258477"},"message":"Sure, I get your point. Our side is that many external API's are wrong, and no one knows why. The external API does not have this warning enabled, so you'll never catch it.\nExtraordinary API breakage should require extraordinary measures to circumvent it. \n\nWhich package warns for you? Cannot it be fixed. Is it a false positive. There might be cases, where the shadow warning should be suppressed, but I want to see them first.\nIt's not comparable to numeric because there you can simply ignore it and continue. shadowed namespaces however are mostly an error, because some method hijacked your whole package.","files":null},{"type":3,"author":{"id":"c89f7af509e1fcb8f142d9c75e042be0d701c853"},"timestamp":1583918525,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NzUyNjQ2Ng==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-597526466"},"message":"I've been trying to get the test suite for my own distribution, Type::Tiny, passing on cperl. The version on github does now pass, albeit with these warnings and needing to skip a handful of tests.\n\nThe warnings are mostly caused by the fact that Types::Standard exports functions like `HashRef` and `ArrayRef` which return objects blessed into the \"Type::Tiny\" class. As a load-time optimization, some of these objects will load parts of their implementation from modules like Types::Standard::HashRef and Types::Standard::ArrayRef on demand. So there's a function Types::Standard::HashRef and a package Types::Standard::HashRef. The latter is indirectly used by the former and not intended to be used by end users.\n\nA solution I've considered would be to change something like this:\n\n```perl\n# lib/Types/Standard/HashRef.pm\npackage Types::Standard::HashRef;\nsub helper1 { ... }\nsub helper2 { ... }\n```\n\nTo something like this:\n\n```perl\n# lib/Types/Standard/HashRef.pm\npackage Types::Standard;\nsub Types::Standard::HashRef::helper1 { ... }\nsub Types::Standard::HashRef::helper2 { ... }\n```\n\nI don't *think* this would trigger the \"shadow\" warning, but it seems to just be exploiting a current weakness in the code that detects violations, and there's no guarantee that this won't also generate a warning in the future, so long term it's better to address the problem at its root rather than work around it like this.\n\nWhatsmore, the CPAN indexer looks for the \"package\" keyword when it's indexing distributions, so for namespace management purposes, it seems like a bad idea to make this change.\n\nAnother alternative would be to rename the Types::Standard::HashRef package to something like Types::Standard::Internals::HashRef but due to the way CPAN installers work, I believe on upgrading from an old version, people would end up with a redundant old version of \"lib/Types/Standard/HashRef.pm\" hanging around, *probably* not causing any harm, but still an annoyance. I don't like this solution.\n\nSo yeah, short answer is I have function Foo::Bar and package Foo::Bar, but the subs defined in package Foo::Bar are never going to be called as methods on a Foo::Bar bareword, so the issues the shadow warning is designed to protect you against are never going to arise anyway.","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1583935762,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDU5NzY1NjEzMQ==","github-url":"https://github.com/perl11/cperl/issues/407#issuecomment-597656131"},"message":"Toby Inkster \u003cnotifications@github.com\u003e schrieb am Mi., 11. MÃ¤rz 2020,\n10:22:\n\n\u003e I've been trying to get the test suite for my own distribution,\n\u003e Type::Tiny, passing on cperl. The version on github does now pass, albeit\n\u003e with these warnings and needing to skip a handful of tests.\n\u003e\n\u003e The warnings are mostly caused by the fact that Types::Standard exports\n\u003e functions like HashRef and ArrayRef which return objects blessed into the\n\u003e \"Type::Tiny\" class. As a load-time optimization, some of these objects will\n\u003e load parts of their implementation from modules like\n\u003e Types::Standard::HashRef and Types::Standard::ArrayRef on demand. So\n\u003e there's a function Types::Standard::HashRef and a package\n\u003e Types::Standard::HashRef. The latter is indirectly used by the former and\n\u003e not intended to be used by end users.\n\u003e\n\u003e A solution I've considered would be to change something like this:\n\u003e\n\u003e # lib/Types/Standard/HashRef.pmpackage Types::Standard::HashRef;sub helper1 { ... }sub helper2 { ... }\n\u003e\n\u003e To something like this:\n\u003e\n\u003e # lib/Types/Standard/HashRef.pmpackage Types::Standard;sub Types::Standard::HashRef::helper1 { ... }sub Types::Standard::HashRef::helper2 { ... }\n\u003e\n\u003e I don't *think* this would trigger the \"shadow\" warning, but it seems to\n\u003e just be exploiting a current weakness in the code that detects violations,\n\u003e and there's no guarantee that this won't also generate a warning in the\n\u003e future, so long term it's better to address the problem at its root rather\n\u003e than work around it like this.\n\u003e\n\u003e Whatsmore, the CPAN indexer looks for the \"package\" keyword when it's\n\u003e indexing distributions, so for namespace management purposes, it seems like\n\u003e a bad idea to make this change.\n\u003e\n\u003e Another alternative would be to rename the Types::Standard::HashRef\n\u003e package to something like Types::Standard::Internals::HashRef but due to\n\u003e the way CPAN installers work, I believe on upgrading from an old version,\n\u003e people would end up with a redundant old version of\n\u003e \"lib/Types/Standard/HashRef.pm\" hanging around, *probably* not causing\n\u003e any harm, but still an annoyance. I don't like this solution.\n\u003e\n\u003e So yeah, short answer is I have function Foo::Bar and package Foo::Bar,\n\u003e but the subs defined in package Foo::Bar are never going to be called as\n\u003e methods on a Foo::Bar bareword, so the issues the shadow warning is\n\u003e designed to protect you against are never going to arise anyway.\n\u003e\n\nI see. A good case for an exception in the warning check. But only for\nupcoming cperl versions.","files":null}]}