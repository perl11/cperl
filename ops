{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1441997049,"metadata":{"github-id":"MDU6SXNzdWUxMDYwNjg2OTI=","github-url":"https://github.com/perl11/cperl/issues/16","origin":"github"},"title":"class, method, multi keywords","message":"Parse them into the existing structures.\nSee https://design.perl6.org/S12.html#multi_Declarations\n\nperl6 creates a longname of the sig types and aliases them to the combined shortname, the proto (aka generic). Their multiple dispatch is the global shortest distance over all argument types, as in Damian's Class::MultiMethods http://cpansearch.perl.org/src/DCONWAY/Class-Multimethods-1.70/tutorial.html with an error if there are equally ranked candidates.\nperl6 allows multi subs and methods, plus proto and only prefix keywords. (_similar to extern/native_). sub is even optional, so they favor multi subs over methods.\n\nFor the beginning with cperl only allow it within classes, and favor methods over subs:\nallow `method` only within `class {}` blocks, to allow stricter and better semantics.\nallow `sub class{}` and `class()` sub decl and calls, which e.g. is used in B\nallow `multi` (aka generics) outside of class {} blocks. \nallow $class`:` invocant syntax\npass `$self` onto the signature of methods automatically, but not with :method attributes, only method declarations.\nadd `has` fields and methods accessor methods\nre-implement pseudo-hashes for the internal object layout for the default BUILD method for class-\u003enew objects.\nmethod-dispatch via global shortest distance, as in Class::MultiMethods, seems to be too much overhead and counterintuitive. much better would be a trivial left-to-right shortest distance (via c3 of course) without backtracking. This can be optimized to simple dynamic decision trees embedded into the method op, as in most other efficient method dispatch implementations. (see e.g \"Efficient Method Dispatch in PCL\", Kiczales, Rodriguez 1990\", or the Cecil, profile guided Self-93 or Squeak dispatcher)\nclasses can have the :native attribute, to layout the hash fields as in C, to be used as native structs for the ffi.\n\nfail at 'Invalid method call on class subroutine' and vice versa 'Invalid subroutine call on class method'.\nwarn on redefining packages as classes, as classes are more restrictive.\nwhen redefining classes as packages it will fail at the readonly stash.\n\nSee the branch `feature/gh16-multi`","files":null}]}