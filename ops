{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1441995551,"metadata":{"github-id":"MDU6SXNzdWUxMDYwNjQ3NjA=","github-url":"https://github.com/perl11/cperl/issues/8","origin":"github"},"title":"Move CowREFCNT int away from PV","message":"This disallowed using static strings in B::C since 5.18.\nWe really need static strings for the shared keys and filenames.\nWhen done, we could eventually be even better than 5.14, storing more COW (now \"real cow\")\nstrings than before.\n\nCowREFCNT: seperate from string, share with sv_refcnt\n\nFor read-only strings (i.e. embedded and with the compiler) and with threads\nit makes no sense to share the volatile cowrefcnt with the read-only buffer of the\nstring. We cannot use strings as read-only, and cannot compile them into a\nconstant segment, we even need to them to be initialized dynamically. This is one\nof the reasons why the compiler is not performant since 5.18 anymore\n\nMaybe: Add PV\\* and STRUCT_PV as alternative view of an SV*, add PvREFCNT() to make \nit clear. PVs are all structs starting with xpv, just not AV, HV, IO as they have no cowable strings.\n\nAdd stats for highest SvREFCNT and CowREFCNT with -DC at the end.\n\nResult with the core testsuite:\nTypically 820 refcnt (the \"_\u003efile\" GV), 5 cow\n\nHighest outliers:\nt/re/uniprops.t\n    == max refcnt: 118480 max cowrefcnt: 255\nt/porting/podcheck.t\n    == max refcnt: 6121 max cowrefcnt: 255\n\nSee https://github.com/perl11/cperl/commits/feature/CM-600-cperl-cowrefcnt","files":null}]}