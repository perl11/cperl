{"version":1,"ops":[{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596691786,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNDE0Mzg="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add several improvements to types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as array\u003cint\u003e which can be broken by any change. This can be taken away, leading to generalized code.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596691850,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNDE3MjQ="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add need several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as array\u003cint\u003e which can be broken by any change. This can be taken away, leading to generalized code.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596691945,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNDIxNzY="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add need several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as array\u003cint\u003e which can be broken by any change. This can be taken away, leading to generalized code.\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596692037,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNDI1NDk="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add need several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as array\u003cint\u003e which can be broken by any change. This can be taken away, leading to generalized code.\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596692074,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNDI2NzY="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add need several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, leading to generalized code.\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697543,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjg0ODE="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, leading to generalized code.\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697596,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjg3NzU="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERRED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697648,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjkwNjI="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_DEFERED: if the type was deferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697666,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjkxMjM="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_INFERED: if the type was inferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697734,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjk1MTY="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_INFERRED: if the type was inferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different. Not sure if we need that, but looks nice.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596697770,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxNjk3Mjg="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_INFERRED: if the type was inferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different. Not sure if we need that, but looks nice.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` vs `array[any]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596700616,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdElzc3VlRWRpdDo0MTMxODY5MzU="},"target":"54bf96d481ce3e3288cb8b44c9561b4470f5af3c903aea84b735460681c0fec1","message":"Add  several improvements for types, esp. runtype hints.\nWe need 3 new type bits per type to specifiy its origin:\n- TYPE_DECLARED: if the type was statically declared by the user. This is fixed and cannot be changed\n- TYPE_INFERRED: if the type was inferred by the compiler. This is also fixed, but has weaker guarantees. Esp. warnings and error messages are different. Not sure if we need that, but looks nice.\n- TYPE_HINT: if the type was optionally observed/guessed by the compiler or run-time. such as `array[int]` vs `array[any]` which can be broken by any change. This can be taken away, fallback to the original generalized code. (OSR?)\n\nThis is pre-work for the jit. In principle everything which can be done in the jit, can also be done in C before, such as observing run-time types, adding type hints, spezialising code (loops, methods), backout to the old code, method cache for generics (PIC - polymorphic inline cache) (needed for multi). Just rt patching (PIC or hooks) not.","files":null},{"type":5,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1596691795,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDM2Mjc0NDEzODM="},"added":["enhancement"],"removed":[]}]}