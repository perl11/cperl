{"version":1,"ops":[{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279474,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5NzQ2Ng=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"Detected by @mziescha\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279648,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5ODI2Nw=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279723,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5ODYyMA=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279794,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5ODkzNw=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279850,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5OTEwNA=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279906,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5OTMyNQ=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"`","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279934,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTc5OTQ0NQ=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"` (which should have been called `use warnings :all` btw)","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533280209,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTgwMDYxOQ=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"` (which should have been called `use warnings :all` btw)\n\nThis is somehow related to use warnings closure, see perldiag Subroutine \"\u0026%s\" is not available","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533280278,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExNTgwMDkyNA=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"` (which should have been called `use warnings :all` btw)\n\nThis is somehow related to use warnings closure, see perldiag Subroutine \"\u0026%s\" is not available, but technically something completely different.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1534176382,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExODgzNzgwNg=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"` (which should have been called `use warnings :all` btw)\n\nThis is somehow related to use warnings 'closure', see perldiag 'Subroutine \"\u0026%s\" is not available', but technically something completely different.","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1534181033,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDExODg2NjkxOA=="},"target":"22acfecb3931cce4cf9ea9365c3ababcc3aa77f7c9b745201cdedeff464962ec","message":"warn about when \n* adding a new package shadowed by an existing method (at compile-time)\n* adding a method shadowing an existing package (at compile-time)\n* calling a method shadowing an existing package-sub (at compile-time)\nno warning at run-time?\n\nmethods are favored over packages, which is fine. but some may be confused about it, and it's very hard to analyze it and find the root cause, when someone adds a package in front of yours, overriding your package name. The classical autobox or UNIVERSAL::isa problem/solution.\n\nSee https://gist.github.com/rurban/e7e3873613c4658bc552fba4356d7022\nDetected by @mziescha @dresden-pm\n\nThis needs to be added to core (for max. performance), and also as cpan package (for older perls).\nshadow is off by default, i.e. use warnings does not turn it on. you need to explicitly enable it or `use warnings \"all\"` (which should have been called `use warnings :all` btw)\n\nThis is somehow related to use warnings 'closure', see perldiag 'Subroutine \"\u0026%s\" is not available', but technically something completely different.","files":null},{"type":5,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1533279543,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE3NjkyODM0MDE="},"added":["enhancement"],"removed":[]},{"type":2,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1534176640,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTc4NTc3NzA2Mg=="},"title":"add warnings 'shadow' when method shadows package","was":"add warnings 'shadow' when method shadows package"},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273193,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQxMjU3NTEzOA==","github-url":"https://github.com/perl11/cperl/issues/368#issuecomment-412575138"},"message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package.  This is almost always an\nerror, unless you want to override access to the package.\n```","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273193,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMzI0OTc4OA=="},"target":"a94238980680add82a4b7bc8fce84da808b32f9c452e15d17b5e7c1241d323c6","message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package.  This is almost always an\nerror, unless you want to override access to the package.\n\n=item Subroutine \u0026%s masks new package %s\n\n(W shadow) A package or class has been added, but a subroutine already\nexist with the same name of the package, shadowing the package,\neffectively eliminating all access to the package via methods.  This\nis almost always an error, unless you want to override method access\nto the package.\n```\n\nThe first check is done when adding a subroutine, i.e. at compile time.\nThe second check is done when adding a package via the keywords package or class, i.e. at compile time.\nUnfortunately the check if the shadowed package contains a sub (i.e. potential method) at all is too expensive, so the warning is also emitted for data-only packages without subs, even if there the warning can be ignored.\n\nSee cperl branch `smoke/gh368-warnshadow`","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273249,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMzI0OTgzNw=="},"target":"a94238980680add82a4b7bc8fce84da808b32f9c452e15d17b5e7c1241d323c6","message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package via methods.  This is almost always an\nerror, unless you want to override method access to the package.\n\n=item Subroutine \u0026%s masks new package %s\n\n(W shadow) A package or class has been added, but a subroutine already\nexist with the same name of the package, shadowing the package,\neffectively eliminating all access to the package via methods.  This\nis almost always an error, unless you want to override method access\nto the package.\n```\n\nThe first check is done when adding a subroutine, i.e. at compile time.\nThe second check is done when adding a package via the keywords package or class, i.e. at compile time.\nUnfortunately the check if the shadowed package contains a sub (i.e. potential method) at all is too expensive, so the warning is also emitted for data-only packages without subs, even if there the warning can be ignored.\n\nSee cperl branch `smoke/gh368-warnshadow`","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273269,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMzI0OTg2MA=="},"target":"a94238980680add82a4b7bc8fce84da808b32f9c452e15d17b5e7c1241d323c6","message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package via methods.  This is almost always an\nerror, unless you want to override method access to the package.\n\n=item Subroutine \u0026%s masks new package %s\n=item Subroutine \u0026%s masks new class %s\n\n(W shadow) A package or class has been added, but a subroutine already\nexist with the same name of the package, shadowing the package,\neffectively eliminating all access to the package via methods.  This\nis almost always an error, unless you want to override method access\nto the package.\n```\n\nThe first check is done when adding a subroutine, i.e. at compile time.\nThe second check is done when adding a package via the keywords package or class, i.e. at compile time.\nUnfortunately the check if the shadowed package contains a sub (i.e. potential method) at all is too expensive, so the warning is also emitted for data-only packages without subs, even if there the warning can be ignored.\n\nSee cperl branch `smoke/gh368-warnshadow`","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273317,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMzI0OTg5Mw=="},"target":"a94238980680add82a4b7bc8fce84da808b32f9c452e15d17b5e7c1241d323c6","message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package via methods.  This is almost always an\nerror, unless you want to override method access to the package.\n\n=item Subroutine \u0026%s masks new package %s\n=item Subroutine \u0026%s masks new class %s\n\n(W shadow) A package or class has been added, but a subroutine already\nexist with the same name of the package, shadowing the package,\neffectively eliminating all access to the package via methods.  This\nis almost always an error, unless you want to override method access\nto the package.\n```\n\nThe first check is done when adding a subroutine, i.e. at compile time.\nThe second check is done when adding a package via the keywords package or class, i.e. at compile time. The check is not done when a package is created implicitly via a fully qualified symbol.\n\nUnfortunately the check if the shadowed package contains a sub (i.e. potential method) at all is too expensive, so the warning is also emitted for data-only packages without subs, even if there the warning can be ignored.\n\nSee cperl branch `smoke/gh368-warnshadow`","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1535273341,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEyMzI0OTkxMQ=="},"target":"a94238980680add82a4b7bc8fce84da808b32f9c452e15d17b5e7c1241d323c6","message":"Proposed perldiag.pod warning entry:\n```\n=item Subroutine \u0026%s masks existing package %s\n\n(W shadow) A subroutine has been added in the outer package with the\nsame name of the package, shadowing the package, effectively\neliminating all access to the package via methods.  This is almost always an\nerror, unless you want to override method access to the package.\n\n=item Subroutine \u0026%s masks new package %s\n=item Subroutine \u0026%s masks new class %s\n\n(W shadow) A package or class has been added, but a subroutine already\nexist with the same name of the package, shadowing the package,\neffectively eliminating all access to the package via methods.  This\nis almost always an error, unless you want to override method access\nto the package.\n```\n\nThe first check is done when adding a subroutine, i.e. at compile time.\nThe second check is done when adding a package via the keywords package or class, i.e. at compile time. The check is not done when a package is created implicitly via a fully qualified symbol.\n\nUnfortunately the check if the shadowed package contains a sub (i.e. potential method) at all is too expensive, so the warning is also emitted for data-only packages without subs, even if there the warning can be ignored. *TODO dont warn if no method is shadowed*\n\nSee cperl branch `smoke/gh368-warnshadow`","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1536919155,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyMTMwMjQzNg==","github-url":"https://github.com/perl11/cperl/issues/368#issuecomment-421302436"},"message":"Merged into v5.29.0c","files":null},{"type":4,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1536919156,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTg0NTcwMjAxMA=="},"status":2}]}