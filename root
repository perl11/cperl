{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1479464320,"metadata":{"github-id":"MDU6SXNzdWUxOTAyODMyODc=","github-url":"https://github.com/perl11/cperl/issues/223","origin":"github"},"title":"disable bidi spoofs on names","message":"but ok for comments and strings. \nIt should be clear why this is a bad idea. http://www.unicode.org/reports/tr36/#Bidirectional_Text_Spoofing\n\nThe parser already rejects those, and cperl already has tests for these:\n```\n\\x200b (no utf8) zero width space forbidden in identifiers\n\\x200b zero width space forbidden in identifiers\n\\x200c zero width non-joiner forbidden in identifiers\n\\x200d zero width joiner forbidden in identifiers\n\\xfeff zero width no-break space forbidden in identifiers\n\\x200e left-to-right mark forbidden in identifiers\n\\x200f right-to-left mark forbidden in identifiers\n\\x2060 word joiner forbidden in identifiers\n\\x2061 function application forbidden in identifiers\n\\x2062 invisible times forbidden in identifiers\n\\x2063 invisible seperator forbidden in identifiers\n```\n\n[IDNA2003] specification requires that:\n\n* each label of a host name must not use both right-to-left and left-to-right characters,\n* a label using right-to-left character must start and end with right-to-left characters.\n\nThe [IDNA2008] specification improves these rules, allowing some sequences that are incorrectly forbidden by the above rules, and disallowing others that can cause visual confusion.\n\nIDNA Recommendations:\n\n* Never allow bidi override characters.\n* As much as possible, avoid mixing right-to-left and left-to-right characters in a single name.\n* When right-to-left characters are used, limit the usage of left-to-right characters to well-known cases such as TLD names and URL scheme names (such as http, ftp, mailto, and so on).\n* Minimize the use of digits in host names and other components of IRIs containing right-to-left characters.\n* Keep IRIs containing bidi content simple to read.\n* Use reverse-bidi (visual order -\u003e storage order) to detect possible bidi spoofs. That is, one can apply bidi, then reverse bidi: if the result does not match the original storage order, then the visual reading is ambiguous and the string can be rejected. This is, however, subject to false positives, so this should probably be presented to users for confirmation.","files":null}]}