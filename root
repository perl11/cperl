{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1441998170,"metadata":{"github-id":"MDU6SXNzdWUxMDYwNzI0OTQ=","github-url":"https://github.com/perl11/cperl/issues/23","origin":"github"},"title":"inline subs","message":"perl-5.003_02 added an incomplete op_const_sv to check an optree for a single const or pad, and to mark it as CvCONST then. 760ac839\nNothing much changed since then.\n\nThis is \n1. wrong. only const pad values may be used like this. sideeffects changing the lexical are not safe. 5.22 started warning about this condition.\n1. not enough. proper constant folding should be done to check if the body may be inlinable.\n\nSplice a OP\\* into the caller if inlinable, not just a CONSTSUB via the const_sv logic.\nWith some heuristic/cost calculation when it makes sense.\n\nwe can also use the new :const and :pure attributes to mark functions as inlinable.\n:const to bypass the constant folding check, :pure to mark the closed over lexicals as not being changed by sideeffects.\n\nNote: inlined subs and methods are a huge performance win in most dynamic languages. esp. with the slow perl function calls, it might be a big win.\n\nAnalyze the body and check if a enter/leave is needed, and if the args can be hardcoded into the inlined body (optim_args). this can be done by ref (with consts and with `$_[]`) or by value via copies of the sv/pad.\notherwise use a simple `push @_ , args oplist` instead of the `pushmark args gv entersub` sequence.\n\nThe inlined body needs to be copied, as the nextstate and args needs to be changed. We can do this on the fly, or 2nd or more generally add a new `op_clone_oplist()` API, which just clones the ops, not the data. \n\nSee the branch `feature/CM-707-cperl-inline-subs`, now `feature/gh311-opclone`","files":null}]}