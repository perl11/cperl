{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1480497407,"metadata":{"github-id":"MDU6SXNzdWUxOTI1MTI5OTc=","github-url":"https://github.com/perl11/cperl/issues/228","origin":"github"},"title":"Unicode normalization of identifiers/names","message":"Preferably as in perl6 (NFG - https://design.perl6.org/S15.html their invention with dynamic codepoints for unknown combinations, which is really just needed for strings not identifiers) or just NFC (the standard - http://www.unicode.org/reports/tr15/).\nNot as on the MacOS filesystem decomposing to NFD. (i.e. é 0xe9 =\u003e e◌́ 0x65 0x301).\n(e.g. https://svn.apache.org/repos/asf/subversion/trunk/notes/unicode-composition-for-filenames).\nin cperl it's vice versa: e◌́ 0x65 0x301 =\u003e é 0xe9)\n\nNCD is faster, but needs more space and is ugly.\n\nWhich means, like in Python 3 and unlike as in perl6, unicode identifiers (names for gv and packages: variables, subs, packages, symbols) should be parsed and stored normalized, not asis.\nIn perl5 and perl6 there's no difference between strings and identifiers, in cperl there should.\n\nIn rakudo only the PERLIFY-STR method does this.\n\nMeasured slowdown: \u003c1% as of 55831a8a986f304f53bd0bc0530085a9a4c72e92, on darwin even 5.5% faster on usage with non-utf8 identifiers. utf8 identifiers are mostly slower due to the previous check_script call to the slow Unicode::UCD. Normalization checks and calls are fast.\n\nRelated work:\n* Python 3: normalizes to NFKC (2007)\nhttps://docs.python.org/3/reference/lexical_analysis.html#identifiers\n* R: locale dependent letters. with utf8 even detects same-script spoofs. uses similar to perl6 dynamic normalization in the stringi package.\n* Java: similar to perl5, not normalized.\n* JavaScript: similar to perl5, but names stored as UCS-2, which disallows supplementary Unicode characters and allows escapes. not normalized. https://mathiasbynens.be/notes/javascript-identifiers\n* C#: not normalized. source in NFC required, but diagnostics implementation dependent.\nhttps://msdn.microsoft.com/en-us/library/aa664670(v=vs.71).aspx\n* Go: similar to perl5. anything goes. not normalized. https://golang.org/ref/spec#Identifiers\n* Julia: similar to perl5. http://docs.julialang.org/en/latest/manual/variables/. Normalization discussed 2014 and rejected https://github.com/JuliaLang/julia/issues/5434 \n\nA bigger overview is https://rosettacode.org/wiki/Unicode_variable_names","files":null}]}