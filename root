{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1494605448,"metadata":{"github-id":"MDU6SXNzdWUyMjgzMzkwNjU=","github-url":"https://github.com/perl11/cperl/issues/280","origin":"github"},"title":"Wrong order of evaluation in map blocks","message":"The key should be stored before the value is calculated. Left to order evaluation of block members (i.e. a list), i.e. copy away `GvSV(defgv)`.\n\n`perl -e'sub x{$_=\"ouch\"};%h=map{$_=\u003ex}(0..3);print join\" \",%h'` =\u003e (ouch=\u003eouch), but should be \n(1=\u003eouch, 2=\u003eouch, 0=\u003eouch, 3=\u003eouch), because the map list is (ouch, ouch, ouch, ouch, ouch, ouch), which is then collapsed to (ouch=\u003eouch).\nSame problem with `sub x{$_=\"ouch\"};@h=map{$_=\u003ex}(0..2);print join \", \",@h` =\u003e (ouch, ouch, ouch, ouch, ouch, ouch) which should be (0, ouch, 1, ouch, 2, ouch) instead.\n\n`$_=\u003ex` =\u003e x changes $_, but should not influence the former key/list result.\n\nSee https://github.com/PatrickCronin/Map-Functional/issues/1\n\nLooks like the problem cannot be solved at runtime.\nmapstart sets a fresh `$_`, then the block produces the stack entries, then mapwhile consumes them.\nThe problem happens in the block, which overwrites `$_` before mapwhile can consume them.\nThe compiler could be changed to split the block into static list entries with interspersed mapwhile \nconsumers.\n\n    mapstart { stmt, stmt } mapwhile =\u003e\n    mapstart { stmt; mapwhile; stmt } mapwhile\n\nThis would help for the obvious static lists `{$_=\u003e$v}` and `{$_=\u003ex}`, but not for the 2nd problem with the call producing a list `{x}`. Which is fine.\n\n----\nFor hash assignments we could restrict the mapwhile producer to accept only pairs, not arbitrary lists. Something like `use strict 'hashpairs'`. See #281","files":null}]}