{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1526450199,"metadata":{"github-id":"MDU6SXNzdWUzMjM0NzgyMzg=","github-url":"https://github.com/perl11/cperl/issues/362","origin":"github"},"title":"Less m/{}/ Unescaped left brace in regex is deprecated here warnings","message":"automake and more widespread utils does not need to be plagued by spurious \"Unescaped left brace in regex\" warnings, when they don't need to be quoted.\nThe few cases where `{` is used for a special unicode group can be easily detected in regcomp.\n\nName: `\\N{}`\nProperty: `\\p{}, \\P{}`\nBreak: `\\b{}, \\B{}`\nCode: `\\x{}`, `\\o{}`\nGroup: `\\g{}`\n\nperlre.pod:\n    *(If a curly bracket occurs in any other context and does not form part of a\n       backslashed sequence like \"\\x{...}\", it is treated as a regular character.\n       However, a deprecation warning is raised for all such occurrences, and in Perl\n       v5.26, literal uses of a curly bracket will be required to be escaped, say by\n       preceding them with a backslash (\"\\{\") or enclosing them within square brackets\n       (\"[{]\").  This change will allow for future syntax extensions (like making the\n       lower bound of a quantifier optional), and better error checking of quantifiers.)*\n\nperldiag.pod:\n\n       Unescaped left brace in regex is deprecated here (and will be fatal in\n        Perl 5.30), passed through in regex; marked by \u003c-- HERE in m/%s/\n        (D deprecated, regexp) The simple rule to remember, if you want to\n        match a literal \"{\" character (U+007B \"LEFT CURLY BRACKET\") in a\n        regular expression pattern, is to escape each literal instance of it\n        in some way. Generally easiest is to precede it with a backslash, like\n        \"\\{\" or enclose it in square brackets (\"[{]\"). If the pattern\n        delimiters are also braces, any matching right brace (\"}\") should also\n        be escaped to avoid confusing the parser, for example,\n\n         qr{abc\\{def\\}ghi}\n\n        Forcing literal \"{\" characters to be escaped will enable the Perl\n        language to be extended in various ways in future releases. To avoid\n        needlessly breaking existing code, the restriction is is not enforced\n        in contexts where there are unlikely to ever be extensions that could\n        conflict with the use there of \"{\" as a literal.\n\n        In this release of Perl, some literal uses of \"{\" are fatal, and some\n        still just deprecated. This is because of an oversight: some uses of a\n        literal \"{\" that should have raised a deprecation warning starting in\n        v5.20 did not warn until v5.26. By making the already-warned uses\n        fatal now, some of the planned extensions can be made to the language\n        sooner. The cases which are still allowed will be fatal in Perl 5.30.\n\n        The contexts where no warnings or errors are raised are:\n\n        *   as the first character in a pattern, or following \"^\" indicating\n            to anchor the match to the beginning of a line.\n\n        *   as the first character following a \"|\" indicating alternation.\n\n        *   as the first character in a parenthesized grouping like\n\n             /foo({bar)/\n             /foo(?:{bar)/\n\n        *   as the first character following a quantifier\n\n             /\\s*{/\n\n\nUnescaped left brace in regex is illegal here in regex; marked by \u003c-- HERE\n    in m/%s/\n\nFor the proposed extensions: optional lower bound of a quantifier `{,\\d}`, and better error checking of quantifiers we need `{,` or `{\\d`, not justifying punishing all old usages of `hash{key}`, esp. since those keys are not literal numbers or commas.","files":null}]}