{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1478161094,"metadata":{"github-id":"MDU6SXNzdWUxODY5OTg3Mzc=","github-url":"https://github.com/perl11/cperl/issues/216","origin":"github"},"title":"PERL_REMOVE_OP_NULL","message":"remove NULL ops in rpeep, where the ops are already linearized.\nNULL ops in the head are already pruned, just intermediate not.\nThese should have happened 20 years ago already.\n\nFrom previous experiences only custom sort blocks didn't work with removed NULL ops in the compiler where we did that already. But with 5.25 it doesn't seem to be needed anymore, since sort was refactored. All tests pass.\n\nI added a `#define PERL_REMOVE_OP_NULL` for custom XS which deal with hard-structured optrees, and don't bypass NULL.\nI also added a temp. global `PL_count_null_ops` to see the effect with -Dk (compile time optimized).\n\nNote that the peephole optimizer does not really visit all ops, it leaves some holes, so some NULL ops still pass through. - rpeep is an architectural mess, which should have been rewritten properly before being exported and API'ified. It started as a glorified NULLifier, but was then expanded to a real peep, but kept several NULL related states which have nothing to do with it. op_opt, oldop, oldoldop, defer_queue[], ...\n\nBut for minor scripts there are still a few hundreds NULL ops removed and only a few dozen are kept.  NULL ops at the beginning are removed with `prune_chain_head()` already.\n\nBenchmarks are below 4%\n\ntesting for leaks:\n`PERL_DESTRUCT_LEVEL=2 valgrind --leak-check=full ./miniperl -Ilib -Dk t/comp/fold.t`\n(without PERL_DESTRUCT_LEVEL=2 global subs are not destructed, leaking some bytes).\n```\n== optimized NULL ops: 117\n==17241== HEAP SUMMARY:\n==17241==     in use at exit: 0 bytes in 0 blocks\n==17241==   total heap usage: 5,842 allocs, 5,842 frees, 554,512 bytes allocated\n==17241==\n==17241== All heap blocks were freed -- no leaks are possible\n```\nwhich is logical, given that op_free destroys ops structurely, not just linearily. i.e. it is descending into kids.","files":null}]}