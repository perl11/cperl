{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1485870367,"metadata":{"github-id":"MDU6SXNzdWUyMDQzMDAxODU=","github-url":"https://github.com/perl11/cperl/issues/247","origin":"github"},"title":"more typechecks: warn","message":"Currently we do strict (compile-time error) typechecks with the new signature and return-type checks. These features are new.\n\nBut we want to add more typechecks, esp. with assignment, even if cperl is still completely unsound.\nWhen casts can be added to satisfy types, do it with a warning. When not, error at compile-time.\n\n`%MyClass::; my MyClass @a; $a[0] = \"\";` needs to error. We cannot add a cast from Str to MyClass. And it needs to be done explicitly. A magic Str::MyClass method does not help, and we won't insert a bless here.\n\nBut we can always stringify, so the other way round is valid:\n`%MyClass::; my MyClass $c; my Str @a; $a[0] = $c;` which will add a stringify op into the assignment rhs. But it will warn with use warnings 'types'.\n\nMost coretypes can be casted, so we only throw a type warning:\n`my Int @a; $a[0] = \"\";` warns and inserts an int() op, which is then constant-folded away to 0.\n\nSee the branch `{feature,smoke}/gh247-ck_sassign`, which caught 2 bugs in the old core test suite.\nt/op/attrs.t: `my main $x : = 0;` is now invalid, as main = Int is invalid. Int cannot be casted to the user class main. (which is one of the few non-coretype classes which always exists)","files":null}]}