{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1509698888,"metadata":{"github-id":"MDU6SXNzdWUyNzA5MDk0ODg=","github-url":"https://github.com/perl11/cperl/issues/337","origin":"github"},"title":"merge blead for 5.27.2c (5.27.0 - 5.27.5)","message":"starting from 5.27.0 '7335cb8 Workaround for GNU Autoconf unescaped left brace' (pre 5.26.0)\n1437 commits.\n\n# Summary\n\n* 2 severe sprintf security bugs introduced, with the insecurity even exposed in the API (ULONG varargs indices and lengths).\n* Again much hash function nonsense and slowdown. The hash splitting rules do look nice in theory, but proved worse in practice. Benchmark such optims before. \n* Lot of useful C89 simplifications, with lot of breakage for XS modules using those symbols. Review\n* MULTICONCAT is nice, but re-adding encoding support was very tricky, so I doubt it's maintainability.\n* The usual destruction done with B maintainance.\n* Some innocent looking dummy improvements made things actually worse, as usual. Code review and testing should have helped.\n\n```\ng l --format='%H %s - %an' HEAD...7335cb8  \u003e merge-5.275\n  or emacs C-x h (Select All), A-x reverse-region\ng cp `grep -v '^#' merge-5.275|head -n10|cut -c-40`\n```\n\n# Reject\n```\n     29/40 Yves Orton \u003cdemerphq@gmail.com\u003e\n      9/284 David Mitchell \u003cdavem@iabyn.com\u003e\n      8/216 Karl Williamson \u003ckhw@cpan.org\u003e\n      8/44 Father Chrysostomos \u003csprout@cpan.org\u003e\n      6/25 Aaron Crane \u003carc@cpan.org\u003e\n      5/20 Zefram \u003czefram@fysh.org\u003e\n      5/11 Nicolas R \u003catoomic@cpan.org\u003e\n      3/79 Tony Cook \u003ctony@develop-help.com\u003e\n      3/40 Dagfinn Ilmari Mannsåker \u003cilmari@ilmari.org\u003e\n      2/2 Todd Rinaldo \u003ctoddr@cpan.org\u003e\n      2/9 H.Merijn Brand \u003ch.m.brand@xs4all.nl\u003e\n      1/14 Sawyer X \u003cxsawyerx@cpan.org\u003e\n      1/27 Lukas Mai \u003cl.mai@web.de\u003e\n      1/1 David H. Gutteridge \u003cdhgutteridge@sympatico.ca\u003e\n      1/? David Cantrell \u003cdavid@cantrell.org.uk\u003e\n```\n\n* fcd573e77ec68fbe3936ac1381654581fba8a64f remove -DH (DEBUG_H) misfeature - David Mitchell\n  A lie. It was heavily used and published (even to p5p) with my hash stats work. Dave and Yves just chose to ignore it. There's also no bug in it as stated.\n\n* yves hash breakage (again):\n  * 4d8c782364ae966f53263102f1850382d4aeef7a use a specific define for 64 bit hashing - Yves Orton\n   1. typo in the most basic #if IVSZIE == 8 #define CAN64BITHASH\n   2. CAN64BITHASH needs to be HAS_QUAD not if a 32bit is used as 32bit or not.\n  * 05f97de032fe95cabe8c9f6d6c0a5897b1616194 Tweak our hash bucket splitting rules - Yves Orton\n  splitting only on collisions might be theoretically a good idea. practically it's not. it's significantly slower, see the `old/yves-hsplit` branch\n  performance with different -DHV_FILL_RATE:\n   old code + 67:  9121 ms\n   old code + 90:  9215 ms\n   old code + 100: 9616 ms\n   new code + 90: 10001 ms\n   new code + 67:  9463 ms\n  * a3bf60fbb1f05cd2c69d4ff0a2ef99537afdaba7 Add new hashing and \"hash with state\" infrastructure - Yves Orton\n  a bit better than siphash, but siphash is a too crazy idea anyway. still too slow, and still not secure.\n  and splitting the func on key len costs in the hot code.\n  * 259e968485f855f70472c8be9267efceca42b0fb Move utility macros to their own file - Yves Orton\n  * e7e07d980872d020fd93a43cda96f72c8013af20 improve and update hash algorithm configuration docs in INSTALL - Yves Orton\n* b02f36453d1392e2b0bd62fdde2b286fb60bd5bc RT #127742: Hash keys are limited to 2 GB - throw an exception if hash keys are too long - Aaron Crane\n  Error yes, we already do, but don't change the API to allow it in the first place, allowing those in share_hek and then error.\n  Also check overlong hash keys at compile-time in check_hash_fields_and_hekify(), not just in hv_common().\n* 522dba3426c18f53b5e3a09c16b13670d4bafd6d Storable: fix a couple of 32-bit warnings - David Mitchell\n  max classname len = I32, not I64\n* 3135e2b23ba431c10d896ed61732e67ce830481b [perl #123981] Travis-CI support - Tony Cook\n  stolen from cperl without attribution\n* 2a794dcfb0cb865c8a1f250b7019bc99bfeb5bb2 Update test skips for no fchdir. - Craig A. Berry\n  wrong\n* 2362b21b1463004e2e5067e6904c5b25c0fc426d Opcode: check invariant at compile time - Lukas Mai\n  PL_maxo is dynamic in cperl: custom ops!\n* 6b88b15be98ae595ce9dc9045df48ed656d073be locale.t: Refactor error reporting code - Karl Williamson\n  Much worse than the cperl refactoring. Not usable.\n* a247dbb235b6ada82425a663c4ebd4f426e4947f S_check_for_bool_cxt(): avoid OPpTARGET_MY + bool - David Mitchell\n* 4ef3c1cb7c86ade65752d609b1e1f3bc01796b49 experimental::lexical_topic is no longer a warning category, it's a fatal compile-time error - David Cantrell\n  no, we still support OPpTARGET_MY\n* 02817d9f7e110de9a281b1ccae6129d111fa51d0 Strip ccache from $Config{cc} - H.Merijn Brand\n  nonsense. ccache can be easily installed, and stripping it defeats its purpose to speed up rebuilds.\n* cfbdacd3fe159abe693ef1eb6fd7460850ef9312 add a stack extend check to pp_entersub for XS subs - Tony Cook\n  not needed as the cperl runloop can do it much better, not just for sub calls.\n* 8b07d9e2085efc07ae6203ced3ea96189339a52e tests - remove useless setting in BEGIN - Nicolas R\n  They are not useless. They guarantee using the core and only the core modules. E.g. use Config in t/opbasic/cmp.t.\n* d190dde9b72a7c306622389007b0dba86901ce52 test - Do not run test output at compilation time - Nicolas R\n  broke make minitest\n* 95d444af8eeefcf058bb763df9a51ae1ba3d8942 Remove unnecessary module loads from B and O - Todd Rinaldo\n  Though it looks like ok theoretically, it explodes the BEGIN blocks by 2x (from 4 to 8 with optree_specials.t), and doesn't improve anything with perlcc.\n- a3371546646b4c0f722f2659beac614649d6cfd5 avoid runtime module loading in File::Spec - Zefram\n  This destroys the pureperl feature of File::Spec for miniperl, esp. on windows, ... cost: 2 days!\n* 1a58b39af83e11fcbeef7ae4cd90c565b1f6b8cb Replace multiple 'use vars' by 'our' in dist - Nicolas R\n  This means silently removing support for pre-5.6 versions for cpan updates. Only done for Filter so far. He does it for: Attribute-Handlers, Data-Dumper, Dumpvalue, ExtUtils-CBuilder, Filter-Simple, I18N-LangTags, Locale-Maketext, Module-CoreList, Net-Ping (where I am upstream), PathTools, Safe, SelfLoader, Storable (ditto), Test, XSLoader, base, constant.\n  I also see no discussion or documentation or adjusted version guards in any of these.\n* 36a113ce6e02b318488367d68c0de9cb2f852752 Define I_STDARG cpp symbol for XS backcompat - Aaron Crane\n  Rather fixed up with 9d82a2b71ca36a0f03ce4676aab0bada365292a9\n* 959ab4d160c8e8efd8d605b7e1d183085491e9cf Configure: rebuild from latest units - Aaron Crane\n* 0f00948681dc0ceca5f81f143dec277c5a598141 Quieten Time-HiRes test noise - Dagfinn Ilmari Mannsåker\n* e05a85b2946214cbfe22da6059e0fe0307298c4d fix Perl_get_cvn_flags() return value - David Mitchell\n* 817794ed06753164373b1e73a0e98e885b1274ed Revert \"vutil.c: use new SvPVCLEAR and constant string friendly macros\" - Father Chrysostomos\n* cc851c4b38a5e51a2c6b719e6d60e9a14fa0268e Porting/Maintainers.pl: vutil.c is no longer CUSTOMIZED - Father Chrysostomos\n* 5ffd609608e2a003d9a229e7cd0ba1f883c53ade toke.c: Rmv useless code - Karl Williamson\n* 7a831b721c469aeccfe1110a2d177dd115d5998d Speed up Carp.pm when backtrace arguments are references - Nicolas R\n* 9f8d27b7d21e672ce31e073fdc4c6d8130572c04 toke.c: Fix wrong use of memrchr - Karl Williamson\n* 11b2cef65dac01e8723c9a6f6e640665cb752a2c perl.h: Use STMT_START { ... } STMT_END - Karl Williamson\n* d8fb0a68932bdb9b3896fb7811a6a5aff0a8d5b8 Bump version of B/t/OptreeCheck to 0.16 - Karl Williamson\n* 29d69c3c41c7e93f884256b1087face64d5fdd1e parse yada-yada only as a statement - Zefram\n  No, it is a TERM, thanks to Lukas Mai\n* 7b1af8a66568cbb1b215ecb17fa5f19059208f55 Add support for --help and --version in perlbug - Todd Rinaldo\n* a3371546646b4c0f722f2659beac614649d6cfd5 avoid runtime module loading in File::Spec - Zefram\n  This is the worst of the 5.27 series so far.\n* aa175282682d06ba060a6619a51bf5530715032c Remove win32 logic from t/porting/authors.t - Nicolas R\n* cd2a978d2293dbb03a031e76b83063ff03d6a04b Time::HiRes disable a flapping test for CI - Nicolas R\n  Already done.\n* eb32218efcbe5450c9671923c624955355282e18 rip out Perl version portability from B - Zefram\n  I knew it. Last time they wanted to destroy B for packagers it could be voted down.\n* 68e4117104b9c2ff428dd80807d165702e35bb7b fix ext/B/t/optree_specials.t - David Mitchell\n* 843835bcbbb548f6263269c55e166f35c68099d1 rip out CPAN-release cruft from B::Deparse - Zefram\n* 5860c1eebae0e97105f7ef5ebcb86d1c72654c51 S_expect_number(): return STRLEN not I32 - David Mitchell\n* 03a22d83037406c116b676033c0bd575b6e8ff8a sv_vcatpvfn() family: make svmax arg Size_t - David Mitchell\n  Those two are actually security relevant bugs. See #344 \n\n\n# Fixups\n```\n     26 \u003cAaron Crane arc@cpan.org\u003e\n     11 \u003cKarl Williamson khw@cpan.org\u003e\n      5 \u003cNicolas R atoomic@cpan.org\u003e\n      5 \u003cDavid Mitchell davem@iabyn.com\u003e\n      4 \u003cFather Chrysostomos sprout@cpan.org\u003e\n      3 \u003cTodd Rinaldo toddr@cpan.org\u003e\n      2 \u003cTony Cook tony@develop-help.com\u003e\n      2 \u003cH.Merijn Brand h.m.brand@xs4all.nl\u003e\n      1 \u003cSteve Hay steve.m.hay@googlemail.com\u003e\n      1 \u003cSlaven Rezic slaven@rezic.de\u003e\n      1 \u003cDagfinn Ilmari Mannsåker ilmari@ilmari.org\u003e\n```\n\n* a1b60c8dae6ad00c164e20cf9151bae68e85ab2d \"make do \"a\\0b\" fail silently instead of throwing (RT #129928)\" \n  was skipped with 5.26. It is broken, but parts and the premise are useful.\n* 7b394f128b8d5e84ca0e485c98c8f135baf53b4f add boolean context support to several ops - David Mitchell\n    - LENGTH also at run-time in boolean context, but unify to \n      OPpTRUEBOOL, only seperate OPpLENGTH_MAYBEBOOL flag.\n    - Keep our LENGTH OPpTARGET_MY optimization.\n    - Enable OPpLENGTH_MAYBE_TRUEBOOL test.\n    - Convert to our OpWANT_SCALAR macros.\n    - Extend set_boolean for the new boolean op support.\n* f961b1eba1e87173b5720f83913c4830be29a28e regen/opcodes: move 'method' entry next to others - David Mitchell\n  move them after entersub, so all calling ops are together\n* 0da6b2bca101a2b420b6f025b8e74660c59f85e2\n    More RX_FOO(prog) =\u003e RX_FOO(rx_sv) fixes\n    Skip some isREGEXP checks when using RX_WRAPPED == SvPVX\n    C++ fixups\n    error: expected primary-expression before do (wrong paren)\n* 04322328fc4bc2863d0bc74339ed92d33b7eaba7 Assume we have C89 memset() - Aaron Crane\n  removing the always defined HAS_MEMSET will break all extensions which do use ppport.h\n  cperl just defines HAS_MEMSET. See https://grep.metacpan.org/search?q=HAS_MEMSET\n* 1eb06a387814d96975ac806b89805b1e28e8080d Assume we have C89 memcpy() and memmove() - Aaron Crane\n  ditto for HAS_MEMCPY, HAS_MEMMOVE\n* e5d7f4e5fdc8fcb324745c39345b369ab04cadb1 Assume we have sane C89 memcmp() - Aaron Crane\n  ditto for HAS_MEMCMP\n* 6e876d890f021fe5f975eed6716986552e849b66 Assume we have C89 memchr() - Aaron Crane\n  ditto for HAS_MEMCHR\n* 516e10a9956d11346cdddceee7203ef7e6181dc0 Assume C89 \"volatile\" keyword - Aaron Crane\n* e791399041815a1a45cea3c7f277c7045b96e51b Rely on C89 snprintf() - Aaron Crane\n* edee246148d0f7e22ea026e09413d4bcc0cb51dd Rely on C89 vprintf() - Aaron Crane\n* 01f1810e38e276d92d051978043505422ee3211b Rely on C89 variadic prototypes - Aaron Crane\n* 3d97541cde09d330e1c16246cbe085f4717abb01 Rely on C89 prototypes - Aaron Crane\n* 9d82a2b71ca36a0f03ce4676aab0bada365292a9 Rely on C89 \u003cstdarg.h\u003e - Aaron Crane\n* dd512de320cc50ddbfc3ce3ee4996367b911d983 Rely on C89 \u003cstdlib.h\u003e - Aaron Crane\n* 346712be0b77cf7a59cff19c5b96533d9a780268 Rely on C89 \u003cstddef.h\u003e - Aaron Crane\n* 03f3961765f87fb8bccb4e3fa5b9e2e533d7dc30 Use snprintf() in favour of sprintf() - Aaron Crane\n* f1519f70705b2eee563b9ac4056d4eb39d383ea1 Rely on C89 sprintf() return value semantics - Aaron Crane\n* 1509effa50d0917578f8ab4dd412918cb11d6fcb Rely on C89 strchr() and strrchr() - Aaron Crane\n* 350b922a8600b68529a55d5fcc05d4ebd9a45990 Rely on C89 \u003climits.h\u003e - Aaron Crane","files":null}]}