/* ex: set ro ft=c: -*- buffer-read-only: t -*-
 *
 *    opcode.h
 *
 *    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
 *    2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
 *    2014, 2015 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/opcode.pl from its data.
 * Any changes made here will be lost!
 */

#ifndef PERL_GLOBAL_STRUCT_INIT

#define Perl_pp_scalar Perl_pp_null
#define Perl_pp_padany Perl_unimplemented_op
#define Perl_pp_chomp Perl_pp_chop
#define Perl_pp_schomp Perl_pp_schop
#define Perl_pp_i_preinc Perl_pp_preinc
#define Perl_pp_predec Perl_pp_preinc
#define Perl_pp_i_predec Perl_pp_preinc
#define Perl_pp_i_postinc Perl_pp_postinc
#define Perl_pp_postdec Perl_pp_postinc
#define Perl_pp_i_postdec Perl_pp_postinc
#define Perl_pp_s_lt Perl_pp_s_le
#define Perl_pp_s_gt Perl_pp_s_le
#define Perl_pp_s_ge Perl_pp_s_le
#define Perl_pp_bit_xor Perl_pp_bit_or
#define Perl_pp_i_bit_xor Perl_pp_i_bit_or
#define Perl_pp_s_bit_xor Perl_pp_s_bit_or
#define Perl_pp_cos Perl_pp_sin
#define Perl_pp_exp Perl_pp_sin
#define Perl_pp_log Perl_pp_sin
#define Perl_pp_sqrt Perl_pp_sin
#define Perl_pp_hex Perl_pp_oct
#define Perl_pp_regcmaybe Perl_pp_null
#define Perl_pp_transr Perl_pp_trans
#define Perl_pp_rindex Perl_pp_index
#define Perl_pp_lcfirst Perl_pp_ucfirst
#define Perl_pp_aelemfast_lex Perl_pp_aelemfast
#define Perl_pp_n_aelem Perl_pp_i_aelem
#define Perl_pp_s_aelem Perl_pp_i_aelem
#define Perl_pp_i_aelem_u Perl_pp_aelem_u
#define Perl_pp_n_aelem_u Perl_pp_aelem_u
#define Perl_pp_s_aelem_u Perl_pp_aelem_u
#define Perl_pp_avalues Perl_pp_akeys
#define Perl_pp_values Perl_do_kv
#define Perl_pp_keys Perl_do_kv
#define Perl_pp_rv2hv Perl_pp_rv2av
#define Perl_pp_pop Perl_pp_shift
#define Perl_pp_mapstart Perl_pp_grepstart
#define Perl_pp_dor Perl_pp_defined
#define Perl_pp_andassign Perl_pp_and
#define Perl_pp_orassign Perl_pp_or
#define Perl_pp_dorassign Perl_pp_defined
#define Perl_pp_lineseq Perl_pp_null
#define Perl_pp_scope Perl_pp_null
#define Perl_pp_dump Perl_pp_goto
#define Perl_pp_dbmclose Perl_pp_untie
#define Perl_pp_read Perl_pp_sysread
#define Perl_pp_say Perl_pp_print
#define Perl_pp_seek Perl_pp_sysseek
#define Perl_pp_fcntl Perl_pp_ioctl
#ifdef HAS_SOCKET
#define Perl_pp_send Perl_pp_syswrite
#define Perl_pp_recv Perl_pp_sysread
#else
#define Perl_pp_send Perl_unimplemented_op
#define Perl_pp_recv Perl_unimplemented_op
#define Perl_pp_socket Perl_unimplemented_op
#endif
#ifdef HAS_SOCKET
#define Perl_pp_connect Perl_pp_bind
#define Perl_pp_gsockopt Perl_pp_ssockopt
#define Perl_pp_getsockname Perl_pp_getpeername
#else
#define Perl_pp_bind Perl_unimplemented_op
#define Perl_pp_connect Perl_unimplemented_op
#define Perl_pp_listen Perl_unimplemented_op
#define Perl_pp_accept Perl_unimplemented_op
#define Perl_pp_shutdown Perl_unimplemented_op
#define Perl_pp_gsockopt Perl_unimplemented_op
#define Perl_pp_ssockopt Perl_unimplemented_op
#define Perl_pp_getsockname Perl_unimplemented_op
#define Perl_pp_getpeername Perl_unimplemented_op
#endif
#define Perl_pp_lstat Perl_pp_stat
#define Perl_pp_ftrwrite Perl_pp_ftrread
#define Perl_pp_ftrexec Perl_pp_ftrread
#define Perl_pp_fteread Perl_pp_ftrread
#define Perl_pp_ftewrite Perl_pp_ftrread
#define Perl_pp_fteexec Perl_pp_ftrread
#define Perl_pp_ftsize Perl_pp_ftis
#define Perl_pp_ftmtime Perl_pp_ftis
#define Perl_pp_ftatime Perl_pp_ftis
#define Perl_pp_ftctime Perl_pp_ftis
#define Perl_pp_fteowned Perl_pp_ftrowned
#define Perl_pp_ftzero Perl_pp_ftrowned
#define Perl_pp_ftsock Perl_pp_ftrowned
#define Perl_pp_ftchr Perl_pp_ftrowned
#define Perl_pp_ftblk Perl_pp_ftrowned
#define Perl_pp_ftfile Perl_pp_ftrowned
#define Perl_pp_ftdir Perl_pp_ftrowned
#define Perl_pp_ftpipe Perl_pp_ftrowned
#define Perl_pp_ftsuid Perl_pp_ftrowned
#define Perl_pp_ftsgid Perl_pp_ftrowned
#define Perl_pp_ftsvtx Perl_pp_ftrowned
#define Perl_pp_ftbinary Perl_pp_fttext
#define Perl_pp_unlink Perl_pp_chown
#define Perl_pp_chmod Perl_pp_chown
#define Perl_pp_utime Perl_pp_chown
#define Perl_pp_symlink Perl_pp_link
#define Perl_pp_kill Perl_pp_chown
#define Perl_pp_localtime Perl_pp_gmtime
#define Perl_pp_shmget Perl_pp_semget
#define Perl_pp_shmctl Perl_pp_semctl
#define Perl_pp_shmread Perl_pp_shmwrite
#define Perl_pp_msgget Perl_pp_semget
#define Perl_pp_msgctl Perl_pp_semctl
#define Perl_pp_msgsnd Perl_pp_shmwrite
#define Perl_pp_msgrcv Perl_pp_shmwrite
#define Perl_pp_semop Perl_pp_shmwrite
#define Perl_pp_dofile Perl_pp_require
#define Perl_pp_ghbyname Perl_pp_ghostent
#define Perl_pp_ghbyaddr Perl_pp_ghostent
#define Perl_pp_gnbyname Perl_pp_gnetent
#define Perl_pp_gnbyaddr Perl_pp_gnetent
#define Perl_pp_gpbyname Perl_pp_gprotoent
#define Perl_pp_gpbynumber Perl_pp_gprotoent
#define Perl_pp_gsbyname Perl_pp_gservent
#define Perl_pp_gsbyport Perl_pp_gservent
#define Perl_pp_snetent Perl_pp_shostent
#define Perl_pp_sprotoent Perl_pp_shostent
#define Perl_pp_sservent Perl_pp_shostent
#define Perl_pp_enetent Perl_pp_ehostent
#define Perl_pp_eprotoent Perl_pp_ehostent
#define Perl_pp_eservent Perl_pp_ehostent
#define Perl_pp_gpwnam Perl_pp_gpwent
#define Perl_pp_gpwuid Perl_pp_gpwent
#define Perl_pp_spwent Perl_pp_ehostent
#define Perl_pp_epwent Perl_pp_ehostent
#define Perl_pp_ggrnam Perl_pp_ggrent
#define Perl_pp_ggrgid Perl_pp_ggrent
#define Perl_pp_sgrent Perl_pp_ehostent
#define Perl_pp_egrent Perl_pp_ehostent
#define Perl_pp_custom Perl_unimplemented_op
#define Perl_pp_reach Perl_pp_rkeys
#define Perl_pp_rvalues Perl_pp_rkeys

START_EXTERN_C

#ifndef DOINIT
EXTCONST char* const PL_op_name[];
#else
EXTCONST char* const PL_op_name[] = {
	"null",	/* 0: null operation */
	"stub",	/* 1: stub */
	"scalar",	/* 2: scalar */
	"pushmark",	/* 3: pushmark */
	"wantarray",	/* 4: wantarray */
	"const",	/* 5: constant item */
	"gvsv",	/* 6: scalar variable */
	"gv",	/* 7: glob value */
	"gelem",	/* 8: glob elem */
	"padsv",	/* 9: private variable */
	"padav",	/* 10: private array */
	"padhv",	/* 11: private hash */
	"padany",	/* 12: private value */
	"pushre",	/* 13: push regexp */
	"sassign",	/* 14: scalar assignment */
	"aassign",	/* 15: list assignment */
	"chop",	/* 16: chop */
	"schop",	/* 17: scalar chop */
	"chomp",	/* 18: chomp */
	"schomp",	/* 19: scalar chomp */
	"defined",	/* 20: defined operator */
	"undef",	/* 21: undef operator */
	"study",	/* 22: study */
	"pos",	/* 23: match position */
	"preinc",	/* 24: preincrement (++) */
	"i_preinc",	/* 25: integer preincrement (++) */
	"predec",	/* 26: predecrement (--) */
	"i_predec",	/* 27: integer predecrement (--) */
	"postinc",	/* 28: postincrement (++) */
	"i_postinc",	/* 29: integer postincrement (++) */
	"postdec",	/* 30: postdecrement (--) */
	"i_postdec",	/* 31: integer postdecrement (--) */
	"pow",	/* 32: exponentiation (**) */
	"multiply",	/* 33: multiplication (*) */
	"i_multiply",	/* 34: integer multiplication (*) */
	"u_multiply",	/* 35: iv+uv multiplication (+) */
	"divide",	/* 36: division (/) */
	"i_divide",	/* 37: integer division (/) */
	"modulo",	/* 38: modulus (%) */
	"i_modulo",	/* 39: integer modulus (%) */
	"repeat",	/* 40: repeat (x) */
	"add",	/* 41: addition (+) */
	"i_add",	/* 42: integer addition (+) */
	"u_add",	/* 43: iv+uv addition (+) */
	"subtract",	/* 44: subtraction (-) */
	"i_subtract",	/* 45: integer subtraction (-) */
	"concat",	/* 46: concatenation (.) or string */
	"stringify",	/* 47: string */
	"left_shift",	/* 48: left bitshift (<<) */
	"right_shift",	/* 49: right bitshift (>>) */
	"lt",	/* 50: numeric lt (<) */
	"i_lt",	/* 51: integer lt (<) */
	"gt",	/* 52: numeric gt (>) */
	"i_gt",	/* 53: integer gt (>) */
	"le",	/* 54: numeric le (<=) */
	"i_le",	/* 55: integer le (<=) */
	"ge",	/* 56: numeric ge (>=) */
	"i_ge",	/* 57: integer ge (>=) */
	"eq",	/* 58: numeric eq (==) */
	"i_eq",	/* 59: integer eq (==) */
	"ne",	/* 60: numeric ne (!=) */
	"i_ne",	/* 61: integer ne (!=) */
	"cmp",	/* 62: numeric comparison (<=>) */
	"i_cmp",	/* 63: integer comparison (<=>) */
	"s_lt",	/* 64: string lt */
	"s_gt",	/* 65: string gt */
	"s_le",	/* 66: string le */
	"s_ge",	/* 67: string ge */
	"s_eq",	/* 68: string eq */
	"s_ne",	/* 69: string ne */
	"s_cmp",	/* 70: string comparison (cmp) */
	"bit_and",	/* 71: bitwise and (&) */
	"bit_xor",	/* 72: bitwise xor (^) */
	"bit_or",	/* 73: bitwise or (|) */
	"i_bit_and",	/* 74: integer bitwise and (&) */
	"i_bit_xor",	/* 75: integer bitwise xor (^) */
	"i_bit_or",	/* 76: integer bitwise or (|) */
	"s_bit_and",	/* 77: string bitiwse and (&) */
	"s_bit_xor",	/* 78: string bitwise xor (^) */
	"s_bit_or",	/* 79: string bitwise or (|) */
	"negate",	/* 80: negation (-) */
	"i_negate",	/* 81: integer negation (-) */
	"not",	/* 82: not */
	"complement",	/* 83: 1's complement (~) */
	"i_complement",	/* 84: integer 1's complement (~) */
	"s_complement",	/* 85: string 1's complement (~) */
	"smartmatch",	/* 86: smart match */
	"atan2",	/* 87: atan2 */
	"sin",	/* 88: sin */
	"cos",	/* 89: cos */
	"rand",	/* 90: rand */
	"srand",	/* 91: srand */
	"exp",	/* 92: exp */
	"log",	/* 93: log */
	"sqrt",	/* 94: sqrt */
	"int",	/* 95: int */
	"hex",	/* 96: hex */
	"oct",	/* 97: oct */
	"abs",	/* 98: abs */
	"rv2gv",	/* 99: ref-to-glob cast */
	"rv2sv",	/* 100: scalar dereference */
	"av2arylen",	/* 101: array length */
	"rv2cv",	/* 102: subroutine dereference */
	"anoncode",	/* 103: anonymous subroutine */
	"prototype",	/* 104: subroutine prototype */
	"refgen",	/* 105: reference constructor */
	"srefgen",	/* 106: single ref constructor */
	"ref",	/* 107: reference-type operator */
	"bless",	/* 108: bless */
	"backtick",	/* 109: quoted execution (``, qx) */
	"glob",	/* 110: glob */
	"readline",	/* 111: <HANDLE> */
	"rcatline",	/* 112: append I/O operator */
	"regcmaybe",	/* 113: regexp internal guard */
	"regcreset",	/* 114: regexp internal reset */
	"regcomp",	/* 115: regexp compilation */
	"match",	/* 116: pattern match (m//) */
	"qr",	/* 117: pattern quote (qr//) */
	"subst",	/* 118: substitution (s///) */
	"substcont",	/* 119: substitution iterator */
	"trans",	/* 120: transliteration (tr///) */
	"transr",	/* 121: transliteration (tr///) */
	"length",	/* 122: length */
	"substr",	/* 123: substr */
	"vec",	/* 124: vec */
	"index",	/* 125: index */
	"rindex",	/* 126: rindex */
	"sprintf",	/* 127: sprintf */
	"formline",	/* 128: formline */
	"ord",	/* 129: ord */
	"chr",	/* 130: chr */
	"crypt",	/* 131: crypt */
	"ucfirst",	/* 132: ucfirst */
	"lcfirst",	/* 133: lcfirst */
	"uc",	/* 134: uc */
	"lc",	/* 135: lc */
	"quotemeta",	/* 136: quotemeta */
	"rv2av",	/* 137: array dereference */
	"aelemfast",	/* 138: constant array element */
	"aelemfast_lex",	/* 139: constant lexical array element */
	"aelem",	/* 140: array element */
	"i_aelem",	/* 141: int array element */
	"n_aelem",	/* 142: num array element */
	"s_aelem",	/* 143: str array element */
	"aelemfast_lex_u",	/* 144: unchecked constant aelem */
	"aelem_u",	/* 145: unchecked aelem */
	"i_aelem_u",	/* 146: unchecked int aelem */
	"n_aelem_u",	/* 147: unchecked num aelem */
	"s_aelem_u",	/* 148: unchecked str aelem */
	"aslice",	/* 149: array slice */
	"kvaslice",	/* 150: index/value array slice */
	"aeach",	/* 151: each on array */
	"akeys",	/* 152: keys on array */
	"avalues",	/* 153: values on array */
	"each",	/* 154: each */
	"values",	/* 155: values */
	"keys",	/* 156: keys */
	"delete",	/* 157: delete */
	"exists",	/* 158: exists */
	"rv2hv",	/* 159: hash dereference */
	"helem",	/* 160: hash element */
	"hslice",	/* 161: hash slice */
	"kvhslice",	/* 162: key/value hash slice */
	"multideref",	/* 163: array or hash lookup */
	"unpack",	/* 164: unpack */
	"pack",	/* 165: pack */
	"split",	/* 166: split */
	"join",	/* 167: join or string */
	"list",	/* 168: list */
	"lslice",	/* 169: list slice */
	"anonlist",	/* 170: anonymous array ([]) */
	"anonhash",	/* 171: anonymous hash ({}) */
	"splice",	/* 172: splice */
	"push",	/* 173: push */
	"pop",	/* 174: pop */
	"shift",	/* 175: shift */
	"unshift",	/* 176: unshift */
	"sort",	/* 177: sort */
	"reverse",	/* 178: reverse */
	"grepstart",	/* 179: grep */
	"grepwhile",	/* 180: grep iterator */
	"mapstart",	/* 181: map */
	"mapwhile",	/* 182: map iterator */
	"range",	/* 183: flipflop */
	"flip",	/* 184: range (or flip) */
	"flop",	/* 185: range (or flop) */
	"and",	/* 186: logical and (&&) */
	"or",	/* 187: logical or (||) */
	"xor",	/* 188: logical xor */
	"dor",	/* 189: defined or (//) */
	"cond_expr",	/* 190: conditional expression */
	"andassign",	/* 191: logical and assignment (&&=) */
	"orassign",	/* 192: logical or assignment (||=) */
	"dorassign",	/* 193: defined or assignment (//=) */
	"method",	/* 194: method lookup */
	"entersub",	/* 195: subroutine entry */
	"enterxssub",	/* 196: XS subroutine entry */
	"leavesub",	/* 197: subroutine exit */
	"leavesublv",	/* 198: lvalue subroutine return */
	"caller",	/* 199: caller */
	"warn",	/* 200: warn */
	"die",	/* 201: die */
	"reset",	/* 202: symbol reset */
	"lineseq",	/* 203: line sequence */
	"nextstate",	/* 204: next statement */
	"dbstate",	/* 205: debug next statement */
	"unstack",	/* 206: iteration finalizer */
	"enter",	/* 207: block entry */
	"leave",	/* 208: block exit */
	"scope",	/* 209: block */
	"enteriter",	/* 210: foreach loop entry */
	"iter",	/* 211: foreach loop iterator */
	"enterloop",	/* 212: loop entry */
	"leaveloop",	/* 213: loop exit */
	"return",	/* 214: return */
	"last",	/* 215: last */
	"next",	/* 216: next */
	"redo",	/* 217: redo */
	"dump",	/* 218: dump */
	"goto",	/* 219: goto */
	"exit",	/* 220: exit */
	"method_named",	/* 221: named method */
	"method_super",	/* 222: named super method */
	"method_redir",	/* 223: redirect named method */
	"method_redir_super",	/* 224: redirect named super */
	"entergiven",	/* 225: given() */
	"leavegiven",	/* 226: leave given block */
	"enterwhen",	/* 227: when() */
	"leavewhen",	/* 228: leave when block */
	"break",	/* 229: break */
	"continue",	/* 230: continue */
	"open",	/* 231: open */
	"close",	/* 232: close */
	"pipe_op",	/* 233: pipe */
	"fileno",	/* 234: fileno */
	"umask",	/* 235: umask */
	"binmode",	/* 236: binmode */
	"tie",	/* 237: tie */
	"untie",	/* 238: untie */
	"tied",	/* 239: tied */
	"dbmopen",	/* 240: dbmopen */
	"dbmclose",	/* 241: dbmclose */
	"sselect",	/* 242: select system call */
	"select",	/* 243: select */
	"getc",	/* 244: getc */
	"read",	/* 245: read */
	"enterwrite",	/* 246: write */
	"leavewrite",	/* 247: write exit */
	"prtf",	/* 248: printf */
	"print",	/* 249: print */
	"say",	/* 250: say */
	"sysopen",	/* 251: sysopen */
	"sysseek",	/* 252: sysseek */
	"sysread",	/* 253: sysread */
	"syswrite",	/* 254: syswrite */
	"eof",	/* 255: eof */
	"tell",	/* 256: tell */
	"seek",	/* 257: seek */
	"truncate",	/* 258: truncate */
	"fcntl",	/* 259: fcntl */
	"ioctl",	/* 260: ioctl */
	"flock",	/* 261: flock */
	"send",	/* 262: send */
	"recv",	/* 263: recv */
	"socket",	/* 264: socket */
	"sockpair",	/* 265: socketpair */
	"bind",	/* 266: bind */
	"connect",	/* 267: connect */
	"listen",	/* 268: listen */
	"accept",	/* 269: accept */
	"shutdown",	/* 270: shutdown */
	"gsockopt",	/* 271: getsockopt */
	"ssockopt",	/* 272: setsockopt */
	"getsockname",	/* 273: getsockname */
	"getpeername",	/* 274: getpeername */
	"lstat",	/* 275: lstat */
	"stat",	/* 276: stat */
	"ftrread",	/* 277: -R */
	"ftrwrite",	/* 278: -W */
	"ftrexec",	/* 279: -X */
	"fteread",	/* 280: -r */
	"ftewrite",	/* 281: -w */
	"fteexec",	/* 282: -x */
	"ftis",	/* 283: -e */
	"ftsize",	/* 284: -s */
	"ftmtime",	/* 285: -M */
	"ftatime",	/* 286: -A */
	"ftctime",	/* 287: -C */
	"ftrowned",	/* 288: -O */
	"fteowned",	/* 289: -o */
	"ftzero",	/* 290: -z */
	"ftsock",	/* 291: -S */
	"ftchr",	/* 292: -c */
	"ftblk",	/* 293: -b */
	"ftfile",	/* 294: -f */
	"ftdir",	/* 295: -d */
	"ftpipe",	/* 296: -p */
	"ftsuid",	/* 297: -u */
	"ftsgid",	/* 298: -g */
	"ftsvtx",	/* 299: -k */
	"ftlink",	/* 300: -l */
	"fttty",	/* 301: -t */
	"fttext",	/* 302: -T */
	"ftbinary",	/* 303: -B */
	"chdir",	/* 304: chdir */
	"chown",	/* 305: chown */
	"chroot",	/* 306: chroot */
	"unlink",	/* 307: unlink */
	"chmod",	/* 308: chmod */
	"utime",	/* 309: utime */
	"rename",	/* 310: rename */
	"link",	/* 311: link */
	"symlink",	/* 312: symlink */
	"readlink",	/* 313: readlink */
	"mkdir",	/* 314: mkdir */
	"rmdir",	/* 315: rmdir */
	"open_dir",	/* 316: opendir */
	"readdir",	/* 317: readdir */
	"telldir",	/* 318: telldir */
	"seekdir",	/* 319: seekdir */
	"rewinddir",	/* 320: rewinddir */
	"closedir",	/* 321: closedir */
	"fork",	/* 322: fork */
	"wait",	/* 323: wait */
	"waitpid",	/* 324: waitpid */
	"system",	/* 325: system */
	"exec",	/* 326: exec */
	"kill",	/* 327: kill */
	"getppid",	/* 328: getppid */
	"getpgrp",	/* 329: getpgrp */
	"setpgrp",	/* 330: setpgrp */
	"getpriority",	/* 331: getpriority */
	"setpriority",	/* 332: setpriority */
	"time",	/* 333: time */
	"tms",	/* 334: times */
	"localtime",	/* 335: localtime */
	"gmtime",	/* 336: gmtime */
	"alarm",	/* 337: alarm */
	"sleep",	/* 338: sleep */
	"shmget",	/* 339: shmget */
	"shmctl",	/* 340: shmctl */
	"shmread",	/* 341: shmread */
	"shmwrite",	/* 342: shmwrite */
	"msgget",	/* 343: msgget */
	"msgctl",	/* 344: msgctl */
	"msgsnd",	/* 345: msgsnd */
	"msgrcv",	/* 346: msgrcv */
	"semop",	/* 347: semop */
	"semget",	/* 348: semget */
	"semctl",	/* 349: semctl */
	"require",	/* 350: require */
	"dofile",	/* 351: do "file" */
	"hintseval",	/* 352: eval hints */
	"entereval",	/* 353: eval "string" */
	"leaveeval",	/* 354: eval "string" exit */
	"entertry",	/* 355: eval {block} */
	"leavetry",	/* 356: eval {block} exit */
	"ghbyname",	/* 357: gethostbyname */
	"ghbyaddr",	/* 358: gethostbyaddr */
	"ghostent",	/* 359: gethostent */
	"gnbyname",	/* 360: getnetbyname */
	"gnbyaddr",	/* 361: getnetbyaddr */
	"gnetent",	/* 362: getnetent */
	"gpbyname",	/* 363: getprotobyname */
	"gpbynumber",	/* 364: getprotobynumber */
	"gprotoent",	/* 365: getprotoent */
	"gsbyname",	/* 366: getservbyname */
	"gsbyport",	/* 367: getservbyport */
	"gservent",	/* 368: getservent */
	"shostent",	/* 369: sethostent */
	"snetent",	/* 370: setnetent */
	"sprotoent",	/* 371: setprotoent */
	"sservent",	/* 372: setservent */
	"ehostent",	/* 373: endhostent */
	"enetent",	/* 374: endnetent */
	"eprotoent",	/* 375: endprotoent */
	"eservent",	/* 376: endservent */
	"gpwnam",	/* 377: getpwnam */
	"gpwuid",	/* 378: getpwuid */
	"gpwent",	/* 379: getpwent */
	"spwent",	/* 380: setpwent */
	"epwent",	/* 381: endpwent */
	"ggrnam",	/* 382: getgrnam */
	"ggrgid",	/* 383: getgrgid */
	"ggrent",	/* 384: getgrent */
	"sgrent",	/* 385: setgrent */
	"egrent",	/* 386: endgrent */
	"getlogin",	/* 387: getlogin */
	"syscall",	/* 388: syscall */
	"lock",	/* 389: lock */
	"once",	/* 390: once */
	"custom",	/* 391: unknown custom operator */
	"reach",	/* 392: each on reference */
	"rkeys",	/* 393: keys on reference */
	"rvalues",	/* 394: values on reference */
	"coreargs",	/* 395: CORE:: subroutine */
	"runcv",	/* 396: __SUB__ */
	"fc",	/* 397: fc */
	"padcv",	/* 398: private subroutine */
	"introcv",	/* 399: private subroutine */
	"clonecv",	/* 400: private subroutine */
	"padrange",	/* 401: list of private variables */
	"refassign",	/* 402: lvalue ref assignment */
	"lvref",	/* 403: lvalue ref assignment */
	"lvrefslice",	/* 404: lvalue ref assignment */
	"lvavref",	/* 405: lvalue array reference */
	"anonconst",	/* 406: anonymous constant */
	"freed",	/* 407: freed op */
};
#endif

#ifndef DOINIT
EXTCONST char* const PL_op_desc[];
#else
EXTCONST char* const PL_op_desc[] = {
	"null operation",	/* 0: null */
	"stub",	/* 1: stub */
	"scalar",	/* 2: scalar */
	"pushmark",	/* 3: pushmark */
	"wantarray",	/* 4: wantarray */
	"constant item",	/* 5: const */
	"scalar variable",	/* 6: gvsv */
	"glob value",	/* 7: gv */
	"glob elem",	/* 8: gelem */
	"private variable",	/* 9: padsv */
	"private array",	/* 10: padav */
	"private hash",	/* 11: padhv */
	"private value",	/* 12: padany */
	"push regexp",	/* 13: pushre */
	"scalar assignment",	/* 14: sassign */
	"list assignment",	/* 15: aassign */
	"chop",	/* 16: chop */
	"scalar chop",	/* 17: schop */
	"chomp",	/* 18: chomp */
	"scalar chomp",	/* 19: schomp */
	"defined operator",	/* 20: defined */
	"undef operator",	/* 21: undef */
	"study",	/* 22: study */
	"match position",	/* 23: pos */
	"preincrement (++)",	/* 24: preinc */
	"integer preincrement (++)",	/* 25: i_preinc */
	"predecrement (--)",	/* 26: predec */
	"integer predecrement (--)",	/* 27: i_predec */
	"postincrement (++)",	/* 28: postinc */
	"integer postincrement (++)",	/* 29: i_postinc */
	"postdecrement (--)",	/* 30: postdec */
	"integer postdecrement (--)",	/* 31: i_postdec */
	"exponentiation (**)",	/* 32: pow */
	"multiplication (*)",	/* 33: multiply */
	"integer multiplication (*)",	/* 34: i_multiply */
	"iv+uv multiplication (+)",	/* 35: u_multiply */
	"division (/)",	/* 36: divide */
	"integer division (/)",	/* 37: i_divide */
	"modulus (%)",	/* 38: modulo */
	"integer modulus (%)",	/* 39: i_modulo */
	"repeat (x)",	/* 40: repeat */
	"addition (+)",	/* 41: add */
	"integer addition (+)",	/* 42: i_add */
	"iv+uv addition (+)",	/* 43: u_add */
	"subtraction (-)",	/* 44: subtract */
	"integer subtraction (-)",	/* 45: i_subtract */
	"concatenation (.) or string",	/* 46: concat */
	"string",	/* 47: stringify */
	"left bitshift (<<)",	/* 48: left_shift */
	"right bitshift (>>)",	/* 49: right_shift */
	"numeric lt (<)",	/* 50: lt */
	"integer lt (<)",	/* 51: i_lt */
	"numeric gt (>)",	/* 52: gt */
	"integer gt (>)",	/* 53: i_gt */
	"numeric le (<=)",	/* 54: le */
	"integer le (<=)",	/* 55: i_le */
	"numeric ge (>=)",	/* 56: ge */
	"integer ge (>=)",	/* 57: i_ge */
	"numeric eq (==)",	/* 58: eq */
	"integer eq (==)",	/* 59: i_eq */
	"numeric ne (!=)",	/* 60: ne */
	"integer ne (!=)",	/* 61: i_ne */
	"numeric comparison (<=>)",	/* 62: cmp */
	"integer comparison (<=>)",	/* 63: i_cmp */
	"string lt",	/* 64: s_lt */
	"string gt",	/* 65: s_gt */
	"string le",	/* 66: s_le */
	"string ge",	/* 67: s_ge */
	"string eq",	/* 68: s_eq */
	"string ne",	/* 69: s_ne */
	"string comparison (cmp)",	/* 70: s_cmp */
	"bitwise and (&)",	/* 71: bit_and */
	"bitwise xor (^)",	/* 72: bit_xor */
	"bitwise or (|)",	/* 73: bit_or */
	"integer bitwise and (&)",	/* 74: i_bit_and */
	"integer bitwise xor (^)",	/* 75: i_bit_xor */
	"integer bitwise or (|)",	/* 76: i_bit_or */
	"string bitiwse and (&)",	/* 77: s_bit_and */
	"string bitwise xor (^)",	/* 78: s_bit_xor */
	"string bitwise or (|)",	/* 79: s_bit_or */
	"negation (-)",	/* 80: negate */
	"integer negation (-)",	/* 81: i_negate */
	"not",	/* 82: not */
	"1's complement (~)",	/* 83: complement */
	"integer 1's complement (~)",	/* 84: i_complement */
	"string 1's complement (~)",	/* 85: s_complement */
	"smart match",	/* 86: smartmatch */
	"atan2",	/* 87: atan2 */
	"sin",	/* 88: sin */
	"cos",	/* 89: cos */
	"rand",	/* 90: rand */
	"srand",	/* 91: srand */
	"exp",	/* 92: exp */
	"log",	/* 93: log */
	"sqrt",	/* 94: sqrt */
	"int",	/* 95: int */
	"hex",	/* 96: hex */
	"oct",	/* 97: oct */
	"abs",	/* 98: abs */
	"ref-to-glob cast",	/* 99: rv2gv */
	"scalar dereference",	/* 100: rv2sv */
	"array length",	/* 101: av2arylen */
	"subroutine dereference",	/* 102: rv2cv */
	"anonymous subroutine",	/* 103: anoncode */
	"subroutine prototype",	/* 104: prototype */
	"reference constructor",	/* 105: refgen */
	"single ref constructor",	/* 106: srefgen */
	"reference-type operator",	/* 107: ref */
	"bless",	/* 108: bless */
	"quoted execution (``, qx)",	/* 109: backtick */
	"glob",	/* 110: glob */
	"<HANDLE>",	/* 111: readline */
	"append I/O operator",	/* 112: rcatline */
	"regexp internal guard",	/* 113: regcmaybe */
	"regexp internal reset",	/* 114: regcreset */
	"regexp compilation",	/* 115: regcomp */
	"pattern match (m//)",	/* 116: match */
	"pattern quote (qr//)",	/* 117: qr */
	"substitution (s///)",	/* 118: subst */
	"substitution iterator",	/* 119: substcont */
	"transliteration (tr///)",	/* 120: trans */
	"transliteration (tr///)",	/* 121: transr */
	"length",	/* 122: length */
	"substr",	/* 123: substr */
	"vec",	/* 124: vec */
	"index",	/* 125: index */
	"rindex",	/* 126: rindex */
	"sprintf",	/* 127: sprintf */
	"formline",	/* 128: formline */
	"ord",	/* 129: ord */
	"chr",	/* 130: chr */
	"crypt",	/* 131: crypt */
	"ucfirst",	/* 132: ucfirst */
	"lcfirst",	/* 133: lcfirst */
	"uc",	/* 134: uc */
	"lc",	/* 135: lc */
	"quotemeta",	/* 136: quotemeta */
	"array dereference",	/* 137: rv2av */
	"constant array element",	/* 138: aelemfast */
	"constant lexical array element",	/* 139: aelemfast_lex */
	"array element",	/* 140: aelem */
	"int array element",	/* 141: i_aelem */
	"num array element",	/* 142: n_aelem */
	"str array element",	/* 143: s_aelem */
	"unchecked constant aelem",	/* 144: aelemfast_lex_u */
	"unchecked aelem",	/* 145: aelem_u */
	"unchecked int aelem",	/* 146: i_aelem_u */
	"unchecked num aelem",	/* 147: n_aelem_u */
	"unchecked str aelem",	/* 148: s_aelem_u */
	"array slice",	/* 149: aslice */
	"index/value array slice",	/* 150: kvaslice */
	"each on array",	/* 151: aeach */
	"keys on array",	/* 152: akeys */
	"values on array",	/* 153: avalues */
	"each",	/* 154: each */
	"values",	/* 155: values */
	"keys",	/* 156: keys */
	"delete",	/* 157: delete */
	"exists",	/* 158: exists */
	"hash dereference",	/* 159: rv2hv */
	"hash element",	/* 160: helem */
	"hash slice",	/* 161: hslice */
	"key/value hash slice",	/* 162: kvhslice */
	"array or hash lookup",	/* 163: multideref */
	"unpack",	/* 164: unpack */
	"pack",	/* 165: pack */
	"split",	/* 166: split */
	"join or string",	/* 167: join */
	"list",	/* 168: list */
	"list slice",	/* 169: lslice */
	"anonymous array ([])",	/* 170: anonlist */
	"anonymous hash ({})",	/* 171: anonhash */
	"splice",	/* 172: splice */
	"push",	/* 173: push */
	"pop",	/* 174: pop */
	"shift",	/* 175: shift */
	"unshift",	/* 176: unshift */
	"sort",	/* 177: sort */
	"reverse",	/* 178: reverse */
	"grep",	/* 179: grepstart */
	"grep iterator",	/* 180: grepwhile */
	"map",	/* 181: mapstart */
	"map iterator",	/* 182: mapwhile */
	"flipflop",	/* 183: range */
	"range (or flip)",	/* 184: flip */
	"range (or flop)",	/* 185: flop */
	"logical and (&&)",	/* 186: and */
	"logical or (||)",	/* 187: or */
	"logical xor",	/* 188: xor */
	"defined or (//)",	/* 189: dor */
	"conditional expression",	/* 190: cond_expr */
	"logical and assignment (&&=)",	/* 191: andassign */
	"logical or assignment (||=)",	/* 192: orassign */
	"defined or assignment (//=)",	/* 193: dorassign */
	"method lookup",	/* 194: method */
	"subroutine entry",	/* 195: entersub */
	"XS subroutine entry",	/* 196: enterxssub */
	"subroutine exit",	/* 197: leavesub */
	"lvalue subroutine return",	/* 198: leavesublv */
	"caller",	/* 199: caller */
	"warn",	/* 200: warn */
	"die",	/* 201: die */
	"symbol reset",	/* 202: reset */
	"line sequence",	/* 203: lineseq */
	"next statement",	/* 204: nextstate */
	"debug next statement",	/* 205: dbstate */
	"iteration finalizer",	/* 206: unstack */
	"block entry",	/* 207: enter */
	"block exit",	/* 208: leave */
	"block",	/* 209: scope */
	"foreach loop entry",	/* 210: enteriter */
	"foreach loop iterator",	/* 211: iter */
	"loop entry",	/* 212: enterloop */
	"loop exit",	/* 213: leaveloop */
	"return",	/* 214: return */
	"last",	/* 215: last */
	"next",	/* 216: next */
	"redo",	/* 217: redo */
	"dump",	/* 218: dump */
	"goto",	/* 219: goto */
	"exit",	/* 220: exit */
	"named method",	/* 221: method_named */
	"named super method",	/* 222: method_super */
	"redirect named method",	/* 223: method_redir */
	"redirect named super",	/* 224: method_redir_super */
	"given()",	/* 225: entergiven */
	"leave given block",	/* 226: leavegiven */
	"when()",	/* 227: enterwhen */
	"leave when block",	/* 228: leavewhen */
	"break",	/* 229: break */
	"continue",	/* 230: continue */
	"open",	/* 231: open */
	"close",	/* 232: close */
	"pipe",	/* 233: pipe_op */
	"fileno",	/* 234: fileno */
	"umask",	/* 235: umask */
	"binmode",	/* 236: binmode */
	"tie",	/* 237: tie */
	"untie",	/* 238: untie */
	"tied",	/* 239: tied */
	"dbmopen",	/* 240: dbmopen */
	"dbmclose",	/* 241: dbmclose */
	"select system call",	/* 242: sselect */
	"select",	/* 243: select */
	"getc",	/* 244: getc */
	"read",	/* 245: read */
	"write",	/* 246: enterwrite */
	"write exit",	/* 247: leavewrite */
	"printf",	/* 248: prtf */
	"print",	/* 249: print */
	"say",	/* 250: say */
	"sysopen",	/* 251: sysopen */
	"sysseek",	/* 252: sysseek */
	"sysread",	/* 253: sysread */
	"syswrite",	/* 254: syswrite */
	"eof",	/* 255: eof */
	"tell",	/* 256: tell */
	"seek",	/* 257: seek */
	"truncate",	/* 258: truncate */
	"fcntl",	/* 259: fcntl */
	"ioctl",	/* 260: ioctl */
	"flock",	/* 261: flock */
	"send",	/* 262: send */
	"recv",	/* 263: recv */
	"socket",	/* 264: socket */
	"socketpair",	/* 265: sockpair */
	"bind",	/* 266: bind */
	"connect",	/* 267: connect */
	"listen",	/* 268: listen */
	"accept",	/* 269: accept */
	"shutdown",	/* 270: shutdown */
	"getsockopt",	/* 271: gsockopt */
	"setsockopt",	/* 272: ssockopt */
	"getsockname",	/* 273: getsockname */
	"getpeername",	/* 274: getpeername */
	"lstat",	/* 275: lstat */
	"stat",	/* 276: stat */
	"-R",	/* 277: ftrread */
	"-W",	/* 278: ftrwrite */
	"-X",	/* 279: ftrexec */
	"-r",	/* 280: fteread */
	"-w",	/* 281: ftewrite */
	"-x",	/* 282: fteexec */
	"-e",	/* 283: ftis */
	"-s",	/* 284: ftsize */
	"-M",	/* 285: ftmtime */
	"-A",	/* 286: ftatime */
	"-C",	/* 287: ftctime */
	"-O",	/* 288: ftrowned */
	"-o",	/* 289: fteowned */
	"-z",	/* 290: ftzero */
	"-S",	/* 291: ftsock */
	"-c",	/* 292: ftchr */
	"-b",	/* 293: ftblk */
	"-f",	/* 294: ftfile */
	"-d",	/* 295: ftdir */
	"-p",	/* 296: ftpipe */
	"-u",	/* 297: ftsuid */
	"-g",	/* 298: ftsgid */
	"-k",	/* 299: ftsvtx */
	"-l",	/* 300: ftlink */
	"-t",	/* 301: fttty */
	"-T",	/* 302: fttext */
	"-B",	/* 303: ftbinary */
	"chdir",	/* 304: chdir */
	"chown",	/* 305: chown */
	"chroot",	/* 306: chroot */
	"unlink",	/* 307: unlink */
	"chmod",	/* 308: chmod */
	"utime",	/* 309: utime */
	"rename",	/* 310: rename */
	"link",	/* 311: link */
	"symlink",	/* 312: symlink */
	"readlink",	/* 313: readlink */
	"mkdir",	/* 314: mkdir */
	"rmdir",	/* 315: rmdir */
	"opendir",	/* 316: open_dir */
	"readdir",	/* 317: readdir */
	"telldir",	/* 318: telldir */
	"seekdir",	/* 319: seekdir */
	"rewinddir",	/* 320: rewinddir */
	"closedir",	/* 321: closedir */
	"fork",	/* 322: fork */
	"wait",	/* 323: wait */
	"waitpid",	/* 324: waitpid */
	"system",	/* 325: system */
	"exec",	/* 326: exec */
	"kill",	/* 327: kill */
	"getppid",	/* 328: getppid */
	"getpgrp",	/* 329: getpgrp */
	"setpgrp",	/* 330: setpgrp */
	"getpriority",	/* 331: getpriority */
	"setpriority",	/* 332: setpriority */
	"time",	/* 333: time */
	"times",	/* 334: tms */
	"localtime",	/* 335: localtime */
	"gmtime",	/* 336: gmtime */
	"alarm",	/* 337: alarm */
	"sleep",	/* 338: sleep */
	"shmget",	/* 339: shmget */
	"shmctl",	/* 340: shmctl */
	"shmread",	/* 341: shmread */
	"shmwrite",	/* 342: shmwrite */
	"msgget",	/* 343: msgget */
	"msgctl",	/* 344: msgctl */
	"msgsnd",	/* 345: msgsnd */
	"msgrcv",	/* 346: msgrcv */
	"semop",	/* 347: semop */
	"semget",	/* 348: semget */
	"semctl",	/* 349: semctl */
	"require",	/* 350: require */
	"do \"file\"",	/* 351: dofile */
	"eval hints",	/* 352: hintseval */
	"eval \"string\"",	/* 353: entereval */
	"eval \"string\" exit",	/* 354: leaveeval */
	"eval {block}",	/* 355: entertry */
	"eval {block} exit",	/* 356: leavetry */
	"gethostbyname",	/* 357: ghbyname */
	"gethostbyaddr",	/* 358: ghbyaddr */
	"gethostent",	/* 359: ghostent */
	"getnetbyname",	/* 360: gnbyname */
	"getnetbyaddr",	/* 361: gnbyaddr */
	"getnetent",	/* 362: gnetent */
	"getprotobyname",	/* 363: gpbyname */
	"getprotobynumber",	/* 364: gpbynumber */
	"getprotoent",	/* 365: gprotoent */
	"getservbyname",	/* 366: gsbyname */
	"getservbyport",	/* 367: gsbyport */
	"getservent",	/* 368: gservent */
	"sethostent",	/* 369: shostent */
	"setnetent",	/* 370: snetent */
	"setprotoent",	/* 371: sprotoent */
	"setservent",	/* 372: sservent */
	"endhostent",	/* 373: ehostent */
	"endnetent",	/* 374: enetent */
	"endprotoent",	/* 375: eprotoent */
	"endservent",	/* 376: eservent */
	"getpwnam",	/* 377: gpwnam */
	"getpwuid",	/* 378: gpwuid */
	"getpwent",	/* 379: gpwent */
	"setpwent",	/* 380: spwent */
	"endpwent",	/* 381: epwent */
	"getgrnam",	/* 382: ggrnam */
	"getgrgid",	/* 383: ggrgid */
	"getgrent",	/* 384: ggrent */
	"setgrent",	/* 385: sgrent */
	"endgrent",	/* 386: egrent */
	"getlogin",	/* 387: getlogin */
	"syscall",	/* 388: syscall */
	"lock",	/* 389: lock */
	"once",	/* 390: once */
	"unknown custom operator",	/* 391: custom */
	"each on reference",	/* 392: reach */
	"keys on reference",	/* 393: rkeys */
	"values on reference",	/* 394: rvalues */
	"CORE:: subroutine",	/* 395: coreargs */
	"__SUB__",	/* 396: runcv */
	"fc",	/* 397: fc */
	"private subroutine",	/* 398: padcv */
	"private subroutine",	/* 399: introcv */
	"private subroutine",	/* 400: clonecv */
	"list of private variables",	/* 401: padrange */
	"lvalue ref assignment",	/* 402: refassign */
	"lvalue ref assignment",	/* 403: lvref */
	"lvalue ref assignment",	/* 404: lvrefslice */
	"lvalue array reference",	/* 405: lvavref */
	"anonymous constant",	/* 406: anonconst */
	"freed op",	/* 407: freed */
};
#endif

/* core types */

typedef enum {
    type_none = 0,
    type_int = 1,
    type_uint = 2,
    type_num = 3,
    type_str = 4,
    type_Int = 5,
    type_UInt = 6,
    type_Num = 7,
    type_Str = 8,
    type_Bool = 9,
    type_Numeric = 10,
    type_Scalar = 11,
    type_Ref = 12,
    type_Sub = 13,
    type_Array = 14,
    type_Hash = 15,
    type_List = 16,
    type_Any = 17,
    type_Void = 255,
} core_types_t;

#ifdef PERL_IN_OP_C
static const char* const
core_types_n[] = {
    "",
    "int",
    "uint",
    "num",
    "str",
    "Int",
    "UInt",
    "Num",
    "Str",
    "Bool",
    "Numeric",
    "Scalar",
    "Ref",
    "Sub",
    "Array",
    "Hash",
    "List",
    "Any",
    "Void",
};

#ifdef DEBUGGING
static const char* const
PL_op_type_str[] = {
	"():Void",	/* 0: null */
	"():Void",	/* 1: stub */
	"():Void",	/* 2: scalar */
	"():Void",	/* 3: pushmark */
	"",	/* 4: wantarray */
	"():Scalar",	/* 5: const */
	"():Scalar",	/* 6: gvsv */
	"():Scalar",	/* 7: gv */
	"",	/* 8: gelem */
	"():Scalar",	/* 9: padsv */
	"():Array",	/* 10: padav */
	"():Hash",	/* 11: padhv */
	"():Void",	/* 12: padany */
	"",	/* 13: pushre */
	"(:Scalar,:Scalar):Scalar",	/* 14: sassign */
	"(:List,:List):List",	/* 15: aassign */
	"(:List(:Str)):Scalar",	/* 16: chop */
	"(:Str):Int",	/* 17: schop */
	"(:List(:Str)):Scalar",	/* 18: chomp */
	"(:Str):Int",	/* 19: schomp */
	"",	/* 20: defined */
	"",	/* 21: undef */
	"",	/* 22: study */
	"",	/* 23: pos */
	"(:Scalar):Scalar",	/* 24: preinc */
	"(:Int):Int",	/* 25: i_preinc */
	"(:Scalar):Scalar",	/* 26: predec */
	"(:Int):Int",	/* 27: i_predec */
	"(:Scalar):Scalar",	/* 28: postinc */
	"(:Int):Int",	/* 29: i_postinc */
	"(:Scalar):Scalar",	/* 30: postdec */
	"(:Int):Int",	/* 31: i_postdec */
	"(:Numeric,:Numeric):Numeric",	/* 32: pow */
	"(:Numeric,:Numeric):Numeric",	/* 33: multiply */
	"(:Int,:Int):Int",	/* 34: i_multiply */
	"(:Int,:Int):Numeric",	/* 35: u_multiply */
	"(:Numeric,:Numeric):Numeric",	/* 36: divide */
	"(:Int,:Int):Int",	/* 37: i_divide */
	"(:Numeric,:Numeric):Numeric",	/* 38: modulo */
	"(:Int,:Int):Int",	/* 39: i_modulo */
	"(:List,:Int):List",	/* 40: repeat */
	"(:Numeric,:Numeric):Numeric",	/* 41: add */
	"(:Int,:Int):Int",	/* 42: i_add */
	"(:Int,:Int):Numeric",	/* 43: u_add */
	"(:Numeric,:Numeric):Numeric",	/* 44: subtract */
	"(:Int,:Int):Int",	/* 45: i_subtract */
	"(:Any,:Any):Str",	/* 46: concat */
	"(:Scalar):Str",	/* 47: stringify */
	"(:Int,:UInt):UInt",	/* 48: left_shift */
	"(:Int,:UInt):UInt",	/* 49: right_shift */
	"(:Scalar,:Scalar):Bool",	/* 50: lt */
	"(:Int,:Int):Bool",	/* 51: i_lt */
	"(:Scalar,:Scalar):Bool",	/* 52: gt */
	"(:Int,:Int):Bool",	/* 53: i_gt */
	"(:Scalar,:Scalar):Bool",	/* 54: le */
	"(:Int,:Int):Bool",	/* 55: i_le */
	"(:Scalar,:Scalar):Bool",	/* 56: ge */
	"(:Int,:Int):Bool",	/* 57: i_ge */
	"(:Scalar,:Scalar):Bool",	/* 58: eq */
	"(:Int,:Int):Bool",	/* 59: i_eq */
	"(:Scalar,:Scalar):Bool",	/* 60: ne */
	"(:Int,:Int):Bool",	/* 61: i_ne */
	"(:Scalar,:Scalar):Int",	/* 62: cmp */
	"(:Int,:Int):Int",	/* 63: i_cmp */
	"(:Str,:Str):Bool",	/* 64: s_lt */
	"(:Str,:Str):Bool",	/* 65: s_gt */
	"(:Str,:Str):Bool",	/* 66: s_le */
	"(:Str,:Str):Bool",	/* 67: s_ge */
	"(:Str,:Str):Bool",	/* 68: s_eq */
	"(:Str,:Str):Bool",	/* 69: s_ne */
	"(:Str,:Str):Int",	/* 70: s_cmp */
	"(:Scalar,:Scalar):Scalar",	/* 71: bit_and */
	"(:Scalar,:Scalar):Scalar",	/* 72: bit_xor */
	"(:Scalar,:Scalar):Scalar",	/* 73: bit_or */
	"(:Int,:Int):UInt",	/* 74: i_bit_and */
	"(:Int,:Int):UInt",	/* 75: i_bit_xor */
	"(:Int,:Int):UInt",	/* 76: i_bit_or */
	"(:Str,:Str):Str",	/* 77: s_bit_and */
	"(:Str,:Str):Str",	/* 78: s_bit_xor */
	"(:Str,:Str):Str",	/* 79: s_bit_or */
	"(:Numeric):Numeric",	/* 80: negate */
	"(:Int):Int",	/* 81: i_negate */
	"(:Scalar):Bool",	/* 82: not */
	"(:Scalar):Scalar",	/* 83: complement */
	"(:UInt):UInt",	/* 84: i_complement */
	"(:Str):Str",	/* 85: s_complement */
	"",	/* 86: smartmatch */
	"(:Num,:Num):Num",	/* 87: atan2 */
	"(:Num):Num",	/* 88: sin */
	"(:Num):Num",	/* 89: cos */
	"(:Num?):Num",	/* 90: rand */
	"(:Num?):Num",	/* 91: srand */
	"(:Num):Num",	/* 92: exp */
	"(:Num):Num",	/* 93: log */
	"(:Num):Num",	/* 94: sqrt */
	"(:Numeric):Numeric",	/* 95: int */
	"(:Numeric):UInt",	/* 96: hex */
	"(:Numeric):UInt",	/* 97: oct */
	"(:Numeric):Numeric",	/* 98: abs */
	"(:Ref):Scalar",	/* 99: rv2gv */
	"(:Ref):Scalar",	/* 100: rv2sv */
	"(:Array):Int",	/* 101: av2arylen */
	"(:Ref):Sub",	/* 102: rv2cv */
	"",	/* 103: anoncode */
	"",	/* 104: prototype */
	"",	/* 105: refgen */
	"",	/* 106: srefgen */
	"",	/* 107: ref */
	"",	/* 108: bless */
	"",	/* 109: backtick */
	"",	/* 110: glob */
	"(:Scalar):Any",	/* 111: readline */
	"",	/* 112: rcatline */
	"():Void",	/* 113: regcmaybe */
	"",	/* 114: regcreset */
	"",	/* 115: regcomp */
	"",	/* 116: match */
	"",	/* 117: qr */
	"",	/* 118: subst */
	"",	/* 119: substcont */
	"",	/* 120: trans */
	"",	/* 121: transr */
	"",	/* 122: length */
	"",	/* 123: substr */
	"",	/* 124: vec */
	"",	/* 125: index */
	"",	/* 126: rindex */
	"",	/* 127: sprintf */
	"",	/* 128: formline */
	"",	/* 129: ord */
	"",	/* 130: chr */
	"",	/* 131: crypt */
	"",	/* 132: ucfirst */
	"",	/* 133: lcfirst */
	"",	/* 134: uc */
	"",	/* 135: lc */
	"",	/* 136: quotemeta */
	"(:Ref):Hash",	/* 137: rv2av */
	"():Scalar",	/* 138: aelemfast */
	"():Scalar",	/* 139: aelemfast_lex */
	"(:Array(:Scalar),:Int):Scalar",	/* 140: aelem */
	"(:Array(:Int),:Int):Int",	/* 141: i_aelem */
	"(:Array(:Num),:Int):Num",	/* 142: n_aelem */
	"(:Array(:Str),:Int):Str",	/* 143: s_aelem */
	"():Scalar",	/* 144: aelemfast_lex_u */
	"(:Array(:Scalar),:Int):Scalar",	/* 145: aelem_u */
	"(:Array(:Int),:Int):Int",	/* 146: i_aelem_u */
	"(:Array(:Num),:Int):Num",	/* 147: n_aelem_u */
	"(:Array(:Str),:Int):Str",	/* 148: s_aelem_u */
	"",	/* 149: aslice */
	"",	/* 150: kvaslice */
	"",	/* 151: aeach */
	"",	/* 152: akeys */
	"",	/* 153: avalues */
	"",	/* 154: each */
	"",	/* 155: values */
	"",	/* 156: keys */
	"(:Str):Void",	/* 157: delete */
	"(:Str):Bool",	/* 158: exists */
	"(:Ref):Hash",	/* 159: rv2hv */
	"(:Hash(:Scalar)):Scalar",	/* 160: helem */
	"",	/* 161: hslice */
	"",	/* 162: kvhslice */
	"",	/* 163: multideref */
	"",	/* 164: unpack */
	"",	/* 165: pack */
	"",	/* 166: split */
	"",	/* 167: join */
	"",	/* 168: list */
	"",	/* 169: lslice */
	"",	/* 170: anonlist */
	"",	/* 171: anonhash */
	"",	/* 172: splice */
	"",	/* 173: push */
	"",	/* 174: pop */
	"",	/* 175: shift */
	"",	/* 176: unshift */
	"",	/* 177: sort */
	"",	/* 178: reverse */
	"",	/* 179: grepstart */
	"",	/* 180: grepwhile */
	"",	/* 181: mapstart */
	"",	/* 182: mapwhile */
	"",	/* 183: range */
	"",	/* 184: flip */
	"",	/* 185: flop */
	"(:Scalar,:Scalar):Void",	/* 186: and */
	"",	/* 187: or */
	"",	/* 188: xor */
	"",	/* 189: dor */
	"(:Scalar):Void",	/* 190: cond_expr */
	"",	/* 191: andassign */
	"",	/* 192: orassign */
	"",	/* 193: dorassign */
	"",	/* 194: method */
	"",	/* 195: entersub */
	"",	/* 196: enterxssub */
	"",	/* 197: leavesub */
	"",	/* 198: leavesublv */
	"",	/* 199: caller */
	"",	/* 200: warn */
	"",	/* 201: die */
	"",	/* 202: reset */
	"():Void",	/* 203: lineseq */
	"():Void",	/* 204: nextstate */
	"():Void",	/* 205: dbstate */
	"():Void",	/* 206: unstack */
	"",	/* 207: enter */
	"",	/* 208: leave */
	"():Void",	/* 209: scope */
	"",	/* 210: enteriter */
	"",	/* 211: iter */
	"",	/* 212: enterloop */
	"",	/* 213: leaveloop */
	"",	/* 214: return */
	"",	/* 215: last */
	"",	/* 216: next */
	"",	/* 217: redo */
	"",	/* 218: dump */
	"",	/* 219: goto */
	"",	/* 220: exit */
	"",	/* 221: method_named */
	"",	/* 222: method_super */
	"",	/* 223: method_redir */
	"",	/* 224: method_redir_super */
	"",	/* 225: entergiven */
	"",	/* 226: leavegiven */
	"",	/* 227: enterwhen */
	"",	/* 228: leavewhen */
	"",	/* 229: break */
	"",	/* 230: continue */
	"",	/* 231: open */
	"",	/* 232: close */
	"",	/* 233: pipe_op */
	"",	/* 234: fileno */
	"",	/* 235: umask */
	"",	/* 236: binmode */
	"",	/* 237: tie */
	"",	/* 238: untie */
	"",	/* 239: tied */
	"",	/* 240: dbmopen */
	"",	/* 241: dbmclose */
	"",	/* 242: sselect */
	"",	/* 243: select */
	"",	/* 244: getc */
	"",	/* 245: read */
	"",	/* 246: enterwrite */
	"",	/* 247: leavewrite */
	"",	/* 248: prtf */
	"",	/* 249: print */
	"",	/* 250: say */
	"",	/* 251: sysopen */
	"",	/* 252: sysseek */
	"",	/* 253: sysread */
	"",	/* 254: syswrite */
	"",	/* 255: eof */
	"",	/* 256: tell */
	"",	/* 257: seek */
	"",	/* 258: truncate */
	"",	/* 259: fcntl */
	"",	/* 260: ioctl */
	"",	/* 261: flock */
	"",	/* 262: send */
	"",	/* 263: recv */
	"",	/* 264: socket */
	"",	/* 265: sockpair */
	"",	/* 266: bind */
	"",	/* 267: connect */
	"",	/* 268: listen */
	"",	/* 269: accept */
	"",	/* 270: shutdown */
	"",	/* 271: gsockopt */
	"",	/* 272: ssockopt */
	"",	/* 273: getsockname */
	"",	/* 274: getpeername */
	"",	/* 275: lstat */
	"",	/* 276: stat */
	"",	/* 277: ftrread */
	"",	/* 278: ftrwrite */
	"",	/* 279: ftrexec */
	"",	/* 280: fteread */
	"",	/* 281: ftewrite */
	"",	/* 282: fteexec */
	"",	/* 283: ftis */
	"",	/* 284: ftsize */
	"",	/* 285: ftmtime */
	"",	/* 286: ftatime */
	"",	/* 287: ftctime */
	"",	/* 288: ftrowned */
	"",	/* 289: fteowned */
	"",	/* 290: ftzero */
	"",	/* 291: ftsock */
	"",	/* 292: ftchr */
	"",	/* 293: ftblk */
	"",	/* 294: ftfile */
	"",	/* 295: ftdir */
	"",	/* 296: ftpipe */
	"",	/* 297: ftsuid */
	"",	/* 298: ftsgid */
	"",	/* 299: ftsvtx */
	"",	/* 300: ftlink */
	"",	/* 301: fttty */
	"",	/* 302: fttext */
	"",	/* 303: ftbinary */
	"",	/* 304: chdir */
	"",	/* 305: chown */
	"",	/* 306: chroot */
	"",	/* 307: unlink */
	"",	/* 308: chmod */
	"",	/* 309: utime */
	"",	/* 310: rename */
	"",	/* 311: link */
	"",	/* 312: symlink */
	"",	/* 313: readlink */
	"",	/* 314: mkdir */
	"",	/* 315: rmdir */
	"",	/* 316: open_dir */
	"",	/* 317: readdir */
	"",	/* 318: telldir */
	"",	/* 319: seekdir */
	"",	/* 320: rewinddir */
	"",	/* 321: closedir */
	"",	/* 322: fork */
	"",	/* 323: wait */
	"",	/* 324: waitpid */
	"",	/* 325: system */
	"",	/* 326: exec */
	"",	/* 327: kill */
	"",	/* 328: getppid */
	"",	/* 329: getpgrp */
	"",	/* 330: setpgrp */
	"",	/* 331: getpriority */
	"",	/* 332: setpriority */
	"",	/* 333: time */
	"",	/* 334: tms */
	"",	/* 335: localtime */
	"",	/* 336: gmtime */
	"",	/* 337: alarm */
	"",	/* 338: sleep */
	"",	/* 339: shmget */
	"",	/* 340: shmctl */
	"",	/* 341: shmread */
	"",	/* 342: shmwrite */
	"",	/* 343: msgget */
	"",	/* 344: msgctl */
	"",	/* 345: msgsnd */
	"",	/* 346: msgrcv */
	"",	/* 347: semop */
	"",	/* 348: semget */
	"",	/* 349: semctl */
	"",	/* 350: require */
	"",	/* 351: dofile */
	"",	/* 352: hintseval */
	"",	/* 353: entereval */
	"",	/* 354: leaveeval */
	"",	/* 355: entertry */
	"",	/* 356: leavetry */
	"",	/* 357: ghbyname */
	"",	/* 358: ghbyaddr */
	"",	/* 359: ghostent */
	"",	/* 360: gnbyname */
	"",	/* 361: gnbyaddr */
	"",	/* 362: gnetent */
	"",	/* 363: gpbyname */
	"",	/* 364: gpbynumber */
	"",	/* 365: gprotoent */
	"",	/* 366: gsbyname */
	"",	/* 367: gsbyport */
	"",	/* 368: gservent */
	"",	/* 369: shostent */
	"",	/* 370: snetent */
	"",	/* 371: sprotoent */
	"",	/* 372: sservent */
	"",	/* 373: ehostent */
	"",	/* 374: enetent */
	"",	/* 375: eprotoent */
	"",	/* 376: eservent */
	"",	/* 377: gpwnam */
	"",	/* 378: gpwuid */
	"",	/* 379: gpwent */
	"",	/* 380: spwent */
	"",	/* 381: epwent */
	"",	/* 382: ggrnam */
	"",	/* 383: ggrgid */
	"",	/* 384: ggrent */
	"",	/* 385: sgrent */
	"",	/* 386: egrent */
	"",	/* 387: getlogin */
	"",	/* 388: syscall */
	"",	/* 389: lock */
	"",	/* 390: once */
	"",	/* 391: custom */
	"",	/* 392: reach */
	"",	/* 393: rkeys */
	"",	/* 394: rvalues */
	"",	/* 395: coreargs */
	"",	/* 396: runcv */
	"",	/* 397: fc */
	"",	/* 398: padcv */
	"",	/* 399: introcv */
	"",	/* 400: clonecv */
	"",	/* 401: padrange */
	"",	/* 402: refassign */
	"",	/* 403: lvref */
	"",	/* 404: lvrefslice */
	"",	/* 405: lvavref */
	"",	/* 406: anonconst */
	"",	/* 407: freed */
};
#endif /* !DEBUGGING */
#endif /* !PERL_IN_OP_C */

#define CORETYPE_OR_UNDEF	0x60
#define CORETYPE_LIST_AGGR	0xa0
#define CORETYPE_ARRAY_AGGR	0x20
#define CORETYPE_HASH_AGGR	0xc0
#define CORETYPE_OPTIONAL	0xe0

#ifndef DOINIT
EXTCONST const U32 PL_op_type[];
#else
EXTCONST const U32
PL_op_type[] = {
	0xffffffff,	/* 0: null "():Void" */
	0xffffffff,	/* 1: stub "():Void" */
	0xffffffff,	/* 2: scalar "():Void" */
	0xffffffff,	/* 3: pushmark "():Void" */
	0xffffffff,	/* 4: wantarray "" */
	0xffffff0b,	/* 5: const "():Scalar" */
	0xffffff0b,	/* 6: gvsv "():Scalar" */
	0xffffff0b,	/* 7: gv "():Scalar" */
	0xffffffff,	/* 8: gelem "" */
	0xffffff0b,	/* 9: padsv "():Scalar" */
	0xffffff0e,	/* 10: padav "():Array" */
	0xffffff0f,	/* 11: padhv "():Hash" */
	0xffffffff,	/* 12: padany "():Void" */
	0xffffffff,	/* 13: pushre "" */
	0x0b0bff0b,	/* 14: sassign "(:Scalar,:Scalar):Scalar" */
	0x1010ff10,	/* 15: aassign "(:List,:List):List" */
	0xa8ffff0b,	/* 16: chop "(:List(:Str)):Scalar" */
	0x08ffff05,	/* 17: schop "(:Str):Int" */
	0xa8ffff0b,	/* 18: chomp "(:List(:Str)):Scalar" */
	0x08ffff05,	/* 19: schomp "(:Str):Int" */
	0xffffffff,	/* 20: defined "" */
	0xffffffff,	/* 21: undef "" */
	0xffffffff,	/* 22: study "" */
	0xffffffff,	/* 23: pos "" */
	0x0bffff0b,	/* 24: preinc "(:Scalar):Scalar" */
	0x05ffff05,	/* 25: i_preinc "(:Int):Int" */
	0x0bffff0b,	/* 26: predec "(:Scalar):Scalar" */
	0x05ffff05,	/* 27: i_predec "(:Int):Int" */
	0x0bffff0b,	/* 28: postinc "(:Scalar):Scalar" */
	0x05ffff05,	/* 29: i_postinc "(:Int):Int" */
	0x0bffff0b,	/* 30: postdec "(:Scalar):Scalar" */
	0x05ffff05,	/* 31: i_postdec "(:Int):Int" */
	0x0a0aff0a,	/* 32: pow "(:Numeric,:Numeric):Numeric" */
	0x0a0aff0a,	/* 33: multiply "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 34: i_multiply "(:Int,:Int):Int" */
	0x0505ff0a,	/* 35: u_multiply "(:Int,:Int):Numeric" */
	0x0a0aff0a,	/* 36: divide "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 37: i_divide "(:Int,:Int):Int" */
	0x0a0aff0a,	/* 38: modulo "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 39: i_modulo "(:Int,:Int):Int" */
	0x1005ff10,	/* 40: repeat "(:List,:Int):List" */
	0x0a0aff0a,	/* 41: add "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 42: i_add "(:Int,:Int):Int" */
	0x0505ff0a,	/* 43: u_add "(:Int,:Int):Numeric" */
	0x0a0aff0a,	/* 44: subtract "(:Numeric,:Numeric):Numeric" */
	0x0505ff05,	/* 45: i_subtract "(:Int,:Int):Int" */
	0x1111ff08,	/* 46: concat "(:Any,:Any):Str" */
	0x0bffff08,	/* 47: stringify "(:Scalar):Str" */
	0x0506ff06,	/* 48: left_shift "(:Int,:UInt):UInt" */
	0x0506ff06,	/* 49: right_shift "(:Int,:UInt):UInt" */
	0x0b0bff09,	/* 50: lt "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 51: i_lt "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 52: gt "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 53: i_gt "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 54: le "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 55: i_le "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 56: ge "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 57: i_ge "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 58: eq "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 59: i_eq "(:Int,:Int):Bool" */
	0x0b0bff09,	/* 60: ne "(:Scalar,:Scalar):Bool" */
	0x0505ff09,	/* 61: i_ne "(:Int,:Int):Bool" */
	0x0b0bff05,	/* 62: cmp "(:Scalar,:Scalar):Int" */
	0x0505ff05,	/* 63: i_cmp "(:Int,:Int):Int" */
	0x0808ff09,	/* 64: s_lt "(:Str,:Str):Bool" */
	0x0808ff09,	/* 65: s_gt "(:Str,:Str):Bool" */
	0x0808ff09,	/* 66: s_le "(:Str,:Str):Bool" */
	0x0808ff09,	/* 67: s_ge "(:Str,:Str):Bool" */
	0x0808ff09,	/* 68: s_eq "(:Str,:Str):Bool" */
	0x0808ff09,	/* 69: s_ne "(:Str,:Str):Bool" */
	0x0808ff05,	/* 70: s_cmp "(:Str,:Str):Int" */
	0x0b0bff0b,	/* 71: bit_and "(:Scalar,:Scalar):Scalar" */
	0x0b0bff0b,	/* 72: bit_xor "(:Scalar,:Scalar):Scalar" */
	0x0b0bff0b,	/* 73: bit_or "(:Scalar,:Scalar):Scalar" */
	0x0505ff06,	/* 74: i_bit_and "(:Int,:Int):UInt" */
	0x0505ff06,	/* 75: i_bit_xor "(:Int,:Int):UInt" */
	0x0505ff06,	/* 76: i_bit_or "(:Int,:Int):UInt" */
	0x0808ff08,	/* 77: s_bit_and "(:Str,:Str):Str" */
	0x0808ff08,	/* 78: s_bit_xor "(:Str,:Str):Str" */
	0x0808ff08,	/* 79: s_bit_or "(:Str,:Str):Str" */
	0x0affff0a,	/* 80: negate "(:Numeric):Numeric" */
	0x05ffff05,	/* 81: i_negate "(:Int):Int" */
	0x0bffff09,	/* 82: not "(:Scalar):Bool" */
	0x0bffff0b,	/* 83: complement "(:Scalar):Scalar" */
	0x06ffff06,	/* 84: i_complement "(:UInt):UInt" */
	0x08ffff08,	/* 85: s_complement "(:Str):Str" */
	0xffffffff,	/* 86: smartmatch "" */
	0x0707ff07,	/* 87: atan2 "(:Num,:Num):Num" */
	0x07ffff07,	/* 88: sin "(:Num):Num" */
	0x07ffff07,	/* 89: cos "(:Num):Num" */
	0xe7ffff07,	/* 90: rand "(:Num?):Num" */
	0xe7ffff07,	/* 91: srand "(:Num?):Num" */
	0x07ffff07,	/* 92: exp "(:Num):Num" */
	0x07ffff07,	/* 93: log "(:Num):Num" */
	0x07ffff07,	/* 94: sqrt "(:Num):Num" */
	0x0affff0a,	/* 95: int "(:Numeric):Numeric" */
	0x0affff06,	/* 96: hex "(:Numeric):UInt" */
	0x0affff06,	/* 97: oct "(:Numeric):UInt" */
	0x0affff0a,	/* 98: abs "(:Numeric):Numeric" */
	0x0cffff0b,	/* 99: rv2gv "(:Ref):Scalar" */
	0x0cffff0b,	/* 100: rv2sv "(:Ref):Scalar" */
	0x0effff05,	/* 101: av2arylen "(:Array):Int" */
	0x0cffff0d,	/* 102: rv2cv "(:Ref):Sub" */
	0xffffffff,	/* 103: anoncode "" */
	0xffffffff,	/* 104: prototype "" */
	0xffffffff,	/* 105: refgen "" */
	0xffffffff,	/* 106: srefgen "" */
	0xffffffff,	/* 107: ref "" */
	0xffffffff,	/* 108: bless "" */
	0xffffffff,	/* 109: backtick "" */
	0xffffffff,	/* 110: glob "" */
	0x0bffff11,	/* 111: readline "(:Scalar):Any" */
	0xffffffff,	/* 112: rcatline "" */
	0xffffffff,	/* 113: regcmaybe "():Void" */
	0xffffffff,	/* 114: regcreset "" */
	0xffffffff,	/* 115: regcomp "" */
	0xffffffff,	/* 116: match "" */
	0xffffffff,	/* 117: qr "" */
	0xffffffff,	/* 118: subst "" */
	0xffffffff,	/* 119: substcont "" */
	0xffffffff,	/* 120: trans "" */
	0xffffffff,	/* 121: transr "" */
	0xffffffff,	/* 122: length "" */
	0xffffffff,	/* 123: substr "" */
	0xffffffff,	/* 124: vec "" */
	0xffffffff,	/* 125: index "" */
	0xffffffff,	/* 126: rindex "" */
	0xffffffff,	/* 127: sprintf "" */
	0xffffffff,	/* 128: formline "" */
	0xffffffff,	/* 129: ord "" */
	0xffffffff,	/* 130: chr "" */
	0xffffffff,	/* 131: crypt "" */
	0xffffffff,	/* 132: ucfirst "" */
	0xffffffff,	/* 133: lcfirst "" */
	0xffffffff,	/* 134: uc "" */
	0xffffffff,	/* 135: lc "" */
	0xffffffff,	/* 136: quotemeta "" */
	0x0cffff0f,	/* 137: rv2av "(:Ref):Hash" */
	0xffffff0b,	/* 138: aelemfast "():Scalar" */
	0xffffff0b,	/* 139: aelemfast_lex "():Scalar" */
	0x2b05ff0b,	/* 140: aelem "(:Array(:Scalar),:Int):Scalar" */
	0x2505ff05,	/* 141: i_aelem "(:Array(:Int),:Int):Int" */
	0x2705ff07,	/* 142: n_aelem "(:Array(:Num),:Int):Num" */
	0x2805ff08,	/* 143: s_aelem "(:Array(:Str),:Int):Str" */
	0xffffff0b,	/* 144: aelemfast_lex_u "():Scalar" */
	0x2b05ff0b,	/* 145: aelem_u "(:Array(:Scalar),:Int):Scalar" */
	0x2505ff05,	/* 146: i_aelem_u "(:Array(:Int),:Int):Int" */
	0x2705ff07,	/* 147: n_aelem_u "(:Array(:Num),:Int):Num" */
	0x2805ff08,	/* 148: s_aelem_u "(:Array(:Str),:Int):Str" */
	0xffffffff,	/* 149: aslice "" */
	0xffffffff,	/* 150: kvaslice "" */
	0xffffffff,	/* 151: aeach "" */
	0xffffffff,	/* 152: akeys "" */
	0xffffffff,	/* 153: avalues "" */
	0xffffffff,	/* 154: each "" */
	0xffffffff,	/* 155: values "" */
	0xffffffff,	/* 156: keys "" */
	0x08ffffff,	/* 157: delete "(:Str):Void" */
	0x08ffff09,	/* 158: exists "(:Str):Bool" */
	0x0cffff0f,	/* 159: rv2hv "(:Ref):Hash" */
	0xcbffff0b,	/* 160: helem "(:Hash(:Scalar)):Scalar" */
	0xffffffff,	/* 161: hslice "" */
	0xffffffff,	/* 162: kvhslice "" */
	0xffffffff,	/* 163: multideref "" */
	0xffffffff,	/* 164: unpack "" */
	0xffffffff,	/* 165: pack "" */
	0xffffffff,	/* 166: split "" */
	0xffffffff,	/* 167: join "" */
	0xffffffff,	/* 168: list "" */
	0xffffffff,	/* 169: lslice "" */
	0xffffffff,	/* 170: anonlist "" */
	0xffffffff,	/* 171: anonhash "" */
	0xffffffff,	/* 172: splice "" */
	0xffffffff,	/* 173: push "" */
	0xffffffff,	/* 174: pop "" */
	0xffffffff,	/* 175: shift "" */
	0xffffffff,	/* 176: unshift "" */
	0xffffffff,	/* 177: sort "" */
	0xffffffff,	/* 178: reverse "" */
	0xffffffff,	/* 179: grepstart "" */
	0xffffffff,	/* 180: grepwhile "" */
	0xffffffff,	/* 181: mapstart "" */
	0xffffffff,	/* 182: mapwhile "" */
	0xffffffff,	/* 183: range "" */
	0xffffffff,	/* 184: flip "" */
	0xffffffff,	/* 185: flop "" */
	0x0b0bffff,	/* 186: and "(:Scalar,:Scalar):Void" */
	0xffffffff,	/* 187: or "" */
	0xffffffff,	/* 188: xor "" */
	0xffffffff,	/* 189: dor "" */
	0x0bffffff,	/* 190: cond_expr "(:Scalar):Void" */
	0xffffffff,	/* 191: andassign "" */
	0xffffffff,	/* 192: orassign "" */
	0xffffffff,	/* 193: dorassign "" */
	0xffffffff,	/* 194: method "" */
	0xffffffff,	/* 195: entersub "" */
	0xffffffff,	/* 196: enterxssub "" */
	0xffffffff,	/* 197: leavesub "" */
	0xffffffff,	/* 198: leavesublv "" */
	0xffffffff,	/* 199: caller "" */
	0xffffffff,	/* 200: warn "" */
	0xffffffff,	/* 201: die "" */
	0xffffffff,	/* 202: reset "" */
	0xffffffff,	/* 203: lineseq "():Void" */
	0xffffffff,	/* 204: nextstate "():Void" */
	0xffffffff,	/* 205: dbstate "():Void" */
	0xffffffff,	/* 206: unstack "():Void" */
	0xffffffff,	/* 207: enter "" */
	0xffffffff,	/* 208: leave "" */
	0xffffffff,	/* 209: scope "():Void" */
	0xffffffff,	/* 210: enteriter "" */
	0xffffffff,	/* 211: iter "" */
	0xffffffff,	/* 212: enterloop "" */
	0xffffffff,	/* 213: leaveloop "" */
	0xffffffff,	/* 214: return "" */
	0xffffffff,	/* 215: last "" */
	0xffffffff,	/* 216: next "" */
	0xffffffff,	/* 217: redo "" */
	0xffffffff,	/* 218: dump "" */
	0xffffffff,	/* 219: goto "" */
	0xffffffff,	/* 220: exit "" */
	0xffffffff,	/* 221: method_named "" */
	0xffffffff,	/* 222: method_super "" */
	0xffffffff,	/* 223: method_redir "" */
	0xffffffff,	/* 224: method_redir_super "" */
	0xffffffff,	/* 225: entergiven "" */
	0xffffffff,	/* 226: leavegiven "" */
	0xffffffff,	/* 227: enterwhen "" */
	0xffffffff,	/* 228: leavewhen "" */
	0xffffffff,	/* 229: break "" */
	0xffffffff,	/* 230: continue "" */
	0xffffffff,	/* 231: open "" */
	0xffffffff,	/* 232: close "" */
	0xffffffff,	/* 233: pipe_op "" */
	0xffffffff,	/* 234: fileno "" */
	0xffffffff,	/* 235: umask "" */
	0xffffffff,	/* 236: binmode "" */
	0xffffffff,	/* 237: tie "" */
	0xffffffff,	/* 238: untie "" */
	0xffffffff,	/* 239: tied "" */
	0xffffffff,	/* 240: dbmopen "" */
	0xffffffff,	/* 241: dbmclose "" */
	0xffffffff,	/* 242: sselect "" */
	0xffffffff,	/* 243: select "" */
	0xffffffff,	/* 244: getc "" */
	0xffffffff,	/* 245: read "" */
	0xffffffff,	/* 246: enterwrite "" */
	0xffffffff,	/* 247: leavewrite "" */
	0xffffffff,	/* 248: prtf "" */
	0xffffffff,	/* 249: print "" */
	0xffffffff,	/* 250: say "" */
	0xffffffff,	/* 251: sysopen "" */
	0xffffffff,	/* 252: sysseek "" */
	0xffffffff,	/* 253: sysread "" */
	0xffffffff,	/* 254: syswrite "" */
	0xffffffff,	/* 255: eof "" */
	0xffffffff,	/* 256: tell "" */
	0xffffffff,	/* 257: seek "" */
	0xffffffff,	/* 258: truncate "" */
	0xffffffff,	/* 259: fcntl "" */
	0xffffffff,	/* 260: ioctl "" */
	0xffffffff,	/* 261: flock "" */
	0xffffffff,	/* 262: send "" */
	0xffffffff,	/* 263: recv "" */
	0xffffffff,	/* 264: socket "" */
	0xffffffff,	/* 265: sockpair "" */
	0xffffffff,	/* 266: bind "" */
	0xffffffff,	/* 267: connect "" */
	0xffffffff,	/* 268: listen "" */
	0xffffffff,	/* 269: accept "" */
	0xffffffff,	/* 270: shutdown "" */
	0xffffffff,	/* 271: gsockopt "" */
	0xffffffff,	/* 272: ssockopt "" */
	0xffffffff,	/* 273: getsockname "" */
	0xffffffff,	/* 274: getpeername "" */
	0xffffffff,	/* 275: lstat "" */
	0xffffffff,	/* 276: stat "" */
	0xffffffff,	/* 277: ftrread "" */
	0xffffffff,	/* 278: ftrwrite "" */
	0xffffffff,	/* 279: ftrexec "" */
	0xffffffff,	/* 280: fteread "" */
	0xffffffff,	/* 281: ftewrite "" */
	0xffffffff,	/* 282: fteexec "" */
	0xffffffff,	/* 283: ftis "" */
	0xffffffff,	/* 284: ftsize "" */
	0xffffffff,	/* 285: ftmtime "" */
	0xffffffff,	/* 286: ftatime "" */
	0xffffffff,	/* 287: ftctime "" */
	0xffffffff,	/* 288: ftrowned "" */
	0xffffffff,	/* 289: fteowned "" */
	0xffffffff,	/* 290: ftzero "" */
	0xffffffff,	/* 291: ftsock "" */
	0xffffffff,	/* 292: ftchr "" */
	0xffffffff,	/* 293: ftblk "" */
	0xffffffff,	/* 294: ftfile "" */
	0xffffffff,	/* 295: ftdir "" */
	0xffffffff,	/* 296: ftpipe "" */
	0xffffffff,	/* 297: ftsuid "" */
	0xffffffff,	/* 298: ftsgid "" */
	0xffffffff,	/* 299: ftsvtx "" */
	0xffffffff,	/* 300: ftlink "" */
	0xffffffff,	/* 301: fttty "" */
	0xffffffff,	/* 302: fttext "" */
	0xffffffff,	/* 303: ftbinary "" */
	0xffffffff,	/* 304: chdir "" */
	0xffffffff,	/* 305: chown "" */
	0xffffffff,	/* 306: chroot "" */
	0xffffffff,	/* 307: unlink "" */
	0xffffffff,	/* 308: chmod "" */
	0xffffffff,	/* 309: utime "" */
	0xffffffff,	/* 310: rename "" */
	0xffffffff,	/* 311: link "" */
	0xffffffff,	/* 312: symlink "" */
	0xffffffff,	/* 313: readlink "" */
	0xffffffff,	/* 314: mkdir "" */
	0xffffffff,	/* 315: rmdir "" */
	0xffffffff,	/* 316: open_dir "" */
	0xffffffff,	/* 317: readdir "" */
	0xffffffff,	/* 318: telldir "" */
	0xffffffff,	/* 319: seekdir "" */
	0xffffffff,	/* 320: rewinddir "" */
	0xffffffff,	/* 321: closedir "" */
	0xffffffff,	/* 322: fork "" */
	0xffffffff,	/* 323: wait "" */
	0xffffffff,	/* 324: waitpid "" */
	0xffffffff,	/* 325: system "" */
	0xffffffff,	/* 326: exec "" */
	0xffffffff,	/* 327: kill "" */
	0xffffffff,	/* 328: getppid "" */
	0xffffffff,	/* 329: getpgrp "" */
	0xffffffff,	/* 330: setpgrp "" */
	0xffffffff,	/* 331: getpriority "" */
	0xffffffff,	/* 332: setpriority "" */
	0xffffffff,	/* 333: time "" */
	0xffffffff,	/* 334: tms "" */
	0xffffffff,	/* 335: localtime "" */
	0xffffffff,	/* 336: gmtime "" */
	0xffffffff,	/* 337: alarm "" */
	0xffffffff,	/* 338: sleep "" */
	0xffffffff,	/* 339: shmget "" */
	0xffffffff,	/* 340: shmctl "" */
	0xffffffff,	/* 341: shmread "" */
	0xffffffff,	/* 342: shmwrite "" */
	0xffffffff,	/* 343: msgget "" */
	0xffffffff,	/* 344: msgctl "" */
	0xffffffff,	/* 345: msgsnd "" */
	0xffffffff,	/* 346: msgrcv "" */
	0xffffffff,	/* 347: semop "" */
	0xffffffff,	/* 348: semget "" */
	0xffffffff,	/* 349: semctl "" */
	0xffffffff,	/* 350: require "" */
	0xffffffff,	/* 351: dofile "" */
	0xffffffff,	/* 352: hintseval "" */
	0xffffffff,	/* 353: entereval "" */
	0xffffffff,	/* 354: leaveeval "" */
	0xffffffff,	/* 355: entertry "" */
	0xffffffff,	/* 356: leavetry "" */
	0xffffffff,	/* 357: ghbyname "" */
	0xffffffff,	/* 358: ghbyaddr "" */
	0xffffffff,	/* 359: ghostent "" */
	0xffffffff,	/* 360: gnbyname "" */
	0xffffffff,	/* 361: gnbyaddr "" */
	0xffffffff,	/* 362: gnetent "" */
	0xffffffff,	/* 363: gpbyname "" */
	0xffffffff,	/* 364: gpbynumber "" */
	0xffffffff,	/* 365: gprotoent "" */
	0xffffffff,	/* 366: gsbyname "" */
	0xffffffff,	/* 367: gsbyport "" */
	0xffffffff,	/* 368: gservent "" */
	0xffffffff,	/* 369: shostent "" */
	0xffffffff,	/* 370: snetent "" */
	0xffffffff,	/* 371: sprotoent "" */
	0xffffffff,	/* 372: sservent "" */
	0xffffffff,	/* 373: ehostent "" */
	0xffffffff,	/* 374: enetent "" */
	0xffffffff,	/* 375: eprotoent "" */
	0xffffffff,	/* 376: eservent "" */
	0xffffffff,	/* 377: gpwnam "" */
	0xffffffff,	/* 378: gpwuid "" */
	0xffffffff,	/* 379: gpwent "" */
	0xffffffff,	/* 380: spwent "" */
	0xffffffff,	/* 381: epwent "" */
	0xffffffff,	/* 382: ggrnam "" */
	0xffffffff,	/* 383: ggrgid "" */
	0xffffffff,	/* 384: ggrent "" */
	0xffffffff,	/* 385: sgrent "" */
	0xffffffff,	/* 386: egrent "" */
	0xffffffff,	/* 387: getlogin "" */
	0xffffffff,	/* 388: syscall "" */
	0xffffffff,	/* 389: lock "" */
	0xffffffff,	/* 390: once "" */
	0xffffffff,	/* 391: custom "" */
	0xffffffff,	/* 392: reach "" */
	0xffffffff,	/* 393: rkeys "" */
	0xffffffff,	/* 394: rvalues "" */
	0xffffffff,	/* 395: coreargs "" */
	0xffffffff,	/* 396: runcv "" */
	0xffffffff,	/* 397: fc "" */
	0xffffffff,	/* 398: padcv "" */
	0xffffffff,	/* 399: introcv "" */
	0xffffffff,	/* 400: clonecv "" */
	0xffffffff,	/* 401: padrange "" */
	0xffffffff,	/* 402: refassign "" */
	0xffffffff,	/* 403: lvref "" */
	0xffffffff,	/* 404: lvrefslice "" */
	0xffffffff,	/* 405: lvavref "" */
	0xffffffff,	/* 406: anonconst "" */
	0xffffffff,	/* 407: freed "" */
};
#endif


/* This encodes the offsets as signed char of the typed variants for each op.
 * The first byte is the number of following bytes, max 8.
 * variants: u_ i_ n_ s_ int_ uint_ num_ str_
 * Note that currently only forward types to upgrade to are stored, no negative offsets
 * for downgrading types.
 */
#ifndef DOINIT
EXTCONST const signed char PL_op_type_variants[][8];
#else
EXTCONST const signed char PL_op_type_variants[][8] = {
	/*   0 null             */ {0},	/*  */
	/*   1 stub             */ {0},	/*  */
	/*   2 scalar           */ {0},	/*  */
	/*   3 pushmark         */ {0},	/*  */
	/*   4 wantarray        */ {0},	/*  */
	/*   5 const            */ {0},	/*  */
	/*   6 gvsv             */ {0},	/*  */
	/*   7 gv               */ {0},	/*  */
	/*   8 gelem            */ {0},	/*  */
	/*   9 padsv            */ {0},	/*  */
	/*  10 padav            */ {0},	/*  */
	/*  11 padhv            */ {0},	/*  */
	/*  12 padany           */ {0},	/*  */
	/*  13 pushre           */ {0},	/*  */
	/*  14 sassign          */ {0},	/*  */
	/*  15 aassign          */ {0},	/*  */
	/*  16 chop             */ {0},	/*  */
	/*  17 schop            */ {0},	/*  */
	/*  18 chomp            */ {0},	/*  */
	/*  19 schomp           */ {0},	/*  */
	/*  20 defined          */ {0},	/*  */
	/*  21 undef            */ {0},	/*  */
	/*  22 study            */ {0},	/*  */
	/*  23 pos              */ {0},	/*  */
	/*  24 preinc           */ {1,1},	/* i_preinc:25 */
	/*  25 i_preinc         */ {0},	/*  */
	/*  26 predec           */ {1,1},	/* i_predec:27 */
	/*  27 i_predec         */ {0},	/*  */
	/*  28 postinc          */ {1,1},	/* i_postinc:29 */
	/*  29 i_postinc        */ {0},	/*  */
	/*  30 postdec          */ {1,1},	/* i_postdec:31 */
	/*  31 i_postdec        */ {0},	/*  */
	/*  32 pow              */ {0},	/*  */
	/*  33 multiply         */ {2,2,1},	/* u_multiply:35 i_multiply:34 */
	/*  34 i_multiply       */ {0},	/*  */
	/*  35 u_multiply       */ {0},	/*  */
	/*  36 divide           */ {1,1},	/* i_divide:37 */
	/*  37 i_divide         */ {0},	/*  */
	/*  38 modulo           */ {1,1},	/* i_modulo:39 */
	/*  39 i_modulo         */ {0},	/*  */
	/*  40 repeat           */ {0},	/*  */
	/*  41 add              */ {2,2,1},	/* u_add:43 i_add:42 */
	/*  42 i_add            */ {0},	/*  */
	/*  43 u_add            */ {0},	/*  */
	/*  44 subtract         */ {1,1},	/* i_subtract:45 */
	/*  45 i_subtract       */ {0},	/*  */
	/*  46 concat           */ {0},	/*  */
	/*  47 stringify        */ {0},	/*  */
	/*  48 left_shift       */ {0},	/*  */
	/*  49 right_shift      */ {0},	/*  */
	/*  50 lt               */ {2,1,14},	/* i_lt:51 s_lt:64 */
	/*  51 i_lt             */ {0},	/*  */
	/*  52 gt               */ {2,1,13},	/* i_gt:53 s_gt:65 */
	/*  53 i_gt             */ {0},	/*  */
	/*  54 le               */ {2,1,12},	/* i_le:55 s_le:66 */
	/*  55 i_le             */ {0},	/*  */
	/*  56 ge               */ {2,1,11},	/* i_ge:57 s_ge:67 */
	/*  57 i_ge             */ {0},	/*  */
	/*  58 eq               */ {2,1,10},	/* i_eq:59 s_eq:68 */
	/*  59 i_eq             */ {0},	/*  */
	/*  60 ne               */ {2,1,9},	/* i_ne:61 s_ne:69 */
	/*  61 i_ne             */ {0},	/*  */
	/*  62 cmp              */ {2,1,8},	/* i_cmp:63 s_cmp:70 */
	/*  63 i_cmp            */ {0},	/*  */
	/*  64 s_lt             */ {0},	/*  */
	/*  65 s_gt             */ {0},	/*  */
	/*  66 s_le             */ {0},	/*  */
	/*  67 s_ge             */ {0},	/*  */
	/*  68 s_eq             */ {0},	/*  */
	/*  69 s_ne             */ {0},	/*  */
	/*  70 s_cmp            */ {0},	/*  */
	/*  71 bit_and          */ {2,3,6},	/* i_bit_and:74 s_bit_and:77 */
	/*  72 bit_xor          */ {2,3,6},	/* i_bit_xor:75 s_bit_xor:78 */
	/*  73 bit_or           */ {2,3,6},	/* i_bit_or:76 s_bit_or:79 */
	/*  74 i_bit_and        */ {0},	/*  */
	/*  75 i_bit_xor        */ {0},	/*  */
	/*  76 i_bit_or         */ {0},	/*  */
	/*  77 s_bit_and        */ {0},	/*  */
	/*  78 s_bit_xor        */ {0},	/*  */
	/*  79 s_bit_or         */ {0},	/*  */
	/*  80 negate           */ {1,1},	/* i_negate:81 */
	/*  81 i_negate         */ {0},	/*  */
	/*  82 not              */ {0},	/*  */
	/*  83 complement       */ {2,1,2},	/* i_complement:84 s_complement:85 */
	/*  84 i_complement     */ {0},	/*  */
	/*  85 s_complement     */ {0},	/*  */
	/*  86 smartmatch       */ {0},	/*  */
	/*  87 atan2            */ {0},	/*  */
	/*  88 sin              */ {0},	/*  */
	/*  89 cos              */ {0},	/*  */
	/*  90 rand             */ {0},	/*  */
	/*  91 srand            */ {0},	/*  */
	/*  92 exp              */ {0},	/*  */
	/*  93 log              */ {0},	/*  */
	/*  94 sqrt             */ {0},	/*  */
	/*  95 int              */ {0},	/*  */
	/*  96 hex              */ {0},	/*  */
	/*  97 oct              */ {0},	/*  */
	/*  98 abs              */ {0},	/*  */
	/*  99 rv2gv            */ {0},	/*  */
	/* 100 rv2sv            */ {0},	/*  */
	/* 101 av2arylen        */ {0},	/*  */
	/* 102 rv2cv            */ {0},	/*  */
	/* 103 anoncode         */ {0},	/*  */
	/* 104 prototype        */ {0},	/*  */
	/* 105 refgen           */ {0},	/*  */
	/* 106 srefgen          */ {0},	/*  */
	/* 107 ref              */ {0},	/*  */
	/* 108 bless            */ {0},	/*  */
	/* 109 backtick         */ {0},	/*  */
	/* 110 glob             */ {0},	/*  */
	/* 111 readline         */ {0},	/*  */
	/* 112 rcatline         */ {0},	/*  */
	/* 113 regcmaybe        */ {0},	/*  */
	/* 114 regcreset        */ {0},	/*  */
	/* 115 regcomp          */ {0},	/*  */
	/* 116 match            */ {0},	/*  */
	/* 117 qr               */ {0},	/*  */
	/* 118 subst            */ {0},	/*  */
	/* 119 substcont        */ {0},	/*  */
	/* 120 trans            */ {0},	/*  */
	/* 121 transr           */ {0},	/*  */
	/* 122 length           */ {0},	/*  */
	/* 123 substr           */ {0},	/*  */
	/* 124 vec              */ {0},	/*  */
	/* 125 index            */ {0},	/*  */
	/* 126 rindex           */ {0},	/*  */
	/* 127 sprintf          */ {0},	/*  */
	/* 128 formline         */ {0},	/*  */
	/* 129 ord              */ {0},	/*  */
	/* 130 chr              */ {0},	/*  */
	/* 131 crypt            */ {0},	/*  */
	/* 132 ucfirst          */ {0},	/*  */
	/* 133 lcfirst          */ {0},	/*  */
	/* 134 uc               */ {0},	/*  */
	/* 135 lc               */ {0},	/*  */
	/* 136 quotemeta        */ {0},	/*  */
	/* 137 rv2av            */ {0},	/*  */
	/* 138 aelemfast        */ {0},	/*  */
	/* 139 aelemfast_lex    */ {0},	/*  */
	/* 140 aelem            */ {3,1,2,3},	/* i_aelem:141 n_aelem:142 s_aelem:143 */
	/* 141 i_aelem          */ {0},	/*  */
	/* 142 n_aelem          */ {0},	/*  */
	/* 143 s_aelem          */ {0},	/*  */
	/* 144 aelemfast_lex_u  */ {0},	/*  */
	/* 145 aelem_u          */ {3,1,2,3},	/* i_aelem_u:146 n_aelem_u:147 s_aelem_u:148 */
	/* 146 i_aelem_u        */ {0},	/*  */
	/* 147 n_aelem_u        */ {0},	/*  */
	/* 148 s_aelem_u        */ {0},	/*  */
	/* 149 aslice           */ {0},	/*  */
	/* 150 kvaslice         */ {0},	/*  */
	/* 151 aeach            */ {0},	/*  */
	/* 152 akeys            */ {0},	/*  */
	/* 153 avalues          */ {0},	/*  */
	/* 154 each             */ {0},	/*  */
	/* 155 values           */ {0},	/*  */
	/* 156 keys             */ {0},	/*  */
	/* 157 delete           */ {0},	/*  */
	/* 158 exists           */ {0},	/*  */
	/* 159 rv2hv            */ {0},	/*  */
	/* 160 helem            */ {0},	/*  */
	/* 161 hslice           */ {0},	/*  */
	/* 162 kvhslice         */ {0},	/*  */
	/* 163 multideref       */ {0},	/*  */
	/* 164 unpack           */ {0},	/*  */
	/* 165 pack             */ {0},	/*  */
	/* 166 split            */ {0},	/*  */
	/* 167 join             */ {0},	/*  */
	/* 168 list             */ {0},	/*  */
	/* 169 lslice           */ {0},	/*  */
	/* 170 anonlist         */ {0},	/*  */
	/* 171 anonhash         */ {0},	/*  */
	/* 172 splice           */ {0},	/*  */
	/* 173 push             */ {0},	/*  */
	/* 174 pop              */ {0},	/*  */
	/* 175 shift            */ {0},	/*  */
	/* 176 unshift          */ {0},	/*  */
	/* 177 sort             */ {0},	/*  */
	/* 178 reverse          */ {0},	/*  */
	/* 179 grepstart        */ {0},	/*  */
	/* 180 grepwhile        */ {0},	/*  */
	/* 181 mapstart         */ {0},	/*  */
	/* 182 mapwhile         */ {0},	/*  */
	/* 183 range            */ {0},	/*  */
	/* 184 flip             */ {0},	/*  */
	/* 185 flop             */ {0},	/*  */
	/* 186 and              */ {0},	/*  */
	/* 187 or               */ {0},	/*  */
	/* 188 xor              */ {0},	/*  */
	/* 189 dor              */ {0},	/*  */
	/* 190 cond_expr        */ {0},	/*  */
	/* 191 andassign        */ {0},	/*  */
	/* 192 orassign         */ {0},	/*  */
	/* 193 dorassign        */ {0},	/*  */
	/* 194 method           */ {0},	/*  */
	/* 195 entersub         */ {0},	/*  */
	/* 196 enterxssub       */ {0},	/*  */
	/* 197 leavesub         */ {0},	/*  */
	/* 198 leavesublv       */ {0},	/*  */
	/* 199 caller           */ {0},	/*  */
	/* 200 warn             */ {0},	/*  */
	/* 201 die              */ {0},	/*  */
	/* 202 reset            */ {0},	/*  */
	/* 203 lineseq          */ {0},	/*  */
	/* 204 nextstate        */ {0},	/*  */
	/* 205 dbstate          */ {0},	/*  */
	/* 206 unstack          */ {0},	/*  */
	/* 207 enter            */ {0},	/*  */
	/* 208 leave            */ {0},	/*  */
	/* 209 scope            */ {0},	/*  */
	/* 210 enteriter        */ {0},	/*  */
	/* 211 iter             */ {0},	/*  */
	/* 212 enterloop        */ {0},	/*  */
	/* 213 leaveloop        */ {0},	/*  */
	/* 214 return           */ {0},	/*  */
	/* 215 last             */ {0},	/*  */
	/* 216 next             */ {0},	/*  */
	/* 217 redo             */ {0},	/*  */
	/* 218 dump             */ {0},	/*  */
	/* 219 goto             */ {0},	/*  */
	/* 220 exit             */ {0},	/*  */
	/* 221 method_named     */ {0},	/*  */
	/* 222 method_super     */ {0},	/*  */
	/* 223 method_redir     */ {0},	/*  */
	/* 224 method_redir_super */ {0},	/*  */
	/* 225 entergiven       */ {0},	/*  */
	/* 226 leavegiven       */ {0},	/*  */
	/* 227 enterwhen        */ {0},	/*  */
	/* 228 leavewhen        */ {0},	/*  */
	/* 229 break            */ {0},	/*  */
	/* 230 continue         */ {0},	/*  */
	/* 231 open             */ {0},	/*  */
	/* 232 close            */ {0},	/*  */
	/* 233 pipe_op          */ {0},	/*  */
	/* 234 fileno           */ {0},	/*  */
	/* 235 umask            */ {0},	/*  */
	/* 236 binmode          */ {0},	/*  */
	/* 237 tie              */ {0},	/*  */
	/* 238 untie            */ {0},	/*  */
	/* 239 tied             */ {0},	/*  */
	/* 240 dbmopen          */ {0},	/*  */
	/* 241 dbmclose         */ {0},	/*  */
	/* 242 sselect          */ {0},	/*  */
	/* 243 select           */ {0},	/*  */
	/* 244 getc             */ {0},	/*  */
	/* 245 read             */ {0},	/*  */
	/* 246 enterwrite       */ {0},	/*  */
	/* 247 leavewrite       */ {0},	/*  */
	/* 248 prtf             */ {0},	/*  */
	/* 249 print            */ {0},	/*  */
	/* 250 say              */ {0},	/*  */
	/* 251 sysopen          */ {0},	/*  */
	/* 252 sysseek          */ {0},	/*  */
	/* 253 sysread          */ {0},	/*  */
	/* 254 syswrite         */ {0},	/*  */
	/* 255 eof              */ {0},	/*  */
	/* 256 tell             */ {0},	/*  */
	/* 257 seek             */ {0},	/*  */
	/* 258 truncate         */ {0},	/*  */
	/* 259 fcntl            */ {0},	/*  */
	/* 260 ioctl            */ {0},	/*  */
	/* 261 flock            */ {0},	/*  */
	/* 262 send             */ {0},	/*  */
	/* 263 recv             */ {0},	/*  */
	/* 264 socket           */ {0},	/*  */
	/* 265 sockpair         */ {0},	/*  */
	/* 266 bind             */ {0},	/*  */
	/* 267 connect          */ {0},	/*  */
	/* 268 listen           */ {0},	/*  */
	/* 269 accept           */ {0},	/*  */
	/* 270 shutdown         */ {0},	/*  */
	/* 271 gsockopt         */ {0},	/*  */
	/* 272 ssockopt         */ {0},	/*  */
	/* 273 getsockname      */ {0},	/*  */
	/* 274 getpeername      */ {0},	/*  */
	/* 275 lstat            */ {0},	/*  */
	/* 276 stat             */ {0},	/*  */
	/* 277 ftrread          */ {0},	/*  */
	/* 278 ftrwrite         */ {0},	/*  */
	/* 279 ftrexec          */ {0},	/*  */
	/* 280 fteread          */ {0},	/*  */
	/* 281 ftewrite         */ {0},	/*  */
	/* 282 fteexec          */ {0},	/*  */
	/* 283 ftis             */ {0},	/*  */
	/* 284 ftsize           */ {0},	/*  */
	/* 285 ftmtime          */ {0},	/*  */
	/* 286 ftatime          */ {0},	/*  */
	/* 287 ftctime          */ {0},	/*  */
	/* 288 ftrowned         */ {0},	/*  */
	/* 289 fteowned         */ {0},	/*  */
	/* 290 ftzero           */ {0},	/*  */
	/* 291 ftsock           */ {0},	/*  */
	/* 292 ftchr            */ {0},	/*  */
	/* 293 ftblk            */ {0},	/*  */
	/* 294 ftfile           */ {0},	/*  */
	/* 295 ftdir            */ {0},	/*  */
	/* 296 ftpipe           */ {0},	/*  */
	/* 297 ftsuid           */ {0},	/*  */
	/* 298 ftsgid           */ {0},	/*  */
	/* 299 ftsvtx           */ {0},	/*  */
	/* 300 ftlink           */ {0},	/*  */
	/* 301 fttty            */ {0},	/*  */
	/* 302 fttext           */ {0},	/*  */
	/* 303 ftbinary         */ {0},	/*  */
	/* 304 chdir            */ {0},	/*  */
	/* 305 chown            */ {0},	/*  */
	/* 306 chroot           */ {0},	/*  */
	/* 307 unlink           */ {0},	/*  */
	/* 308 chmod            */ {0},	/*  */
	/* 309 utime            */ {0},	/*  */
	/* 310 rename           */ {0},	/*  */
	/* 311 link             */ {0},	/*  */
	/* 312 symlink          */ {0},	/*  */
	/* 313 readlink         */ {0},	/*  */
	/* 314 mkdir            */ {0},	/*  */
	/* 315 rmdir            */ {0},	/*  */
	/* 316 open_dir         */ {0},	/*  */
	/* 317 readdir          */ {0},	/*  */
	/* 318 telldir          */ {0},	/*  */
	/* 319 seekdir          */ {0},	/*  */
	/* 320 rewinddir        */ {0},	/*  */
	/* 321 closedir         */ {0},	/*  */
	/* 322 fork             */ {0},	/*  */
	/* 323 wait             */ {0},	/*  */
	/* 324 waitpid          */ {0},	/*  */
	/* 325 system           */ {0},	/*  */
	/* 326 exec             */ {0},	/*  */
	/* 327 kill             */ {0},	/*  */
	/* 328 getppid          */ {0},	/*  */
	/* 329 getpgrp          */ {0},	/*  */
	/* 330 setpgrp          */ {0},	/*  */
	/* 331 getpriority      */ {0},	/*  */
	/* 332 setpriority      */ {0},	/*  */
	/* 333 time             */ {0},	/*  */
	/* 334 tms              */ {0},	/*  */
	/* 335 localtime        */ {0},	/*  */
	/* 336 gmtime           */ {0},	/*  */
	/* 337 alarm            */ {0},	/*  */
	/* 338 sleep            */ {0},	/*  */
	/* 339 shmget           */ {0},	/*  */
	/* 340 shmctl           */ {0},	/*  */
	/* 341 shmread          */ {0},	/*  */
	/* 342 shmwrite         */ {0},	/*  */
	/* 343 msgget           */ {0},	/*  */
	/* 344 msgctl           */ {0},	/*  */
	/* 345 msgsnd           */ {0},	/*  */
	/* 346 msgrcv           */ {0},	/*  */
	/* 347 semop            */ {0},	/*  */
	/* 348 semget           */ {0},	/*  */
	/* 349 semctl           */ {0},	/*  */
	/* 350 require          */ {0},	/*  */
	/* 351 dofile           */ {0},	/*  */
	/* 352 hintseval        */ {0},	/*  */
	/* 353 entereval        */ {0},	/*  */
	/* 354 leaveeval        */ {0},	/*  */
	/* 355 entertry         */ {0},	/*  */
	/* 356 leavetry         */ {0},	/*  */
	/* 357 ghbyname         */ {0},	/*  */
	/* 358 ghbyaddr         */ {0},	/*  */
	/* 359 ghostent         */ {0},	/*  */
	/* 360 gnbyname         */ {0},	/*  */
	/* 361 gnbyaddr         */ {0},	/*  */
	/* 362 gnetent          */ {0},	/*  */
	/* 363 gpbyname         */ {0},	/*  */
	/* 364 gpbynumber       */ {0},	/*  */
	/* 365 gprotoent        */ {0},	/*  */
	/* 366 gsbyname         */ {0},	/*  */
	/* 367 gsbyport         */ {0},	/*  */
	/* 368 gservent         */ {0},	/*  */
	/* 369 shostent         */ {0},	/*  */
	/* 370 snetent          */ {0},	/*  */
	/* 371 sprotoent        */ {0},	/*  */
	/* 372 sservent         */ {0},	/*  */
	/* 373 ehostent         */ {0},	/*  */
	/* 374 enetent          */ {0},	/*  */
	/* 375 eprotoent        */ {0},	/*  */
	/* 376 eservent         */ {0},	/*  */
	/* 377 gpwnam           */ {0},	/*  */
	/* 378 gpwuid           */ {0},	/*  */
	/* 379 gpwent           */ {0},	/*  */
	/* 380 spwent           */ {0},	/*  */
	/* 381 epwent           */ {0},	/*  */
	/* 382 ggrnam           */ {0},	/*  */
	/* 383 ggrgid           */ {0},	/*  */
	/* 384 ggrent           */ {0},	/*  */
	/* 385 sgrent           */ {0},	/*  */
	/* 386 egrent           */ {0},	/*  */
	/* 387 getlogin         */ {0},	/*  */
	/* 388 syscall          */ {0},	/*  */
	/* 389 lock             */ {0},	/*  */
	/* 390 once             */ {0},	/*  */
	/* 391 custom           */ {0},	/*  */
	/* 392 reach            */ {0},	/*  */
	/* 393 rkeys            */ {0},	/*  */
	/* 394 rvalues          */ {0},	/*  */
	/* 395 coreargs         */ {0},	/*  */
	/* 396 runcv            */ {0},	/*  */
	/* 397 fc               */ {0},	/*  */
	/* 398 padcv            */ {0},	/*  */
	/* 399 introcv          */ {0},	/*  */
	/* 400 clonecv          */ {0},	/*  */
	/* 401 padrange         */ {0},	/*  */
	/* 402 refassign        */ {0},	/*  */
	/* 403 lvref            */ {0},	/*  */
	/* 404 lvrefslice       */ {0},	/*  */
	/* 405 lvavref          */ {0},	/*  */
	/* 406 anonconst        */ {0},	/*  */
	/* 407: freed */	{ NULL }
};
#endif

END_EXTERN_C

#endif /* !PERL_GLOBAL_STRUCT_INIT */

#define NUM_OP_TYPE_VARIANTS(op) PL_op_type_variants[op][0]

/* for 1 to num */
#define OP_TYPE_VARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)
#define OP_TYPE_UPVARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] && PL_op_type_variants[(op)][(_j)]>0 \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)
#define OP_TYPE_DOWNVARIANT(op, _j) \
  (PL_op_type_variants[(op)][(_j)] && PL_op_type_variants[(op)][(_j)]<0 \
    ? (op) + PL_op_type_variants[(op)][(_j)] \
    : 0)

/* The ppcode switch array */

START_EXTERN_C

#ifdef PERL_GLOBAL_STRUCT_INIT
#  define PERL_PPADDR_INITED
static const Perl_ppaddr_t Gppaddr[]
#else
#  ifndef PERL_GLOBAL_STRUCT
#    define PERL_PPADDR_INITED
EXT Perl_ppaddr_t PL_ppaddr[] /* or perlvars.h */
#  endif
#endif /* PERL_GLOBAL_STRUCT */
#if (defined(DOINIT) && !defined(PERL_GLOBAL_STRUCT)) || defined(PERL_GLOBAL_STRUCT_INIT)
#  define PERL_PPADDR_INITED
= {
	Perl_pp_null,
	Perl_pp_stub,
	Perl_pp_scalar,	/* implemented by Perl_pp_null */
	Perl_pp_pushmark,
	Perl_pp_wantarray,
	Perl_pp_const,
	Perl_pp_gvsv,
	Perl_pp_gv,
	Perl_pp_gelem,
	Perl_pp_padsv,
	Perl_pp_padav,
	Perl_pp_padhv,
	Perl_pp_padany,	/* implemented by Perl_unimplemented_op */
	Perl_pp_pushre,
	Perl_pp_sassign,
	Perl_pp_aassign,
	Perl_pp_chop,
	Perl_pp_schop,
	Perl_pp_chomp,	/* implemented by Perl_pp_chop */
	Perl_pp_schomp,	/* implemented by Perl_pp_schop */
	Perl_pp_defined,
	Perl_pp_undef,
	Perl_pp_study,
	Perl_pp_pos,
	Perl_pp_preinc,
	Perl_pp_i_preinc,	/* implemented by Perl_pp_preinc */
	Perl_pp_predec,	/* implemented by Perl_pp_preinc */
	Perl_pp_i_predec,	/* implemented by Perl_pp_preinc */
	Perl_pp_postinc,
	Perl_pp_i_postinc,	/* implemented by Perl_pp_postinc */
	Perl_pp_postdec,	/* implemented by Perl_pp_postinc */
	Perl_pp_i_postdec,	/* implemented by Perl_pp_postinc */
	Perl_pp_pow,
	Perl_pp_multiply,
	Perl_pp_i_multiply,
	Perl_pp_u_multiply,
	Perl_pp_divide,
	Perl_pp_i_divide,
	Perl_pp_modulo,
	Perl_pp_i_modulo,
	Perl_pp_repeat,
	Perl_pp_add,
	Perl_pp_i_add,
	Perl_pp_u_add,
	Perl_pp_subtract,
	Perl_pp_i_subtract,
	Perl_pp_concat,
	Perl_pp_stringify,
	Perl_pp_left_shift,
	Perl_pp_right_shift,
	Perl_pp_lt,
	Perl_pp_i_lt,
	Perl_pp_gt,
	Perl_pp_i_gt,
	Perl_pp_le,
	Perl_pp_i_le,
	Perl_pp_ge,
	Perl_pp_i_ge,
	Perl_pp_eq,
	Perl_pp_i_eq,
	Perl_pp_ne,
	Perl_pp_i_ne,
	Perl_pp_cmp,
	Perl_pp_i_cmp,
	Perl_pp_s_lt,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_gt,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_le,
	Perl_pp_s_ge,	/* implemented by Perl_pp_s_le */
	Perl_pp_s_eq,
	Perl_pp_s_ne,
	Perl_pp_s_cmp,
	Perl_pp_bit_and,
	Perl_pp_bit_xor,	/* implemented by Perl_pp_bit_or */
	Perl_pp_bit_or,
	Perl_pp_i_bit_and,
	Perl_pp_i_bit_xor,	/* implemented by Perl_pp_i_bit_or */
	Perl_pp_i_bit_or,
	Perl_pp_s_bit_and,
	Perl_pp_s_bit_xor,	/* implemented by Perl_pp_s_bit_or */
	Perl_pp_s_bit_or,
	Perl_pp_negate,
	Perl_pp_i_negate,
	Perl_pp_not,
	Perl_pp_complement,
	Perl_pp_i_complement,
	Perl_pp_s_complement,
	Perl_pp_smartmatch,
	Perl_pp_atan2,
	Perl_pp_sin,
	Perl_pp_cos,	/* implemented by Perl_pp_sin */
	Perl_pp_rand,
	Perl_pp_srand,
	Perl_pp_exp,	/* implemented by Perl_pp_sin */
	Perl_pp_log,	/* implemented by Perl_pp_sin */
	Perl_pp_sqrt,	/* implemented by Perl_pp_sin */
	Perl_pp_int,
	Perl_pp_hex,	/* implemented by Perl_pp_oct */
	Perl_pp_oct,
	Perl_pp_abs,
	Perl_pp_rv2gv,
	Perl_pp_rv2sv,
	Perl_pp_av2arylen,
	Perl_pp_rv2cv,
	Perl_pp_anoncode,
	Perl_pp_prototype,
	Perl_pp_refgen,
	Perl_pp_srefgen,
	Perl_pp_ref,
	Perl_pp_bless,
	Perl_pp_backtick,
	Perl_pp_glob,
	Perl_pp_readline,
	Perl_pp_rcatline,
	Perl_pp_regcmaybe,	/* implemented by Perl_pp_null */
	Perl_pp_regcreset,
	Perl_pp_regcomp,
	Perl_pp_match,
	Perl_pp_qr,
	Perl_pp_subst,
	Perl_pp_substcont,
	Perl_pp_trans,
	Perl_pp_transr,	/* implemented by Perl_pp_trans */
	Perl_pp_length,
	Perl_pp_substr,
	Perl_pp_vec,
	Perl_pp_index,
	Perl_pp_rindex,	/* implemented by Perl_pp_index */
	Perl_pp_sprintf,
	Perl_pp_formline,
	Perl_pp_ord,
	Perl_pp_chr,
	Perl_pp_crypt,
	Perl_pp_ucfirst,
	Perl_pp_lcfirst,	/* implemented by Perl_pp_ucfirst */
	Perl_pp_uc,
	Perl_pp_lc,
	Perl_pp_quotemeta,
	Perl_pp_rv2av,
	Perl_pp_aelemfast,
	Perl_pp_aelemfast_lex,	/* implemented by Perl_pp_aelemfast */
	Perl_pp_aelem,
	Perl_pp_i_aelem,
	Perl_pp_n_aelem,	/* implemented by Perl_pp_i_aelem */
	Perl_pp_s_aelem,	/* implemented by Perl_pp_i_aelem */
	Perl_pp_aelemfast_lex_u,
	Perl_pp_aelem_u,
	Perl_pp_i_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_n_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_s_aelem_u,	/* implemented by Perl_pp_aelem_u */
	Perl_pp_aslice,
	Perl_pp_kvaslice,
	Perl_pp_aeach,
	Perl_pp_akeys,
	Perl_pp_avalues,	/* implemented by Perl_pp_akeys */
	Perl_pp_each,
	Perl_pp_values,	/* implemented by Perl_do_kv */
	Perl_pp_keys,	/* implemented by Perl_do_kv */
	Perl_pp_delete,
	Perl_pp_exists,
	Perl_pp_rv2hv,	/* implemented by Perl_pp_rv2av */
	Perl_pp_helem,
	Perl_pp_hslice,
	Perl_pp_kvhslice,
	Perl_pp_multideref,
	Perl_pp_unpack,
	Perl_pp_pack,
	Perl_pp_split,
	Perl_pp_join,
	Perl_pp_list,
	Perl_pp_lslice,
	Perl_pp_anonlist,
	Perl_pp_anonhash,
	Perl_pp_splice,
	Perl_pp_push,
	Perl_pp_pop,	/* implemented by Perl_pp_shift */
	Perl_pp_shift,
	Perl_pp_unshift,
	Perl_pp_sort,
	Perl_pp_reverse,
	Perl_pp_grepstart,
	Perl_pp_grepwhile,
	Perl_pp_mapstart,	/* implemented by Perl_pp_grepstart */
	Perl_pp_mapwhile,
	Perl_pp_range,
	Perl_pp_flip,
	Perl_pp_flop,
	Perl_pp_and,
	Perl_pp_or,
	Perl_pp_xor,
	Perl_pp_dor,	/* implemented by Perl_pp_defined */
	Perl_pp_cond_expr,
	Perl_pp_andassign,	/* implemented by Perl_pp_and */
	Perl_pp_orassign,	/* implemented by Perl_pp_or */
	Perl_pp_dorassign,	/* implemented by Perl_pp_defined */
	Perl_pp_method,
	Perl_pp_entersub,
	Perl_pp_enterxssub,
	Perl_pp_leavesub,
	Perl_pp_leavesublv,
	Perl_pp_caller,
	Perl_pp_warn,
	Perl_pp_die,
	Perl_pp_reset,
	Perl_pp_lineseq,	/* implemented by Perl_pp_null */
	Perl_pp_nextstate,
	Perl_pp_dbstate,
	Perl_pp_unstack,
	Perl_pp_enter,
	Perl_pp_leave,
	Perl_pp_scope,	/* implemented by Perl_pp_null */
	Perl_pp_enteriter,
	Perl_pp_iter,
	Perl_pp_enterloop,
	Perl_pp_leaveloop,
	Perl_pp_return,
	Perl_pp_last,
	Perl_pp_next,
	Perl_pp_redo,
	Perl_pp_dump,	/* implemented by Perl_pp_goto */
	Perl_pp_goto,
	Perl_pp_exit,
	Perl_pp_method_named,
	Perl_pp_method_super,
	Perl_pp_method_redir,
	Perl_pp_method_redir_super,
	Perl_pp_entergiven,
	Perl_pp_leavegiven,
	Perl_pp_enterwhen,
	Perl_pp_leavewhen,
	Perl_pp_break,
	Perl_pp_continue,
	Perl_pp_open,
	Perl_pp_close,
	Perl_pp_pipe_op,
	Perl_pp_fileno,
	Perl_pp_umask,
	Perl_pp_binmode,
	Perl_pp_tie,
	Perl_pp_untie,
	Perl_pp_tied,
	Perl_pp_dbmopen,
	Perl_pp_dbmclose,	/* implemented by Perl_pp_untie */
	Perl_pp_sselect,
	Perl_pp_select,
	Perl_pp_getc,
	Perl_pp_read,	/* implemented by Perl_pp_sysread */
	Perl_pp_enterwrite,
	Perl_pp_leavewrite,
	Perl_pp_prtf,
	Perl_pp_print,
	Perl_pp_say,	/* implemented by Perl_pp_print */
	Perl_pp_sysopen,
	Perl_pp_sysseek,
	Perl_pp_sysread,
	Perl_pp_syswrite,
	Perl_pp_eof,
	Perl_pp_tell,
	Perl_pp_seek,	/* implemented by Perl_pp_sysseek */
	Perl_pp_truncate,
	Perl_pp_fcntl,	/* implemented by Perl_pp_ioctl */
	Perl_pp_ioctl,
	Perl_pp_flock,
	Perl_pp_send,	/* implemented by Perl_pp_syswrite */
	Perl_pp_recv,	/* implemented by Perl_pp_sysread */
	Perl_pp_socket,
	Perl_pp_sockpair,
	Perl_pp_bind,
	Perl_pp_connect,	/* implemented by Perl_pp_bind */
	Perl_pp_listen,
	Perl_pp_accept,
	Perl_pp_shutdown,
	Perl_pp_gsockopt,	/* implemented by Perl_pp_ssockopt */
	Perl_pp_ssockopt,
	Perl_pp_getsockname,	/* implemented by Perl_pp_getpeername */
	Perl_pp_getpeername,
	Perl_pp_lstat,	/* implemented by Perl_pp_stat */
	Perl_pp_stat,
	Perl_pp_ftrread,
	Perl_pp_ftrwrite,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftrexec,	/* implemented by Perl_pp_ftrread */
	Perl_pp_fteread,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftewrite,	/* implemented by Perl_pp_ftrread */
	Perl_pp_fteexec,	/* implemented by Perl_pp_ftrread */
	Perl_pp_ftis,
	Perl_pp_ftsize,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftmtime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftatime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftctime,	/* implemented by Perl_pp_ftis */
	Perl_pp_ftrowned,
	Perl_pp_fteowned,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftzero,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsock,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftchr,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftblk,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftfile,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftdir,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftpipe,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsuid,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsgid,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftsvtx,	/* implemented by Perl_pp_ftrowned */
	Perl_pp_ftlink,
	Perl_pp_fttty,
	Perl_pp_fttext,
	Perl_pp_ftbinary,	/* implemented by Perl_pp_fttext */
	Perl_pp_chdir,
	Perl_pp_chown,
	Perl_pp_chroot,
	Perl_pp_unlink,	/* implemented by Perl_pp_chown */
	Perl_pp_chmod,	/* implemented by Perl_pp_chown */
	Perl_pp_utime,	/* implemented by Perl_pp_chown */
	Perl_pp_rename,
	Perl_pp_link,
	Perl_pp_symlink,	/* implemented by Perl_pp_link */
	Perl_pp_readlink,
	Perl_pp_mkdir,
	Perl_pp_rmdir,
	Perl_pp_open_dir,
	Perl_pp_readdir,
	Perl_pp_telldir,
	Perl_pp_seekdir,
	Perl_pp_rewinddir,
	Perl_pp_closedir,
	Perl_pp_fork,
	Perl_pp_wait,
	Perl_pp_waitpid,
	Perl_pp_system,
	Perl_pp_exec,
	Perl_pp_kill,	/* implemented by Perl_pp_chown */
	Perl_pp_getppid,
	Perl_pp_getpgrp,
	Perl_pp_setpgrp,
	Perl_pp_getpriority,
	Perl_pp_setpriority,
	Perl_pp_time,
	Perl_pp_tms,
	Perl_pp_localtime,	/* implemented by Perl_pp_gmtime */
	Perl_pp_gmtime,
	Perl_pp_alarm,
	Perl_pp_sleep,
	Perl_pp_shmget,	/* implemented by Perl_pp_semget */
	Perl_pp_shmctl,	/* implemented by Perl_pp_semctl */
	Perl_pp_shmread,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_shmwrite,
	Perl_pp_msgget,	/* implemented by Perl_pp_semget */
	Perl_pp_msgctl,	/* implemented by Perl_pp_semctl */
	Perl_pp_msgsnd,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_msgrcv,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_semop,	/* implemented by Perl_pp_shmwrite */
	Perl_pp_semget,
	Perl_pp_semctl,
	Perl_pp_require,
	Perl_pp_dofile,	/* implemented by Perl_pp_require */
	Perl_pp_hintseval,
	Perl_pp_entereval,
	Perl_pp_leaveeval,
	Perl_pp_entertry,
	Perl_pp_leavetry,
	Perl_pp_ghbyname,	/* implemented by Perl_pp_ghostent */
	Perl_pp_ghbyaddr,	/* implemented by Perl_pp_ghostent */
	Perl_pp_ghostent,
	Perl_pp_gnbyname,	/* implemented by Perl_pp_gnetent */
	Perl_pp_gnbyaddr,	/* implemented by Perl_pp_gnetent */
	Perl_pp_gnetent,
	Perl_pp_gpbyname,	/* implemented by Perl_pp_gprotoent */
	Perl_pp_gpbynumber,	/* implemented by Perl_pp_gprotoent */
	Perl_pp_gprotoent,
	Perl_pp_gsbyname,	/* implemented by Perl_pp_gservent */
	Perl_pp_gsbyport,	/* implemented by Perl_pp_gservent */
	Perl_pp_gservent,
	Perl_pp_shostent,
	Perl_pp_snetent,	/* implemented by Perl_pp_shostent */
	Perl_pp_sprotoent,	/* implemented by Perl_pp_shostent */
	Perl_pp_sservent,	/* implemented by Perl_pp_shostent */
	Perl_pp_ehostent,
	Perl_pp_enetent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_eprotoent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_eservent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_gpwnam,	/* implemented by Perl_pp_gpwent */
	Perl_pp_gpwuid,	/* implemented by Perl_pp_gpwent */
	Perl_pp_gpwent,
	Perl_pp_spwent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_epwent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_ggrnam,	/* implemented by Perl_pp_ggrent */
	Perl_pp_ggrgid,	/* implemented by Perl_pp_ggrent */
	Perl_pp_ggrent,
	Perl_pp_sgrent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_egrent,	/* implemented by Perl_pp_ehostent */
	Perl_pp_getlogin,
	Perl_pp_syscall,
	Perl_pp_lock,
	Perl_pp_once,
	Perl_pp_custom,	/* implemented by Perl_unimplemented_op */
	Perl_pp_reach,	/* implemented by Perl_pp_rkeys */
	Perl_pp_rkeys,
	Perl_pp_rvalues,	/* implemented by Perl_pp_rkeys */
	Perl_pp_coreargs,
	Perl_pp_runcv,
	Perl_pp_fc,
	Perl_pp_padcv,
	Perl_pp_introcv,
	Perl_pp_clonecv,
	Perl_pp_padrange,
	Perl_pp_refassign,
	Perl_pp_lvref,
	Perl_pp_lvrefslice,
	Perl_pp_lvavref,
	Perl_pp_anonconst,
}
#endif
#ifdef PERL_PPADDR_INITED
;
#endif

#ifdef PERL_GLOBAL_STRUCT_INIT
#  define PERL_CHECK_INITED
static const Perl_check_t Gcheck[]
#else
#  ifndef PERL_GLOBAL_STRUCT
#    define PERL_CHECK_INITED
EXT Perl_check_t PL_check[] /* or perlvars.h */
#  endif
#endif
#if (defined(DOINIT) && !defined(PERL_GLOBAL_STRUCT)) || defined(PERL_GLOBAL_STRUCT_INIT)
#  define PERL_CHECK_INITED
= {
	Perl_ck_null,		/* null */
	Perl_ck_null,		/* stub */
	Perl_ck_fun,		/* scalar */
	Perl_ck_null,		/* pushmark */
	Perl_ck_null,		/* wantarray */
	Perl_ck_svconst,	/* const */
	Perl_ck_null,		/* gvsv */
	Perl_ck_null,		/* gv */
	Perl_ck_null,		/* gelem */
	Perl_ck_pad,		/* padsv */
	Perl_ck_null,		/* padav */
	Perl_ck_null,		/* padhv */
	Perl_ck_null,		/* padany */
	Perl_ck_null,		/* pushre */
	Perl_ck_sassign,	/* sassign */
	Perl_ck_null,		/* aassign */
	Perl_ck_spair,		/* chop */
	Perl_ck_null,		/* schop */
	Perl_ck_spair,		/* chomp */
	Perl_ck_null,		/* schomp */
	Perl_ck_defined,	/* defined */
	Perl_ck_fun,		/* undef */
	Perl_ck_fun,		/* study */
	Perl_ck_fun,		/* pos */
	Perl_ck_lfun,		/* preinc */
	Perl_ck_lfun,		/* i_preinc */
	Perl_ck_lfun,		/* predec */
	Perl_ck_lfun,		/* i_predec */
	Perl_ck_lfun,		/* postinc */
	Perl_ck_lfun,		/* i_postinc */
	Perl_ck_lfun,		/* postdec */
	Perl_ck_lfun,		/* i_postdec */
	Perl_ck_null,		/* pow */
	Perl_ck_type,		/* multiply */
	Perl_ck_null,		/* i_multiply */
	Perl_ck_type,		/* u_multiply */
	Perl_ck_type,		/* divide */
	Perl_ck_null,		/* i_divide */
	Perl_ck_type,		/* modulo */
	Perl_ck_null,		/* i_modulo */
	Perl_ck_repeat,		/* repeat */
	Perl_ck_type,		/* add */
	Perl_ck_type,		/* i_add */
	Perl_ck_type,		/* u_add */
	Perl_ck_type,		/* subtract */
	Perl_ck_type,		/* i_subtract */
	Perl_ck_concat,		/* concat */
	Perl_ck_stringify,	/* stringify */
	Perl_ck_bitop,		/* left_shift */
	Perl_ck_bitop,		/* right_shift */
	Perl_ck_cmp,		/* lt */
	Perl_ck_cmp,		/* i_lt */
	Perl_ck_cmp,		/* gt */
	Perl_ck_cmp,		/* i_gt */
	Perl_ck_cmp,		/* le */
	Perl_ck_cmp,		/* i_le */
	Perl_ck_cmp,		/* ge */
	Perl_ck_cmp,		/* i_ge */
	Perl_ck_type,		/* eq */
	Perl_ck_null,		/* i_eq */
	Perl_ck_type,		/* ne */
	Perl_ck_null,		/* i_ne */
	Perl_ck_type,		/* cmp */
	Perl_ck_null,		/* i_cmp */
	Perl_ck_null,		/* s_lt */
	Perl_ck_null,		/* s_gt */
	Perl_ck_null,		/* s_le */
	Perl_ck_null,		/* s_ge */
	Perl_ck_null,		/* s_eq */
	Perl_ck_null,		/* s_ne */
	Perl_ck_null,		/* s_cmp */
	Perl_ck_bitop,		/* bit_and */
	Perl_ck_bitop,		/* bit_xor */
	Perl_ck_bitop,		/* bit_or */
	Perl_ck_bitop,		/* i_bit_and */
	Perl_ck_bitop,		/* i_bit_xor */
	Perl_ck_bitop,		/* i_bit_or */
	Perl_ck_bitop,		/* s_bit_and */
	Perl_ck_bitop,		/* s_bit_xor */
	Perl_ck_bitop,		/* s_bit_or */
	Perl_ck_type,		/* negate */
	Perl_ck_null,		/* i_negate */
	Perl_ck_null,		/* not */
	Perl_ck_bitop,		/* complement */
	Perl_ck_bitop,		/* i_complement */
	Perl_ck_bitop,		/* s_complement */
	Perl_ck_smartmatch,	/* smartmatch */
	Perl_ck_fun,		/* atan2 */
	Perl_ck_fun,		/* sin */
	Perl_ck_fun,		/* cos */
	Perl_ck_fun,		/* rand */
	Perl_ck_fun,		/* srand */
	Perl_ck_fun,		/* exp */
	Perl_ck_fun,		/* log */
	Perl_ck_fun,		/* sqrt */
	Perl_ck_fun,		/* int */
	Perl_ck_fun,		/* hex */
	Perl_ck_fun,		/* oct */
	Perl_ck_fun,		/* abs */
	Perl_ck_rvconst,	/* rv2gv */
	Perl_ck_rvconst,	/* rv2sv */
	Perl_ck_null,		/* av2arylen */
	Perl_ck_rvconst,	/* rv2cv */
	Perl_ck_anoncode,	/* anoncode */
	Perl_ck_prototype,	/* prototype */
	Perl_ck_spair,		/* refgen */
	Perl_ck_null,		/* srefgen */
	Perl_ck_fun,		/* ref */
	Perl_ck_fun,		/* bless */
	Perl_ck_backtick,	/* backtick */
	Perl_ck_glob,		/* glob */
	Perl_ck_readline,	/* readline */
	Perl_ck_null,		/* rcatline */
	Perl_ck_fun,		/* regcmaybe */
	Perl_ck_fun,		/* regcreset */
	Perl_ck_null,		/* regcomp */
	Perl_ck_match,		/* match */
	Perl_ck_match,		/* qr */
	Perl_ck_match,		/* subst */
	Perl_ck_null,		/* substcont */
	Perl_ck_match,		/* trans */
	Perl_ck_match,		/* transr */
	Perl_ck_length,		/* length */
	Perl_ck_substr,		/* substr */
	Perl_ck_fun,		/* vec */
	Perl_ck_index,		/* index */
	Perl_ck_index,		/* rindex */
	Perl_ck_lfun,		/* sprintf */
	Perl_ck_fun,		/* formline */
	Perl_ck_fun,		/* ord */
	Perl_ck_fun,		/* chr */
	Perl_ck_fun,		/* crypt */
	Perl_ck_fun,		/* ucfirst */
	Perl_ck_fun,		/* lcfirst */
	Perl_ck_fun,		/* uc */
	Perl_ck_fun,		/* lc */
	Perl_ck_fun,		/* quotemeta */
	Perl_ck_rvconst,	/* rv2av */
	Perl_ck_aelem,		/* aelemfast */
	Perl_ck_aelem,		/* aelemfast_lex */
	Perl_ck_aelem,		/* aelem */
	Perl_ck_null,		/* i_aelem */
	Perl_ck_null,		/* n_aelem */
	Perl_ck_null,		/* s_aelem */
	Perl_ck_null,		/* aelemfast_lex_u */
	Perl_ck_null,		/* aelem_u */
	Perl_ck_null,		/* i_aelem_u */
	Perl_ck_null,		/* n_aelem_u */
	Perl_ck_null,		/* s_aelem_u */
	Perl_ck_null,		/* aslice */
	Perl_ck_null,		/* kvaslice */
	Perl_ck_each,		/* aeach */
	Perl_ck_each,		/* akeys */
	Perl_ck_each,		/* avalues */
	Perl_ck_each,		/* each */
	Perl_ck_each,		/* values */
	Perl_ck_each,		/* keys */
	Perl_ck_delete,		/* delete */
	Perl_ck_exists,		/* exists */
	Perl_ck_rvconst,	/* rv2hv */
	Perl_ck_null,		/* helem */
	Perl_ck_null,		/* hslice */
	Perl_ck_null,		/* kvhslice */
	Perl_ck_null,		/* multideref */
	Perl_ck_fun,		/* unpack */
	Perl_ck_fun,		/* pack */
	Perl_ck_split,		/* split */
	Perl_ck_join,		/* join */
	Perl_ck_null,		/* list */
	Perl_ck_null,		/* lslice */
	Perl_ck_fun,		/* anonlist */
	Perl_ck_fun,		/* anonhash */
	Perl_ck_fun,		/* splice */
	Perl_ck_fun,		/* push */
	Perl_ck_shift,		/* pop */
	Perl_ck_shift,		/* shift */
	Perl_ck_fun,		/* unshift */
	Perl_ck_sort,		/* sort */
	Perl_ck_fun,		/* reverse */
	Perl_ck_grep,		/* grepstart */
	Perl_ck_null,		/* grepwhile */
	Perl_ck_grep,		/* mapstart */
	Perl_ck_null,		/* mapwhile */
	Perl_ck_null,		/* range */
	Perl_ck_null,		/* flip */
	Perl_ck_null,		/* flop */
	Perl_ck_null,		/* and */
	Perl_ck_null,		/* or */
	Perl_ck_null,		/* xor */
	Perl_ck_null,		/* dor */
	Perl_ck_null,		/* cond_expr */
	Perl_ck_null,		/* andassign */
	Perl_ck_null,		/* orassign */
	Perl_ck_null,		/* dorassign */
	Perl_ck_method,		/* method */
	Perl_ck_subr,		/* entersub */
	Perl_ck_subr,		/* enterxssub */
	Perl_ck_null,		/* leavesub */
	Perl_ck_null,		/* leavesublv */
	Perl_ck_fun,		/* caller */
	Perl_ck_fun,		/* warn */
	Perl_ck_fun,		/* die */
	Perl_ck_fun,		/* reset */
	Perl_ck_null,		/* lineseq */
	Perl_ck_null,		/* nextstate */
	Perl_ck_null,		/* dbstate */
	Perl_ck_null,		/* unstack */
	Perl_ck_null,		/* enter */
	Perl_ck_null,		/* leave */
	Perl_ck_null,		/* scope */
	Perl_ck_null,		/* enteriter */
	Perl_ck_null,		/* iter */
	Perl_ck_null,		/* enterloop */
	Perl_ck_null,		/* leaveloop */
	Perl_ck_return,		/* return */
	Perl_ck_null,		/* last */
	Perl_ck_null,		/* next */
	Perl_ck_null,		/* redo */
	Perl_ck_null,		/* dump */
	Perl_ck_null,		/* goto */
	Perl_ck_fun,		/* exit */
	Perl_ck_null,		/* method_named */
	Perl_ck_null,		/* method_super */
	Perl_ck_null,		/* method_redir */
	Perl_ck_null,		/* method_redir_super */
	Perl_ck_null,		/* entergiven */
	Perl_ck_null,		/* leavegiven */
	Perl_ck_null,		/* enterwhen */
	Perl_ck_null,		/* leavewhen */
	Perl_ck_null,		/* break */
	Perl_ck_null,		/* continue */
	Perl_ck_open,		/* open */
	Perl_ck_fun,		/* close */
	Perl_ck_fun,		/* pipe_op */
	Perl_ck_fun,		/* fileno */
	Perl_ck_fun,		/* umask */
	Perl_ck_fun,		/* binmode */
	Perl_ck_fun,		/* tie */
	Perl_ck_fun,		/* untie */
	Perl_ck_fun,		/* tied */
	Perl_ck_fun,		/* dbmopen */
	Perl_ck_fun,		/* dbmclose */
	Perl_ck_select,		/* sselect */
	Perl_ck_select,		/* select */
	Perl_ck_eof,		/* getc */
	Perl_ck_fun,		/* read */
	Perl_ck_fun,		/* enterwrite */
	Perl_ck_null,		/* leavewrite */
	Perl_ck_listiob,	/* prtf */
	Perl_ck_listiob,	/* print */
	Perl_ck_listiob,	/* say */
	Perl_ck_fun,		/* sysopen */
	Perl_ck_fun,		/* sysseek */
	Perl_ck_fun,		/* sysread */
	Perl_ck_fun,		/* syswrite */
	Perl_ck_eof,		/* eof */
	Perl_ck_tell,		/* tell */
	Perl_ck_tell,		/* seek */
	Perl_ck_trunc,		/* truncate */
	Perl_ck_fun,		/* fcntl */
	Perl_ck_fun,		/* ioctl */
	Perl_ck_fun,		/* flock */
	Perl_ck_fun,		/* send */
	Perl_ck_fun,		/* recv */
	Perl_ck_fun,		/* socket */
	Perl_ck_fun,		/* sockpair */
	Perl_ck_fun,		/* bind */
	Perl_ck_fun,		/* connect */
	Perl_ck_fun,		/* listen */
	Perl_ck_fun,		/* accept */
	Perl_ck_fun,		/* shutdown */
	Perl_ck_fun,		/* gsockopt */
	Perl_ck_fun,		/* ssockopt */
	Perl_ck_fun,		/* getsockname */
	Perl_ck_fun,		/* getpeername */
	Perl_ck_ftst,		/* lstat */
	Perl_ck_ftst,		/* stat */
	Perl_ck_ftst,		/* ftrread */
	Perl_ck_ftst,		/* ftrwrite */
	Perl_ck_ftst,		/* ftrexec */
	Perl_ck_ftst,		/* fteread */
	Perl_ck_ftst,		/* ftewrite */
	Perl_ck_ftst,		/* fteexec */
	Perl_ck_ftst,		/* ftis */
	Perl_ck_ftst,		/* ftsize */
	Perl_ck_ftst,		/* ftmtime */
	Perl_ck_ftst,		/* ftatime */
	Perl_ck_ftst,		/* ftctime */
	Perl_ck_ftst,		/* ftrowned */
	Perl_ck_ftst,		/* fteowned */
	Perl_ck_ftst,		/* ftzero */
	Perl_ck_ftst,		/* ftsock */
	Perl_ck_ftst,		/* ftchr */
	Perl_ck_ftst,		/* ftblk */
	Perl_ck_ftst,		/* ftfile */
	Perl_ck_ftst,		/* ftdir */
	Perl_ck_ftst,		/* ftpipe */
	Perl_ck_ftst,		/* ftsuid */
	Perl_ck_ftst,		/* ftsgid */
	Perl_ck_ftst,		/* ftsvtx */
	Perl_ck_ftst,		/* ftlink */
	Perl_ck_ftst,		/* fttty */
	Perl_ck_ftst,		/* fttext */
	Perl_ck_ftst,		/* ftbinary */
	Perl_ck_trunc,		/* chdir */
	Perl_ck_fun,		/* chown */
	Perl_ck_fun,		/* chroot */
	Perl_ck_fun,		/* unlink */
	Perl_ck_fun,		/* chmod */
	Perl_ck_fun,		/* utime */
	Perl_ck_fun,		/* rename */
	Perl_ck_fun,		/* link */
	Perl_ck_fun,		/* symlink */
	Perl_ck_fun,		/* readlink */
	Perl_ck_fun,		/* mkdir */
	Perl_ck_fun,		/* rmdir */
	Perl_ck_fun,		/* open_dir */
	Perl_ck_fun,		/* readdir */
	Perl_ck_fun,		/* telldir */
	Perl_ck_fun,		/* seekdir */
	Perl_ck_fun,		/* rewinddir */
	Perl_ck_fun,		/* closedir */
	Perl_ck_null,		/* fork */
	Perl_ck_null,		/* wait */
	Perl_ck_fun,		/* waitpid */
	Perl_ck_exec,		/* system */
	Perl_ck_exec,		/* exec */
	Perl_ck_fun,		/* kill */
	Perl_ck_null,		/* getppid */
	Perl_ck_fun,		/* getpgrp */
	Perl_ck_fun,		/* setpgrp */
	Perl_ck_fun,		/* getpriority */
	Perl_ck_fun,		/* setpriority */
	Perl_ck_null,		/* time */
	Perl_ck_null,		/* tms */
	Perl_ck_fun,		/* localtime */
	Perl_ck_fun,		/* gmtime */
	Perl_ck_fun,		/* alarm */
	Perl_ck_fun,		/* sleep */
	Perl_ck_fun,		/* shmget */
	Perl_ck_fun,		/* shmctl */
	Perl_ck_fun,		/* shmread */
	Perl_ck_fun,		/* shmwrite */
	Perl_ck_fun,		/* msgget */
	Perl_ck_fun,		/* msgctl */
	Perl_ck_fun,		/* msgsnd */
	Perl_ck_fun,		/* msgrcv */
	Perl_ck_fun,		/* semop */
	Perl_ck_fun,		/* semget */
	Perl_ck_fun,		/* semctl */
	Perl_ck_require,	/* require */
	Perl_ck_fun,		/* dofile */
	Perl_ck_svconst,	/* hintseval */
	Perl_ck_eval,		/* entereval */
	Perl_ck_null,		/* leaveeval */
	Perl_ck_eval,		/* entertry */
	Perl_ck_null,		/* leavetry */
	Perl_ck_fun,		/* ghbyname */
	Perl_ck_fun,		/* ghbyaddr */
	Perl_ck_null,		/* ghostent */
	Perl_ck_fun,		/* gnbyname */
	Perl_ck_fun,		/* gnbyaddr */
	Perl_ck_null,		/* gnetent */
	Perl_ck_fun,		/* gpbyname */
	Perl_ck_fun,		/* gpbynumber */
	Perl_ck_null,		/* gprotoent */
	Perl_ck_fun,		/* gsbyname */
	Perl_ck_fun,		/* gsbyport */
	Perl_ck_null,		/* gservent */
	Perl_ck_fun,		/* shostent */
	Perl_ck_fun,		/* snetent */
	Perl_ck_fun,		/* sprotoent */
	Perl_ck_fun,		/* sservent */
	Perl_ck_null,		/* ehostent */
	Perl_ck_null,		/* enetent */
	Perl_ck_null,		/* eprotoent */
	Perl_ck_null,		/* eservent */
	Perl_ck_fun,		/* gpwnam */
	Perl_ck_fun,		/* gpwuid */
	Perl_ck_null,		/* gpwent */
	Perl_ck_null,		/* spwent */
	Perl_ck_null,		/* epwent */
	Perl_ck_fun,		/* ggrnam */
	Perl_ck_fun,		/* ggrgid */
	Perl_ck_null,		/* ggrent */
	Perl_ck_null,		/* sgrent */
	Perl_ck_null,		/* egrent */
	Perl_ck_null,		/* getlogin */
	Perl_ck_fun,		/* syscall */
	Perl_ck_rfun,		/* lock */
	Perl_ck_null,		/* once */
	Perl_ck_null,		/* custom */
	Perl_ck_each,		/* reach */
	Perl_ck_each,		/* rkeys */
	Perl_ck_each,		/* rvalues */
	Perl_ck_null,		/* coreargs */
	Perl_ck_null,		/* runcv */
	Perl_ck_fun,		/* fc */
	Perl_ck_null,		/* padcv */
	Perl_ck_null,		/* introcv */
	Perl_ck_null,		/* clonecv */
	Perl_ck_null,		/* padrange */
	Perl_ck_refassign,	/* refassign */
	Perl_ck_null,		/* lvref */
	Perl_ck_null,		/* lvrefslice */
	Perl_ck_null,		/* lvavref */
	Perl_ck_null,		/* anonconst */
}
#endif
#ifdef PERL_CHECK_INITED
;
#endif /* #ifdef PERL_CHECK_INITED */

#ifndef PERL_GLOBAL_STRUCT_INIT

#ifndef DOINIT
EXTCONST U32 PL_opargs[];
#else
EXTCONST U32 PL_opargs[] = {
	0x00000000,	/* null */
	0x00000100,	/* stub */
	0x00006d04,	/* scalar */
	0x00000104,	/* pushmark */
	0x00000004,	/* wantarray */
	0x00005904,	/* const */
	0x00005844,	/* gvsv */
	0x00005844,	/* gv */
	0x00044844,	/* gelem */
	0x00000044,	/* padsv */
	0x00000040,	/* padav */
	0x00000040,	/* padhv */
	0x00000040,	/* padany */
	0x00001440,	/* pushre */
	0x00044804,	/* sassign */
	0x00088808,	/* aassign */
	0x0000ac0d,	/* chop */
	0x00026c8c,	/* schop */
	0x0000ac1d,	/* chomp */
	0x00026c9c,	/* schomp */
	0x00026c84,	/* defined */
	0x0003ec04,	/* undef */
	0x00026c84,	/* study */
	0x0003ec8c,	/* pos */
	0x00004464,	/* preinc */
	0x00004444,	/* i_preinc */
	0x00004464,	/* predec */
	0x00004444,	/* i_predec */
	0x0000442c,	/* postinc */
	0x0000440c,	/* i_postinc */
	0x0000442c,	/* postdec */
	0x0000440c,	/* i_postdec */
	0x0004491e,	/* pow */
	0x0004493e,	/* multiply */
	0x0004491e,	/* i_multiply */
	0x0004491e,	/* u_multiply */
	0x0004493e,	/* divide */
	0x0004491e,	/* i_divide */
	0x0004493e,	/* modulo */
	0x0004491e,	/* i_modulo */
	0x0004880b,	/* repeat */
	0x0004493e,	/* add */
	0x0004491e,	/* i_add */
	0x0004491e,	/* u_add */
	0x0004493e,	/* subtract */
	0x0004491e,	/* i_subtract */
	0x0004491e,	/* concat */
	0x0000501e,	/* stringify */
	0x0004491e,	/* left_shift */
	0x0004491e,	/* right_shift */
	0x00044926,	/* lt */
	0x00044906,	/* i_lt */
	0x00044926,	/* gt */
	0x00044906,	/* i_gt */
	0x00044926,	/* le */
	0x00044906,	/* i_le */
	0x00044926,	/* ge */
	0x00044906,	/* i_ge */
	0x00044926,	/* eq */
	0x00044906,	/* i_eq */
	0x00044926,	/* ne */
	0x00044906,	/* i_ne */
	0x0004492e,	/* cmp */
	0x0004490e,	/* i_cmp */
	0x00044906,	/* s_lt */
	0x00044906,	/* s_gt */
	0x00044906,	/* s_le */
	0x00044906,	/* s_ge */
	0x00044906,	/* s_eq */
	0x00044906,	/* s_ne */
	0x0004490e,	/* s_cmp */
	0x0004490e,	/* bit_and */
	0x0004490e,	/* bit_xor */
	0x0004490e,	/* bit_or */
	0x0004491e,	/* i_bit_and */
	0x0004491e,	/* i_bit_xor */
	0x0004491e,	/* i_bit_or */
	0x0004480e,	/* s_bit_and */
	0x0004480e,	/* s_bit_xor */
	0x0004480e,	/* s_bit_or */
	0x0000452e,	/* negate */
	0x0000450e,	/* i_negate */
	0x00004506,	/* not */
	0x0000452e,	/* complement */
	0x0000451e,	/* i_complement */
	0x0000441e,	/* s_complement */
	0x00000804,	/* smartmatch */
	0x0004511e,	/* atan2 */
	0x00026d9e,	/* sin */
	0x00026d9e,	/* cos */
	0x00026c1c,	/* rand */
	0x00026c1c,	/* srand */
	0x00026d9e,	/* exp */
	0x00026d9e,	/* log */
	0x00026d9e,	/* sqrt */
	0x00026d9e,	/* int */
	0x00026d9e,	/* hex */
	0x00026d9e,	/* oct */
	0x00026d9e,	/* abs */
	0x0001c444,	/* rv2gv */
	0x0001c444,	/* rv2sv */
	0x0000c404,	/* av2arylen */
	0x0001c440,	/* rv2cv */
	0x00005804,	/* anoncode */
	0x00026c84,	/* prototype */
	0x00008401,	/* refgen */
	0x00004406,	/* srefgen */
	0x00026c8c,	/* ref */
	0x00245004,	/* bless */
	0x00026c88,	/* backtick */
	0x00025008,	/* glob */
	0x0003ac08,	/* readline */
	0x00001808,	/* rcatline */
	0x00004504,	/* regcmaybe */
	0x00004404,	/* regcreset */
	0x00004c04,	/* regcomp */
	0x00001400,	/* match */
	0x00001404,	/* qr */
	0x00005404,	/* subst */
	0x00000c04,	/* substcont */
	0x00006004,	/* trans */
	0x00006004,	/* transr */
	0x00026c9e,	/* length */
	0x2644500c,	/* substr */
	0x0044500c,	/* vec */
	0x0244501c,	/* index */
	0x0244501c,	/* rindex */
	0x0008500f,	/* sprintf */
	0x00085005,	/* formline */
	0x00026c9e,	/* ord */
	0x00026c9e,	/* chr */
	0x0004501e,	/* crypt */
	0x00026c8e,	/* ucfirst */
	0x00026c8e,	/* lcfirst */
	0x00026c8e,	/* uc */
	0x00026c8e,	/* lc */
	0x00026c8e,	/* quotemeta */
	0x0001c448,	/* rv2av */
	0x0004d844,	/* aelemfast */
	0x0004c040,	/* aelemfast_lex */
	0x0004c804,	/* aelem */
	0x0004c804,	/* i_aelem */
	0x0004c804,	/* n_aelem */
	0x0004c804,	/* s_aelem */
	0x0004c040,	/* aelemfast_lex_u */
	0x0004c804,	/* aelem_u */
	0x0004c804,	/* i_aelem_u */
	0x0004c804,	/* n_aelem_u */
	0x0004c804,	/* s_aelem_u */
	0x0008d001,	/* aslice */
	0x0008d001,	/* kvaslice */
	0x0000ec40,	/* aeach */
	0x0000ec08,	/* akeys */
	0x0000ec48,	/* avalues */
	0x00012c40,	/* each */
	0x00012c48,	/* values */
	0x00012c08,	/* keys */
	0x00006c00,	/* delete */
	0x00006c04,	/* exists */
	0x0001c440,	/* rv2hv */
	0x00050804,	/* helem */
	0x00091001,	/* hslice */
	0x00091001,	/* kvhslice */
	0x00003c44,	/* multideref */
	0x00245080,	/* unpack */
	0x0008500f,	/* pack */
	0x00445008,	/* split */
	0x0008500f,	/* join */
	0x00009001,	/* list */
	0x00890800,	/* lslice */
	0x00009005,	/* anonlist */
	0x00009005,	/* anonhash */
	0x0a64d001,	/* splice */
	0x0008d01d,	/* push */
	0x0002ec04,	/* pop */
	0x0002ec04,	/* shift */
	0x0008d01d,	/* unshift */
	0x000b5001,	/* sort */
	0x00009009,	/* reverse */
	0x00095001,	/* grepstart */
	0x00000c08,	/* grepwhile */
	0x00095001,	/* mapstart */
	0x00000c08,	/* mapwhile */
	0x00044c00,	/* range */
	0x00044400,	/* flip */
	0x00000400,	/* flop */
	0x00000c00,	/* and */
	0x00000c00,	/* or */
	0x00044806,	/* xor */
	0x00000c00,	/* dor */
	0x00000d00,	/* cond_expr */
	0x00000c04,	/* andassign */
	0x00000c04,	/* orassign */
	0x00000c04,	/* dorassign */
	0x00003840,	/* method */
	0x00008441,	/* entersub */
	0x00008441,	/* enterxssub */
	0x00000400,	/* leavesub */
	0x00000400,	/* leavesublv */
	0x00026c08,	/* caller */
	0x0000900d,	/* warn */
	0x0000900d,	/* die */
	0x00026c04,	/* reset */
	0x00001100,	/* lineseq */
	0x00002804,	/* nextstate */
	0x00002804,	/* dbstate */
	0x00000004,	/* unstack */
	0x00000000,	/* enter */
	0x00001000,	/* leave */
	0x00001100,	/* scope */
	0x00002440,	/* enteriter */
	0x00000000,	/* iter */
	0x00002440,	/* enterloop */
	0x00000800,	/* leaveloop */
	0x00009001,	/* return */
	0x00003404,	/* last */
	0x00003404,	/* next */
	0x00003404,	/* redo */
	0x00003444,	/* dump */
	0x00003404,	/* goto */
	0x00026c04,	/* exit */
	0x00003840,	/* method_named */
	0x00003840,	/* method_super */
	0x00003840,	/* method_redir */
	0x00003840,	/* method_redir_super */
	0x00000c40,	/* entergiven */
	0x00000400,	/* leavegiven */
	0x00000c40,	/* enterwhen */
	0x00000400,	/* leavewhen */
	0x00000000,	/* break */
	0x00000000,	/* continue */
	0x00a5900d,	/* open */
	0x0003ac04,	/* close */
	0x00199004,	/* pipe_op */
	0x0001ac0c,	/* fileno */
	0x00026c0c,	/* umask */
	0x00259004,	/* binmode */
	0x0085d045,	/* tie */
	0x0001ec04,	/* untie */
	0x0001ec44,	/* tied */
	0x00451004,	/* dbmopen */
	0x00012c04,	/* dbmclose */
	0x04445008,	/* sselect */
	0x0003900c,	/* select */
	0x0003ac0c,	/* getc */
	0x245d900d,	/* read */
	0x0003ac04,	/* enterwrite */
	0x00000400,	/* leavewrite */
	0x000b9005,	/* prtf */
	0x000b9005,	/* print */
	0x000b9005,	/* say */
	0x24459004,	/* sysopen */
	0x00459004,	/* sysseek */
	0x245d900d,	/* sysread */
	0x2645900d,	/* syswrite */
	0x0003ac04,	/* eof */
	0x0003ac0c,	/* tell */
	0x00459004,	/* seek */
	0x00045004,	/* truncate */
	0x0045900c,	/* fcntl */
	0x0045900c,	/* ioctl */
	0x0005901c,	/* flock */
	0x2445900d,	/* send */
	0x045d900d,	/* recv */
	0x04459004,	/* socket */
	0x44599004,	/* sockpair */
	0x00059004,	/* bind */
	0x00059004,	/* connect */
	0x00059004,	/* listen */
	0x0019900c,	/* accept */
	0x0005900c,	/* shutdown */
	0x00459004,	/* gsockopt */
	0x04459004,	/* ssockopt */
	0x0001ac04,	/* getsockname */
	0x0001ac04,	/* getpeername */
	0x0003b080,	/* lstat */
	0x0003b080,	/* stat */
	0x0001b084,	/* ftrread */
	0x0001b084,	/* ftrwrite */
	0x0001b084,	/* ftrexec */
	0x0001b084,	/* fteread */
	0x0001b084,	/* ftewrite */
	0x0001b084,	/* fteexec */
	0x0001b084,	/* ftis */
	0x0001b08c,	/* ftsize */
	0x0001b08c,	/* ftmtime */
	0x0001b08c,	/* ftatime */
	0x0001b08c,	/* ftctime */
	0x0001b084,	/* ftrowned */
	0x0001b084,	/* fteowned */
	0x0001b084,	/* ftzero */
	0x0001b084,	/* ftsock */
	0x0001b084,	/* ftchr */
	0x0001b084,	/* ftblk */
	0x0001b084,	/* ftfile */
	0x0001b084,	/* ftdir */
	0x0001b084,	/* ftpipe */
	0x0001b084,	/* ftsuid */
	0x0001b084,	/* ftsgid */
	0x0001b084,	/* ftsvtx */
	0x0001b084,	/* ftlink */
	0x0001b004,	/* fttty */
	0x0001b084,	/* fttext */
	0x0001b084,	/* ftbinary */
	0x00026c1c,	/* chdir */
	0x0000901d,	/* chown */
	0x00026c9c,	/* chroot */
	0x0000909d,	/* unlink */
	0x0000901d,	/* chmod */
	0x0000901d,	/* utime */
	0x0004501c,	/* rename */
	0x0004501c,	/* link */
	0x0004501c,	/* symlink */
	0x00026c8c,	/* readlink */
	0x0026509c,	/* mkdir */
	0x00026c9c,	/* rmdir */
	0x00059004,	/* open_dir */
	0x0001ac00,	/* readdir */
	0x0001ac0c,	/* telldir */
	0x00059004,	/* seekdir */
	0x0001ac04,	/* rewinddir */
	0x0001ac04,	/* closedir */
	0x0000000c,	/* fork */
	0x0000001c,	/* wait */
	0x0004501c,	/* waitpid */
	0x000a501d,	/* system */
	0x000a501d,	/* exec */
	0x0000901d,	/* kill */
	0x0000001c,	/* getppid */
	0x00026c1c,	/* getpgrp */
	0x0026501c,	/* setpgrp */
	0x0004501c,	/* getpriority */
	0x0044501c,	/* setpriority */
	0x0000001c,	/* time */
	0x00000000,	/* tms */
	0x00026c08,	/* localtime */
	0x00026c08,	/* gmtime */
	0x00026c8c,	/* alarm */
	0x00026c1c,	/* sleep */
	0x0044500d,	/* shmget */
	0x0044500d,	/* shmctl */
	0x0444500d,	/* shmread */
	0x0444500d,	/* shmwrite */
	0x0004500d,	/* msgget */
	0x0044500d,	/* msgctl */
	0x0044500d,	/* msgsnd */
	0x4444500d,	/* msgrcv */
	0x0004500d,	/* semop */
	0x0044500d,	/* semget */
	0x0444500d,	/* semctl */
	0x00026cc4,	/* require */
	0x00004440,	/* dofile */
	0x00001804,	/* hintseval */
	0x00026cc0,	/* entereval */
	0x00004400,	/* leaveeval */
	0x00000c40,	/* entertry */
	0x00001000,	/* leavetry */
	0x00006c00,	/* ghbyname */
	0x00045000,	/* ghbyaddr */
	0x00000000,	/* ghostent */
	0x00006c00,	/* gnbyname */
	0x00045000,	/* gnbyaddr */
	0x00000000,	/* gnetent */
	0x00006c00,	/* gpbyname */
	0x00005000,	/* gpbynumber */
	0x00000000,	/* gprotoent */
	0x00045000,	/* gsbyname */
	0x00045000,	/* gsbyport */
	0x00000000,	/* gservent */
	0x00006c04,	/* shostent */
	0x00006c04,	/* snetent */
	0x00006c04,	/* sprotoent */
	0x00006c04,	/* sservent */
	0x00000004,	/* ehostent */
	0x00000004,	/* enetent */
	0x00000004,	/* eprotoent */
	0x00000004,	/* eservent */
	0x00006c00,	/* gpwnam */
	0x00006c00,	/* gpwuid */
	0x00000000,	/* gpwent */
	0x00000004,	/* spwent */
	0x00000004,	/* epwent */
	0x00006c00,	/* ggrnam */
	0x00006c00,	/* ggrgid */
	0x00000000,	/* ggrent */
	0x00000004,	/* sgrent */
	0x00000004,	/* egrent */
	0x0000000c,	/* getlogin */
	0x0008500d,	/* syscall */
	0x0001ec04,	/* lock */
	0x00000c00,	/* once */
	0x00000000,	/* custom */
	0x00006c40,	/* reach */
	0x00006c08,	/* rkeys */
	0x00006c48,	/* rvalues */
	0x00001800,	/* coreargs */
	0x00000004,	/* runcv */
	0x00026c8e,	/* fc */
	0x00000040,	/* padcv */
	0x00000040,	/* introcv */
	0x00000040,	/* clonecv */
	0x00000040,	/* padrange */
	0x00000844,	/* refassign */
	0x00002c40,	/* lvref */
	0x00001040,	/* lvrefslice */
	0x00002c40,	/* lvavref */
	0x00000444,	/* anonconst */
};
#endif

#endif /* !PERL_GLOBAL_STRUCT_INIT */

END_EXTERN_C


#define OPpLVREF_SV             0x00
#define OPpARG1_MASK            0x01
#define OPpCOREARGS_DEREF1      0x01
#define OPpENTERSUB_INARGS      0x01
#define OPpSORT_NUMERIC         0x01
#define OPpTRANS_FROM_UTF       0x01
#define OPpCONST_NOVER          0x02
#define OPpCOREARGS_DEREF2      0x02
#define OPpEVAL_HAS_HH          0x02
#define OPpFT_ACCESS            0x02
#define OPpGREP_LEX             0x02
#define OPpHINT_STRICT_REFS     0x02
#define OPpSORT_INTEGER         0x02
#define OPpTRANS_TO_UTF         0x02
#define OPpARG2_MASK            0x03
#define OPpCONST_SHORTCIRCUIT   0x04
#define OPpDONT_INIT_GV         0x04
#define OPpENTERSUB_HASTARG     0x04
#define OPpEVAL_UNICODE         0x04
#define OPpFT_STACKED           0x04
#define OPpITER_REVERSED        0x04
#define OPpLVREF_ELEM           0x04
#define OPpSLICEWARNING         0x04
#define OPpSORT_REVERSE         0x04
#define OPpTRANS_IDENTICAL      0x04
#define OPpARG3_MASK            0x07
#define OPpPADRANGE_COUNTSHIFT  0x07
#define OPpCONST_STRICT         0x08
#define OPpENTERSUB_AMPER       0x08
#define OPpEVAL_BYTES           0x08
#define OPpFT_STACKING          0x08
#define OPpITER_DEF             0x08
#define OPpLVREF_ITER           0x08
#define OPpMAYBE_LVSUB          0x08
#define OPpREVERSE_INPLACE      0x08
#define OPpSORT_INPLACE         0x08
#define OPpTRANS_SQUASH         0x08
#define OPpARG4_MASK            0x0f
#define OPpCONST_ENTERED        0x10
#define OPpDEREF_AV             0x10
#define OPpEVAL_COPHH           0x10
#define OPpFT_AFTER_t           0x10
#define OPpLVREF_AV             0x10
#define OPpMAYBE_TRUEBOOL       0x10
#define OPpMULTIDEREF_EXISTS    0x10
#define OPpOPEN_IN_RAW          0x10
#define OPpSORT_DESCEND         0x10
#define OPpSUBSTR_REPL_FIRST    0x10
#define OPpTARGET_MY            0x10
#define OPpDEREF_HV             0x20
#define OPpEARLY_CV             0x20
#define OPpEVAL_RE_REPARSING    0x20
#define OPpHUSH_VMSISH          0x20
#define OPpLEAVE_SP             0x20
#define OPpLVREF_HV             0x20
#define OPpMAY_RETURN_CONSTANT  0x20
#define OPpMULTIDEREF_DELETE    0x20
#define OPpOPEN_IN_CRLF         0x20
#define OPpSORT_QSORT           0x20
#define OPpTRANS_COMPLEMENT     0x20
#define OPpTRUEBOOL             0x20
#define OPpDEREF                0x30
#define OPpDEREF_SV             0x30
#define OPpLVREF_CV             0x30
#define OPpLVREF_TYPE           0x30
#define OPpALLOW_FAKE           0x40
#define OPpASSIGN_BACKWARDS     0x40
#define OPpASSIGN_COMMON        0x40
#define OPpCONST_BARE           0x40
#define OPpCOREARGS_SCALARMOD   0x40
#define OPpENTERSUB_DB          0x40
#define OPpEXISTS_SUB           0x40
#define OPpFLIP_LINENUM         0x40
#define OPpLIST_GUESSED         0x40
#define OPpLVAL_DEFER           0x40
#define OPpOPEN_OUT_RAW         0x40
#define OPpOUR_INTRO            0x40
#define OPpPAD_STATE            0x40
#define OPpREFCOUNTED           0x40
#define OPpREPEAT_DOLIST        0x40
#define OPpRUNTIME              0x40
#define OPpSLICE                0x40
#define OPpSORT_STABLE          0x40
#define OPpTRANS_GROWS          0x40
#define OPpPADRANGE_COUNTMASK   0x7f
#define OPpASSIGN_CV_TO_GV      0x80
#define OPpCOREARGS_PUSHMARK    0x80
#define OPpENTERSUB_NOPAREN     0x80
#define OPpLVALUE               0x80
#define OPpLVAL_INTRO           0x80
#define OPpOFFBYONE             0x80
#define OPpOPEN_OUT_CRLF        0x80
#define OPpPV_IS_UTF8           0x80
#define OPpSPLIT_IMPLIM         0x80
#define OPpTRANS_DELETE         0x80

START_EXTERN_C

#ifndef PERL_GLOBAL_STRUCT_INIT

#  ifndef DOINIT

/* data about the flags in op_private */

EXTCONST I16  PL_op_private_bitdef_ix[];
EXTCONST U16  PL_op_private_bitdefs[];
EXTCONST char PL_op_private_labels[];
EXTCONST I16  PL_op_private_bitfields[];
EXTCONST U8   PL_op_private_valid[];

#  else


/* PL_op_private_labels[]: the short descriptions of private flags.
 * All labels are concatenated into a single char array
 * (separated by \0's) for compactness.
 */

EXTCONST char PL_op_private_labels[] = {
    '$','M','O','D','\0',
    '+','1','\0',
    '-','\0',
    '<','U','T','F','\0',
    '>','U','T','F','\0',
    'A','M','P','E','R','\0',
    'A','V','\0',
    'B','A','R','E','\0',
    'B','K','W','A','R','D','\0',
    'B','O','O','L','\0',
    'B','O','O','L','?','\0',
    'B','Y','T','E','S','\0',
    'C','O','M','M','O','N','\0',
    'C','O','M','P','L','\0',
    'C','O','N','S','T','\0',
    'C','O','P','H','H','\0',
    'C','V','\0',
    'C','V','2','G','V','\0',
    'D','B','G','\0',
    'D','E','F','\0',
    'D','E','L','\0',
    'D','E','L','E','T','E','\0',
    'D','E','R','E','F','1','\0',
    'D','E','R','E','F','2','\0',
    'D','E','S','C','\0',
    'D','O','L','I','S','T','\0',
    'D','R','E','F','A','V','\0',
    'D','R','E','F','H','V','\0',
    'D','R','E','F','S','V','\0',
    'E','A','R','L','Y','C','V','\0',
    'E','L','E','M','\0',
    'E','N','T','E','R','E','D','\0',
    'E','X','I','S','T','S','\0',
    'F','A','K','E','\0',
    'F','T','A','C','C','E','S','S','\0',
    'F','T','A','F','T','E','R','t','\0',
    'F','T','S','T','A','C','K','E','D','\0',
    'F','T','S','T','A','C','K','I','N','G','\0',
    'G','R','E','P','L','E','X','\0',
    'G','R','O','W','S','\0',
    'G','U','E','S','S','E','D','\0',
    'H','A','S','_','H','H','\0',
    'H','U','S','H','\0',
    'H','V','\0',
    'I','D','E','N','T','\0',
    'I','M','P','L','I','M','\0',
    'I','N','A','R','G','S','\0',
    'I','N','B','I','N','\0',
    'I','N','C','R','\0',
    'I','N','P','L','A','C','E','\0',
    'I','N','T','\0',
    'I','T','E','R','\0',
    'L','I','N','E','N','U','M','\0',
    'L','V','\0',
    'L','V','D','E','F','E','R','\0',
    'L','V','I','N','T','R','O','\0',
    'L','V','S','U','B','\0',
    'M','A','R','K','\0',
    'N','O','(',')','\0',
    'N','O','I','N','I','T','\0',
    'N','O','V','E','R','\0',
    'N','U','M','\0',
    'O','U','R','I','N','T','R','\0',
    'O','U','T','B','I','N','\0',
    'O','U','T','C','R','\0',
    'Q','S','O','R','T','\0',
    'R','E','F','C','\0',
    'R','E','P','A','R','S','E','\0',
    'R','E','P','L','1','S','T','\0',
    'R','E','V','\0',
    'R','E','V','E','R','S','E','D','\0',
    'R','T','I','M','E','\0',
    'S','H','O','R','T','\0',
    'S','L','I','C','E','\0',
    'S','L','I','C','E','W','A','R','N','\0',
    'S','P','\0',
    'S','Q','U','A','S','H','\0',
    'S','T','A','B','L','E','\0',
    'S','T','A','T','E','\0',
    'S','T','R','I','C','T','\0',
    'S','U','B','\0',
    'S','V','\0',
    'T','A','R','G','\0',
    'T','A','R','G','M','Y','\0',
    'U','N','I','\0',
    'U','T','F','\0',

};



/* PL_op_private_bitfields[]: details about each bit field type.
 * Each definition consists of the following list of words:
 *    bitmin
 *    label (index into PL_op_private_labels[]; -1 if no label)
 *    repeat for each enum entry (if any):
 *       enum value
 *       enum label (index into PL_op_private_labels[])
 *    -1
 */

EXTCONST I16 PL_op_private_bitfields[] = {
    0, 8, -1,
    0, 8, -1,
    0, 8, -1,
    0, 8, -1,
    0, 8, -1,
    0, 8, -1,
<<<<<<<
    4, -1, 1, 137, 2, 144, 3, 151, -1,
    4, -1, 0, 495, 1, 26, 2, 264, 3, 83, -1,
=======
    4, -1, 1, 144, 2, 151, 3, 158, -1,
    4, -1, 0, 512, 1, 26, 2, 271, 3, 90, -1,
>>>>>>>

};


/* PL_op_private_bitdef_ix[]: map an op number to a starting position
 * in PL_op_private_bitdefs.  If -1, the op has no bits defined */

EXTCONST I16  PL_op_private_bitdef_ix[] = {
      -1, /* null */
      -1, /* stub */
       0, /* scalar */
       1, /* pushmark */
       3, /* wantarray */
       4, /* const */
       9, /* gvsv */
      11, /* gv */
      12, /* gelem */
      13, /* padsv */
      16, /* padav */
      20, /* padhv */
      -1, /* padany */
      26, /* pushre */
      28, /* sassign */
      31, /* aassign */
       0, /* chop */
       0, /* schop */
      34, /* chomp */
      34, /* schomp */
       0, /* defined */
       0, /* undef */
       0, /* study */
      36, /* pos */
       0, /* preinc */
       0, /* i_preinc */
       0, /* predec */
       0, /* i_predec */
       0, /* postinc */
       0, /* i_postinc */
       0, /* postdec */
       0, /* i_postdec */
      38, /* pow */
      38, /* multiply */
      38, /* i_multiply */
      38, /* u_multiply */
      38, /* divide */
      38, /* i_divide */
      38, /* modulo */
      38, /* i_modulo */
      40, /* repeat */
      38, /* add */
      38, /* i_add */
      38, /* u_add */
      38, /* subtract */
      38, /* i_subtract */
      38, /* concat */
      42, /* stringify */
      38, /* left_shift */
      38, /* right_shift */
      12, /* lt */
      12, /* i_lt */
      12, /* gt */
      12, /* i_gt */
      12, /* le */
      12, /* i_le */
      12, /* ge */
      12, /* i_ge */
      12, /* eq */
      12, /* i_eq */
      12, /* ne */
      12, /* i_ne */
      12, /* cmp */
      12, /* i_cmp */
      12, /* s_lt */
      12, /* s_gt */
      12, /* s_le */
      12, /* s_ge */
      12, /* s_eq */
      12, /* s_ne */
      12, /* s_cmp */
      12, /* bit_and */
      12, /* bit_xor */
      12, /* bit_or */
      38, /* i_bit_and */
      38, /* i_bit_xor */
      38, /* i_bit_or */
      12, /* s_bit_and */
      12, /* s_bit_xor */
      12, /* s_bit_or */
       0, /* negate */
       0, /* i_negate */
       0, /* not */
       0, /* complement */
      34, /* i_complement */
      34, /* s_complement */
      12, /* smartmatch */
      42, /* atan2 */
      34, /* sin */
      34, /* cos */
      42, /* rand */
      42, /* srand */
      34, /* exp */
      34, /* log */
      34, /* sqrt */
      34, /* int */
      34, /* hex */
      34, /* oct */
      34, /* abs */
      44, /* rv2gv */
      51, /* rv2sv */
      36, /* av2arylen */
      56, /* rv2cv */
      -1, /* anoncode */
       0, /* prototype */
       0, /* refgen */
       0, /* srefgen */
       0, /* ref */
      63, /* bless */
      64, /* backtick */
      63, /* glob */
       0, /* readline */
      -1, /* rcatline */
       0, /* regcmaybe */
       0, /* regcreset */
       0, /* regcomp */
      26, /* match */
      26, /* qr */
      26, /* subst */
      69, /* substcont */
      71, /* trans */
      71, /* transr */
      34, /* length */
      79, /* substr */
      82, /* vec */
      42, /* index */
      42, /* rindex */
      63, /* sprintf */
      63, /* formline */
      34, /* ord */
      34, /* chr */
      42, /* crypt */
       0, /* ucfirst */
       0, /* lcfirst */
       0, /* uc */
       0, /* lc */
       0, /* quotemeta */
      84, /* rv2av */
      90, /* aelemfast */
      90, /* aelemfast_lex */
      91, /* aelem */
      12, /* i_aelem */
      12, /* n_aelem */
      12, /* s_aelem */
      90, /* aelemfast_lex_u */
      82, /* aelem_u */
      12, /* i_aelem_u */
      12, /* n_aelem_u */
      12, /* s_aelem_u */
      96, /* aslice */
      99, /* kvaslice */
       0, /* aeach */
       0, /* akeys */
       0, /* avalues */
       0, /* each */
       0, /* values */
      36, /* keys */
     100, /* delete */
     103, /* exists */
     105, /* rv2hv */
      91, /* helem */
      96, /* hslice */
      99, /* kvhslice */
     113, /* multideref */
      63, /* unpack */
      63, /* pack */
     120, /* split */
      63, /* join */
     122, /* list */
      12, /* lslice */
      63, /* anonlist */
      63, /* anonhash */
      63, /* splice */
      42, /* push */
       0, /* pop */
       0, /* shift */
      42, /* unshift */
     124, /* sort */
     131, /* reverse */
     133, /* grepstart */
     133, /* grepwhile */
     133, /* mapstart */
     133, /* mapwhile */
       0, /* range */
     135, /* flip */
     135, /* flop */
       0, /* and */
       0, /* or */
      12, /* xor */
       0, /* dor */
     137, /* cond_expr */
       0, /* andassign */
       0, /* orassign */
       0, /* dorassign */
       0, /* method */
     139, /* entersub */
     139, /* enterxssub */
     146, /* leavesub */
     146, /* leavesublv */
     148, /* caller */
      63, /* warn */
      63, /* die */
      63, /* reset */
      -1, /* lineseq */
     150, /* nextstate */
     150, /* dbstate */
      -1, /* unstack */
      -1, /* enter */
     151, /* leave */
      -1, /* scope */
<<<<<<<
     153, /* enteriter */
     157, /* iter */
=======
     173, /* enteriter */
     177, /* iter */
>>>>>>>
      -1, /* enterloop */
<<<<<<<
     158, /* leaveloop */
=======
     178, /* leaveloop */
>>>>>>>
      -1, /* return */
<<<<<<<
     160, /* last */
     160, /* next */
     160, /* redo */
     160, /* dump */
     160, /* goto */
      63, /* exit */
=======
     180, /* last */
     180, /* next */
     180, /* redo */
     180, /* dump */
     180, /* goto */
      82, /* exit */
>>>>>>>
       0, /* method_named */
       0, /* method_super */
       0, /* method_redir */
       0, /* method_redir_super */
       0, /* entergiven */
       0, /* leavegiven */
       0, /* enterwhen */
       0, /* leavewhen */
      -1, /* break */
      -1, /* continue */
<<<<<<<
     162, /* open */
      63, /* close */
      63, /* pipe_op */
      63, /* fileno */
      63, /* umask */
      63, /* binmode */
      63, /* tie */
=======
     182, /* open */
      82, /* close */
      82, /* pipe_op */
      82, /* fileno */
      82, /* umask */
      82, /* binmode */
      82, /* tie */
>>>>>>>
       0, /* untie */
       0, /* tied */
      63, /* dbmopen */
       0, /* dbmclose */
      63, /* sselect */
      63, /* select */
      63, /* getc */
      63, /* read */
      63, /* enterwrite */
     146, /* leavewrite */
      -1, /* prtf */
      -1, /* print */
      -1, /* say */
      63, /* sysopen */
      63, /* sysseek */
      63, /* sysread */
      63, /* syswrite */
      63, /* eof */
      63, /* tell */
      63, /* seek */
      63, /* truncate */
      63, /* fcntl */
      63, /* ioctl */
      42, /* flock */
      63, /* send */
      63, /* recv */
      63, /* socket */
      63, /* sockpair */
      63, /* bind */
      63, /* connect */
      63, /* listen */
      63, /* accept */
      63, /* shutdown */
      63, /* gsockopt */
      63, /* ssockopt */
       0, /* getsockname */
       0, /* getpeername */
       0, /* lstat */
       0, /* stat */
<<<<<<<
     167, /* ftrread */
     167, /* ftrwrite */
     167, /* ftrexec */
     167, /* fteread */
     167, /* ftewrite */
     167, /* fteexec */
     172, /* ftis */
     172, /* ftsize */
     172, /* ftmtime */
     172, /* ftatime */
     172, /* ftctime */
     172, /* ftrowned */
     172, /* fteowned */
     172, /* ftzero */
     172, /* ftsock */
     172, /* ftchr */
     172, /* ftblk */
     172, /* ftfile */
     172, /* ftdir */
     172, /* ftpipe */
     172, /* ftsuid */
     172, /* ftsgid */
     172, /* ftsvtx */
     172, /* ftlink */
     172, /* fttty */
     172, /* fttext */
     172, /* ftbinary */
=======
     187, /* ftrread */
     187, /* ftrwrite */
     187, /* ftrexec */
     187, /* fteread */
     187, /* ftewrite */
     187, /* fteexec */
     192, /* ftis */
     192, /* ftsize */
     192, /* ftmtime */
     192, /* ftatime */
     192, /* ftctime */
     192, /* ftrowned */
     192, /* fteowned */
     192, /* ftzero */
     192, /* ftsock */
     192, /* ftchr */
     192, /* ftblk */
     192, /* ftfile */
     192, /* ftdir */
     192, /* ftpipe */
     192, /* ftsuid */
     192, /* ftsgid */
     192, /* ftsvtx */
     192, /* ftlink */
     192, /* fttty */
     192, /* fttext */
     192, /* ftbinary */
>>>>>>>
      42, /* chdir */
      42, /* chown */
      34, /* chroot */
      42, /* unlink */
      42, /* chmod */
      42, /* utime */
      42, /* rename */
      42, /* link */
      42, /* symlink */
       0, /* readlink */
      42, /* mkdir */
      34, /* rmdir */
      63, /* open_dir */
       0, /* readdir */
       0, /* telldir */
      63, /* seekdir */
       0, /* rewinddir */
       0, /* closedir */
      -1, /* fork */
<<<<<<<
     176, /* wait */
=======
     196, /* wait */
>>>>>>>
      42, /* waitpid */
      42, /* system */
      42, /* exec */
      42, /* kill */
<<<<<<<
     176, /* getppid */
=======
     196, /* getppid */
>>>>>>>
      42, /* getpgrp */
      42, /* setpgrp */
      42, /* getpriority */
      42, /* setpriority */
<<<<<<<
     176, /* time */
=======
     196, /* time */
>>>>>>>
      -1, /* tms */
       0, /* localtime */
      63, /* gmtime */
       0, /* alarm */
      42, /* sleep */
      63, /* shmget */
      63, /* shmctl */
      63, /* shmread */
      63, /* shmwrite */
      63, /* msgget */
      63, /* msgctl */
      63, /* msgsnd */
      63, /* msgrcv */
      63, /* semop */
      63, /* semget */
      63, /* semctl */
       0, /* require */
       0, /* dofile */
      -1, /* hintseval */
<<<<<<<
     177, /* entereval */
     146, /* leaveeval */
=======
     197, /* entereval */
     165, /* leaveeval */
>>>>>>>
       0, /* entertry */
      -1, /* leavetry */
       0, /* ghbyname */
      63, /* ghbyaddr */
      -1, /* ghostent */
       0, /* gnbyname */
      63, /* gnbyaddr */
      -1, /* gnetent */
       0, /* gpbyname */
      63, /* gpbynumber */
      -1, /* gprotoent */
      63, /* gsbyname */
      63, /* gsbyport */
      -1, /* gservent */
       0, /* shostent */
       0, /* snetent */
       0, /* sprotoent */
       0, /* sservent */
      -1, /* ehostent */
      -1, /* enetent */
      -1, /* eprotoent */
      -1, /* eservent */
       0, /* gpwnam */
       0, /* gpwuid */
      -1, /* gpwent */
      -1, /* spwent */
      -1, /* epwent */
       0, /* ggrnam */
       0, /* ggrgid */
      -1, /* ggrent */
      -1, /* sgrent */
      -1, /* egrent */
      -1, /* getlogin */
      63, /* syscall */
       0, /* lock */
       0, /* once */
      -1, /* custom */
       0, /* reach */
      36, /* rkeys */
       0, /* rvalues */
<<<<<<<
     183, /* coreargs */
=======
     203, /* coreargs */
>>>>>>>
       3, /* runcv */
       0, /* fc */
      -1, /* padcv */
      -1, /* introcv */
      -1, /* clonecv */
<<<<<<<
     187, /* padrange */
     189, /* refassign */
     195, /* lvref */
     201, /* lvrefslice */
     202, /* lvavref */
=======
     207, /* padrange */
     209, /* refassign */
     215, /* lvref */
     221, /* lvrefslice */
     222, /* lvavref */
>>>>>>>
       0, /* anonconst */

};



/* PL_op_private_bitdefs[]: given a starting position in this array (as
 * supplied by PL_op_private_bitdef_ix[]), each word (until a stop bit is
 * seen) defines the meaning of a particular op_private bit for a
 * particular op. Each word consists of:
 *  bit  0:     stop bit: this is the last bit def for the current op
 *  bit  1:     bitfield: if set, this defines a bit field rather than a flag
 *  bits 2..4:  unsigned number in the range 0..7 which is the bit number
 *  bits 5..15: unsigned number in the range 0..2047 which is an index
 *              into PL_op_private_labels[]    (for a flag), or
 *              into PL_op_private_bitfields[] (for a bit field)
 */

EXTCONST U16  PL_op_private_bitdefs[] = {
<<<<<<<
    0x0003, /* scalar, chop, schop, defined, undef, study, preinc, i_preinc, predec, i_predec, postinc, i_postinc, postdec, i_postdec, negate, i_negate, not, complement, prototype, refgen, srefgen, ref, readline, regcmaybe, regcreset, regcomp, ucfirst, lcfirst, uc, lc, quotemeta, aeach, akeys, avalues, each, values, pop, shift, range, and, or, dor, andassign, orassign, dorassign, method, method_named, method_super, method_redir, method_redir_super, entergiven, leavegiven, enterwhen, leavewhen, untie, tied, dbmclose, getsockname, getpeername, lstat, stat, readlink, readdir, telldir, rewinddir, closedir, localtime, alarm, require, dofile, entertry, ghbyname, gnbyname, gpbyname, shostent, snetent, sprotoent, sservent, gpwnam, gpwuid, ggrnam, ggrgid, lock, once, reach, rvalues, fc, anonconst */
    0x29dc, 0x3bd9, /* pushmark */
=======
    0x0003, /* scalar, chop, schop, defined, undef, study, preinc, i_preinc, predec, i_predec, postinc, i_postinc, postdec, i_postdec, negate, i_negate, not, complement, unbox_int, unbox_uint, unbox_str, unbox_num, prototype, refgen, srefgen, ref, readline, regcmaybe, regcreset, regcomp, ucfirst, lcfirst, uc, lc, quotemeta, aeach, akeys, avalues, each, values, pop, shift, range, and, or, dor, andassign, orassign, dorassign, method, method_named, method_super, method_redir, method_redir_super, entergiven, leavegiven, enterwhen, leavewhen, untie, tied, dbmclose, getsockname, getpeername, lstat, stat, readlink, readdir, telldir, rewinddir, closedir, localtime, alarm, require, dofile, entertry, ghbyname, gnbyname, gpbyname, shostent, snetent, sprotoent, sservent, gpwnam, gpwuid, ggrnam, ggrgid, lock, once, reach, rvalues, fc, anonconst */
    0x2abc, 0x3df9, /* pushmark */
>>>>>>>
    0x00bd, /* wantarray, runcv */
<<<<<<<
    0x03b8, 0x1570, 0x3c8c, 0x3748, 0x2da5, /* const */
    0x29dc, 0x2ef9, /* gvsv */
    0x13d5, /* gv */
    0x0067, /* gelem, lt, i_lt, gt, i_gt, le, i_le, ge, i_ge, eq, i_eq, ne, i_ne, cmp, i_cmp, s_lt, s_gt, s_le, s_ge, s_eq, s_ne, s_cmp, bit_and, bit_xor, bit_or, s_bit_and, s_bit_xor, s_bit_or, smartmatch, i_aelem, n_aelem, s_aelem, i_aelem_u, n_aelem_u, s_aelem_u, lslice, xor */
    0x29dc, 0x3bd8, 0x0257, /* padsv */
    0x29dc, 0x3bd8, 0x2acc, 0x38c9, /* padav */
    0x29dc, 0x3bd8, 0x0534, 0x05d0, 0x2acc, 0x38c9, /* padhv */
    0x3698, 0x3ef1, /* pushre, match, qr, subst */
    0x0adc, 0x0458, 0x0067, /* sassign */
    0x0758, 0x2acc, 0x0067, /* aassign */
    0x3ef0, 0x0003, /* chomp, schomp, i_complement, s_complement, sin, cos, exp, log, sqrt, int, hex, oct, abs, length, ord, chr, chroot, rmdir */
    0x2acc, 0x0003, /* pos, av2arylen, keys, rkeys */
    0x3ef0, 0x0067, /* pow, multiply, i_multiply, u_multiply, divide, i_divide, modulo, i_modulo, add, i_add, u_add, subtract, i_subtract, concat, left_shift, right_shift, i_bit_and, i_bit_xor, i_bit_or */
    0x1058, 0x0067, /* repeat */
    0x3ef0, 0x012f, /* stringify, atan2, rand, srand, index, rindex, crypt, push, unshift, flock, chdir, chown, unlink, chmod, utime, rename, link, symlink, mkdir, waitpid, system, exec, kill, getpgrp, setpgrp, getpriority, setpriority, sleep */
    0x29dc, 0x1758, 0x0256, 0x2acc, 0x2cc8, 0x3c84, 0x0003, /* rv2gv */
    0x29dc, 0x2ef8, 0x0256, 0x3c84, 0x0003, /* rv2sv */
    0x2c3c, 0x0b98, 0x08f4, 0x028c, 0x3e48, 0x3c84, 0x0003, /* rv2cv */
=======
    0x03b8, 0x1650, 0x3eac, 0x3908, 0x2f65, /* const */
    0x2abc, 0x30b9, /* gvsv */
    0x14b5, /* gv */
    0x0067, /* gelem, lt, i_lt, gt, i_gt, le, i_le, ge, i_ge, eq, i_eq, ne, i_ne, cmp, i_cmp, s_lt, s_gt, s_le, s_ge, s_eq, s_ne, s_cmp, bit_and, bit_xor, bit_or, s_bit_and, s_bit_xor, s_bit_or, smartmatch, int_sassign, uint_sassign, num_sassign, str_sassign, i_aelem, n_aelem, s_aelem, i_aelem_u, n_aelem_u, s_aelem_u, int_aelem, num_aelem, str_aelem, int_aelem_u, num_aelem_u, str_aelem_u, lslice, xor */
    0x2abc, 0x3df8, 0x0257, /* padsv */
    0x2abc, 0x3df8, 0x2bac, 0x3a89, /* padav */
    0x2abc, 0x3df8, 0x0534, 0x05d0, 0x2bac, 0x3a89, /* padhv */
    0x3858, 0x4111, /* pushre, match, qr, subst */
    0x0bbc, 0x0458, 0x0067, /* sassign */
    0x0838, 0x2bac, 0x0067, /* aassign */
    0x4110, 0x0003, /* chomp, schomp, i_complement, s_complement, sin, cos, exp, log, sqrt, int, hex, oct, abs, length, ord, chr, chroot, rmdir */
    0x2bac, 0x0003, /* pos, av2arylen, keys, rkeys */
    0x4110, 0x0067, /* pow, multiply, i_multiply, u_multiply, divide, i_divide, modulo, i_modulo, add, i_add, u_add, subtract, i_subtract, concat, left_shift, right_shift, i_bit_and, i_bit_xor, i_bit_or */
    0x1138, 0x0067, /* repeat */
    0x4110, 0x012f, /* stringify, atan2, rand, srand, index, rindex, crypt, push, unshift, flock, chdir, chown, unlink, chmod, utime, rename, link, symlink, mkdir, waitpid, system, exec, kill, getpgrp, setpgrp, getpriority, setpriority, sleep */
    0x41f8, 0x1650, 0x3eac, 0x3908, 0x2f65, /* int_const, uint_const, str_const, num_const */
    0x2abc, 0x2d18, 0x0256, 0x068d, /* int_padsv, uint_padsv, str_padsv, num_padsv */
    0x4110, 0x068c, 0x0067, /* uint_left_shift, uint_right_shift, uint_pow, int_add, int_subtract, int_multiply, int_divide, int_modulo, num_add, num_subtract, num_multiply, num_divide, num_atan2, num_pow */
    0x068c, 0x0003, /* uint_complement, int_preinc, int_predec, int_postinc, int_postdec, int_negate, int_not */
    0x4110, 0x068c, 0x0003, /* int_abs, num_sin, num_cos, num_exp, num_log, num_sqrt */
    0x068c, 0x0067, /* int_lt, int_gt, int_le, int_ge, int_eq, int_ne */
    0x2abc, 0x1838, 0x0256, 0x2bac, 0x2e88, 0x3ea4, 0x0003, /* rv2gv */
    0x2abc, 0x30b8, 0x0256, 0x3ea4, 0x0003, /* rv2sv */
    0x2dfc, 0x0c78, 0x09d4, 0x028c, 0x4068, 0x3ea4, 0x0003, /* rv2cv */
>>>>>>>
    0x012f, /* bless, glob, sprintf, formline, unpack, pack, join, anonlist, anonhash, splice, warn, die, reset, exit, close, pipe_op, fileno, umask, binmode, tie, dbmopen, sselect, select, getc, read, enterwrite, sysopen, sysseek, sysread, syswrite, eof, tell, seek, truncate, fcntl, ioctl, send, recv, socket, sockpair, bind, connect, listen, accept, shutdown, gsockopt, ssockopt, open_dir, seekdir, gmtime, shmget, shmctl, shmread, shmwrite, msgget, msgctl, msgsnd, msgrcv, semop, semget, semctl, ghbyaddr, gnbyaddr, gpbynumber, gsbyname, gsbyport, syscall */
<<<<<<<
    0x30dc, 0x2ff8, 0x24b4, 0x23f0, 0x0003, /* backtick */
    0x3698, 0x0003, /* substcont */
    0x0c9c, 0x1dd8, 0x0834, 0x3ef0, 0x3a0c, 0x2168, 0x01e4, 0x0141, /* trans, transr */
    0x33f0, 0x2acc, 0x00cb, /* substr */
    0x2acc, 0x0067, /* vec, aelem_u */
    0x29dc, 0x2ef8, 0x2acc, 0x38c8, 0x3c84, 0x0003, /* rv2av */
=======
    0x329c, 0x31b8, 0x2594, 0x24d0, 0x0003, /* backtick */
    0x3858, 0x0003, /* substcont */
    0x0d7c, 0x1eb8, 0x0914, 0x4110, 0x3c2c, 0x2248, 0x01e4, 0x0141, /* trans, transr */
    0x35b0, 0x2bac, 0x00cb, /* substr */
    0x2bac, 0x0067, /* vec, aelem_u */
    0x2abc, 0x30b8, 0x2bac, 0x3a88, 0x3ea4, 0x0003, /* rv2av */
>>>>>>>
    0x01ff, /* aelemfast, aelemfast_lex, aelemfast_lex_u */
<<<<<<<
    0x29dc, 0x28d8, 0x0256, 0x2acc, 0x0067, /* aelem, helem */
    0x29dc, 0x2acc, 0x38c9, /* aslice, hslice */
    0x2acd, /* kvaslice, kvhslice */
    0x29dc, 0x3818, 0x0003, /* delete */
    0x3d78, 0x0003, /* exists */
    0x29dc, 0x2ef8, 0x0534, 0x05d0, 0x2acc, 0x38c8, 0x3c84, 0x0003, /* rv2hv */
    0x29dc, 0x28d8, 0x0d14, 0x1670, 0x2acc, 0x3c84, 0x0003, /* multideref */
    0x223c, 0x2ef9, /* split */
    0x29dc, 0x1e99, /* list */
    0x3af8, 0x3194, 0x0fb0, 0x254c, 0x34e8, 0x2644, 0x2e61, /* sort */
    0x254c, 0x0003, /* reverse */
    0x1cc4, 0x0003, /* grepstart, grepwhile, mapstart, mapwhile */
    0x2778, 0x0003, /* flip, flop */
    0x29dc, 0x0003, /* cond_expr */
    0x29dc, 0x0b98, 0x0256, 0x028c, 0x3e48, 0x3c84, 0x2301, /* entersub, enterxssub */
    0x3258, 0x0003, /* leavesub, leavesublv, leavewrite, leaveeval */
=======
    0x2abc, 0x29b8, 0x0256, 0x2bac, 0x0067, /* aelem, helem */
    0x2abc, 0x2bac, 0x3a89, /* aslice, hslice */
    0x2bad, /* kvaslice, kvhslice */
    0x2abc, 0x39d8, 0x0003, /* delete */
    0x3f98, 0x0003, /* exists */
    0x2abc, 0x30b8, 0x0534, 0x05d0, 0x2bac, 0x3a88, 0x3ea4, 0x0003, /* rv2hv */
    0x2abc, 0x29b8, 0x0df4, 0x1750, 0x2bac, 0x3ea4, 0x0003, /* multideref */
    0x231c, 0x30b9, /* split */
    0x2abc, 0x1f79, /* list */
    0x3d18, 0x3354, 0x1090, 0x262c, 0x36a8, 0x2724, 0x3021, /* sort */
    0x262c, 0x0003, /* reverse */
    0x1da4, 0x0003, /* grepstart, grepwhile, mapstart, mapwhile */
    0x2858, 0x0003, /* flip, flop */
    0x2abc, 0x0003, /* cond_expr */
    0x2abc, 0x0c78, 0x0256, 0x028c, 0x4068, 0x3ea4, 0x23e1, /* entersub, enterxssub */
    0x3418, 0x0003, /* leavesub, leavesublv, leavewrite, leaveeval */
>>>>>>>
    0x00bc, 0x012f, /* caller */
<<<<<<<
    0x2075, /* nextstate, dbstate */
    0x287c, 0x3259, /* leave */
    0x29dc, 0x2ef8, 0x0c0c, 0x3569, /* enteriter */
    0x3569, /* iter */
    0x287c, 0x0067, /* leaveloop */
    0x405c, 0x0003, /* last, next, redo, dump, goto */
    0x30dc, 0x2ff8, 0x24b4, 0x23f0, 0x012f, /* open */
    0x1910, 0x1b6c, 0x1a28, 0x17e4, 0x0003, /* ftrread, ftrwrite, ftrexec, fteread, ftewrite, fteexec */
    0x1910, 0x1b6c, 0x1a28, 0x0003, /* ftis, ftsize, ftmtime, ftatime, ftctime, ftrowned, fteowned, ftzero, ftsock, ftchr, ftblk, ftfile, ftdir, ftpipe, ftsuid, ftsgid, ftsvtx, ftlink, fttty, fttext, ftbinary */
    0x3ef1, /* wait, getppid, time */
    0x32f4, 0x09b0, 0x068c, 0x3fc8, 0x1f84, 0x0003, /* entereval */
    0x2b9c, 0x0018, 0x0ec4, 0x0de1, /* coreargs */
    0x29dc, 0x019b, /* padrange */
    0x29dc, 0x3bd8, 0x0376, 0x26cc, 0x14c8, 0x0067, /* refassign */
    0x29dc, 0x3bd8, 0x0376, 0x26cc, 0x14c8, 0x0003, /* lvref */
    0x29dd, /* lvrefslice */
    0x29dc, 0x3bd8, 0x0003, /* lvavref */
=======
    0x2155, /* nextstate, dbstate */
    0x295c, 0x3418, 0x3bd5, /* leave */
    0x2abc, 0x30b8, 0x0cec, 0x3729, /* enteriter */
    0x3729, /* iter */
    0x295c, 0x0067, /* leaveloop */
    0x437c, 0x0003, /* last, next, redo, dump, goto */
    0x329c, 0x31b8, 0x2594, 0x24d0, 0x012f, /* open */
    0x19f0, 0x1c4c, 0x1b08, 0x18c4, 0x0003, /* ftrread, ftrwrite, ftrexec, fteread, ftewrite, fteexec */
    0x19f0, 0x1c4c, 0x1b08, 0x0003, /* ftis, ftsize, ftmtime, ftatime, ftctime, ftrowned, fteowned, ftzero, ftsock, ftchr, ftblk, ftfile, ftdir, ftpipe, ftsuid, ftsgid, ftsvtx, ftlink, fttty, fttext, ftbinary */
    0x4111, /* wait, getppid, time */
    0x34b4, 0x0a90, 0x076c, 0x42e8, 0x2064, 0x0003, /* entereval */
    0x2c7c, 0x0018, 0x0fa4, 0x0ec1, /* coreargs */
    0x2abc, 0x019b, /* padrange */
    0x2abc, 0x3df8, 0x0376, 0x27ac, 0x15a8, 0x0067, /* refassign */
    0x2abc, 0x3df8, 0x0376, 0x27ac, 0x15a8, 0x0003, /* lvref */
    0x2abd, /* lvrefslice */
    0x2abc, 0x3df8, 0x0003, /* lvavref */
>>>>>>>

};


/* PL_op_private_valid: for each op, indexed by op_type, indicate which
 * flags bits in op_private are legal */

EXTCONST U8 PL_op_private_valid[] = {
    /* NULL       */ (0xff),
    /* STUB       */ (0),
    /* SCALAR     */ (OPpARG1_MASK),
    /* PUSHMARK   */ (OPpPAD_STATE|OPpLVAL_INTRO),
    /* WANTARRAY  */ (OPpOFFBYONE),
    /* CONST      */ (OPpCONST_NOVER|OPpCONST_SHORTCIRCUIT|OPpCONST_STRICT|OPpCONST_ENTERED|OPpCONST_BARE),
    /* GVSV       */ (OPpOUR_INTRO|OPpLVAL_INTRO),
    /* GV         */ (OPpEARLY_CV),
    /* GELEM      */ (OPpARG2_MASK),
    /* PADSV      */ (OPpDEREF|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADAV      */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADHV      */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpPAD_STATE|OPpLVAL_INTRO),
    /* PADANY     */ (0),
    /* PUSHRE     */ (OPpTARGET_MY|OPpRUNTIME),
    /* SASSIGN    */ (OPpARG2_MASK|OPpASSIGN_BACKWARDS|OPpASSIGN_CV_TO_GV),
    /* AASSIGN    */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpASSIGN_COMMON),
    /* CHOP       */ (OPpARG1_MASK),
    /* SCHOP      */ (OPpARG1_MASK),
    /* CHOMP      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SCHOMP     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* DEFINED    */ (OPpARG1_MASK),
    /* UNDEF      */ (OPpARG1_MASK),
    /* STUDY      */ (OPpARG1_MASK),
    /* POS        */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* PREINC     */ (OPpARG1_MASK),
    /* I_PREINC   */ (OPpARG1_MASK),
    /* PREDEC     */ (OPpARG1_MASK),
    /* I_PREDEC   */ (OPpARG1_MASK),
    /* POSTINC    */ (OPpARG1_MASK),
    /* I_POSTINC  */ (OPpARG1_MASK),
    /* POSTDEC    */ (OPpARG1_MASK),
    /* I_POSTDEC  */ (OPpARG1_MASK),
    /* POW        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* MULTIPLY   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MULTIPLY */ (OPpARG2_MASK|OPpTARGET_MY),
    /* U_MULTIPLY */ (OPpARG2_MASK|OPpTARGET_MY),
    /* DIVIDE     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_DIVIDE   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* MODULO     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_MODULO   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* REPEAT     */ (OPpARG2_MASK|OPpREPEAT_DOLIST),
    /* ADD        */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_ADD      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* U_ADD      */ (OPpARG2_MASK|OPpTARGET_MY),
    /* SUBTRACT   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_SUBTRACT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* CONCAT     */ (OPpARG2_MASK|OPpTARGET_MY),
    /* STRINGIFY  */ (OPpARG4_MASK|OPpTARGET_MY),
    /* LEFT_SHIFT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* RIGHT_SHIFT */ (OPpARG2_MASK|OPpTARGET_MY),
    /* LT         */ (OPpARG2_MASK),
    /* I_LT       */ (OPpARG2_MASK),
    /* GT         */ (OPpARG2_MASK),
    /* I_GT       */ (OPpARG2_MASK),
    /* LE         */ (OPpARG2_MASK),
    /* I_LE       */ (OPpARG2_MASK),
    /* GE         */ (OPpARG2_MASK),
    /* I_GE       */ (OPpARG2_MASK),
    /* EQ         */ (OPpARG2_MASK),
    /* I_EQ       */ (OPpARG2_MASK),
    /* NE         */ (OPpARG2_MASK),
    /* I_NE       */ (OPpARG2_MASK),
    /* CMP        */ (OPpARG2_MASK),
    /* I_CMP      */ (OPpARG2_MASK),
    /* S_LT       */ (OPpARG2_MASK),
    /* S_GT       */ (OPpARG2_MASK),
    /* S_LE       */ (OPpARG2_MASK),
    /* S_GE       */ (OPpARG2_MASK),
    /* S_EQ       */ (OPpARG2_MASK),
    /* S_NE       */ (OPpARG2_MASK),
    /* S_CMP      */ (OPpARG2_MASK),
    /* BIT_AND    */ (OPpARG2_MASK),
    /* BIT_XOR    */ (OPpARG2_MASK),
    /* BIT_OR     */ (OPpARG2_MASK),
    /* I_BIT_AND  */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_BIT_XOR  */ (OPpARG2_MASK|OPpTARGET_MY),
    /* I_BIT_OR   */ (OPpARG2_MASK|OPpTARGET_MY),
    /* S_BIT_AND  */ (OPpARG2_MASK),
    /* S_BIT_XOR  */ (OPpARG2_MASK),
    /* S_BIT_OR   */ (OPpARG2_MASK),
    /* NEGATE     */ (OPpARG1_MASK),
    /* I_NEGATE   */ (OPpARG1_MASK),
    /* NOT        */ (OPpARG1_MASK),
    /* COMPLEMENT */ (OPpARG1_MASK),
    /* I_COMPLEMENT */ (OPpARG1_MASK|OPpTARGET_MY),
    /* S_COMPLEMENT */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SMARTMATCH */ (OPpARG2_MASK),
    /* ATAN2      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SIN        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* COS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* RAND       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SRAND      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXP        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* LOG        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SQRT       */ (OPpARG1_MASK|OPpTARGET_MY),
    /* INT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* HEX        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OCT        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* ABS        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* RV2GV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpDONT_INIT_GV|OPpMAYBE_LVSUB|OPpDEREF|OPpALLOW_FAKE|OPpLVAL_INTRO),
    /* RV2SV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpDEREF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AV2ARYLEN  */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* RV2CV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpMAY_RETURN_CONSTANT|OPpENTERSUB_DB|OPpENTERSUB_NOPAREN),
    /* ANONCODE   */ (0),
    /* PROTOTYPE  */ (OPpARG1_MASK),
    /* REFGEN     */ (OPpARG1_MASK),
    /* SREFGEN    */ (OPpARG1_MASK),
    /* REF        */ (OPpARG1_MASK),
    /* BLESS      */ (OPpARG4_MASK),
    /* BACKTICK   */ (OPpARG1_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* GLOB       */ (OPpARG4_MASK),
    /* READLINE   */ (OPpARG1_MASK),
    /* RCATLINE   */ (0),
    /* REGCMAYBE  */ (OPpARG1_MASK),
    /* REGCRESET  */ (OPpARG1_MASK),
    /* REGCOMP    */ (OPpARG1_MASK),
    /* MATCH      */ (OPpTARGET_MY|OPpRUNTIME),
    /* QR         */ (OPpTARGET_MY|OPpRUNTIME),
    /* SUBST      */ (OPpTARGET_MY|OPpRUNTIME),
    /* SUBSTCONT  */ (OPpARG1_MASK|OPpRUNTIME),
    /* TRANS      */ (OPpTRANS_FROM_UTF|OPpTRANS_TO_UTF|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTARGET_MY|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* TRANSR     */ (OPpTRANS_FROM_UTF|OPpTRANS_TO_UTF|OPpTRANS_IDENTICAL|OPpTRANS_SQUASH|OPpTARGET_MY|OPpTRANS_COMPLEMENT|OPpTRANS_GROWS|OPpTRANS_DELETE),
    /* LENGTH     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* SUBSTR     */ (OPpARG3_MASK|OPpMAYBE_LVSUB|OPpSUBSTR_REPL_FIRST),
    /* VEC        */ (OPpARG2_MASK|OPpMAYBE_LVSUB),
    /* INDEX      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RINDEX     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SPRINTF    */ (OPpARG4_MASK),
    /* FORMLINE   */ (OPpARG4_MASK),
    /* ORD        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CHR        */ (OPpARG1_MASK|OPpTARGET_MY),
    /* CRYPT      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UCFIRST    */ (OPpARG1_MASK),
    /* LCFIRST    */ (OPpARG1_MASK),
    /* UC         */ (OPpARG1_MASK),
    /* LC         */ (OPpARG1_MASK),
    /* QUOTEMETA  */ (OPpARG1_MASK),
    /* RV2AV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* AELEMFAST  */ (255),
    /* AELEMFAST_LEX */ (255),
    /* AELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* I_AELEM    */ (OPpARG2_MASK),
    /* N_AELEM    */ (OPpARG2_MASK),
    /* S_AELEM    */ (OPpARG2_MASK),
    /* AELEMFAST_LEX_U */ (255),
    /* AELEM_U    */ (OPpARG2_MASK|OPpMAYBE_LVSUB),
    /* I_AELEM_U  */ (OPpARG2_MASK),
    /* N_AELEM_U  */ (OPpARG2_MASK),
    /* S_AELEM_U  */ (OPpARG2_MASK),
    /* ASLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* KVASLICE   */ (OPpMAYBE_LVSUB),
    /* AEACH      */ (OPpARG1_MASK),
    /* AKEYS      */ (OPpARG1_MASK),
    /* AVALUES    */ (OPpARG1_MASK),
    /* EACH       */ (OPpARG1_MASK),
    /* VALUES     */ (OPpARG1_MASK),
    /* KEYS       */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* DELETE     */ (OPpARG1_MASK|OPpSLICE|OPpLVAL_INTRO),
    /* EXISTS     */ (OPpARG1_MASK|OPpEXISTS_SUB),
    /* RV2HV      */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpMAYBE_TRUEBOOL|OPpTRUEBOOL|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* HELEM      */ (OPpARG2_MASK|OPpMAYBE_LVSUB|OPpDEREF|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* HSLICE     */ (OPpSLICEWARNING|OPpMAYBE_LVSUB|OPpLVAL_INTRO),
    /* KVHSLICE   */ (OPpMAYBE_LVSUB),
    /* MULTIDEREF */ (OPpARG1_MASK|OPpHINT_STRICT_REFS|OPpMAYBE_LVSUB|OPpMULTIDEREF_EXISTS|OPpMULTIDEREF_DELETE|OPpLVAL_DEFER|OPpLVAL_INTRO),
    /* UNPACK     */ (OPpARG4_MASK),
    /* PACK       */ (OPpARG4_MASK),
    /* SPLIT      */ (OPpOUR_INTRO|OPpSPLIT_IMPLIM),
    /* JOIN       */ (OPpARG4_MASK),
    /* LIST       */ (OPpLIST_GUESSED|OPpLVAL_INTRO),
    /* LSLICE     */ (OPpARG2_MASK),
    /* ANONLIST   */ (OPpARG4_MASK),
    /* ANONHASH   */ (OPpARG4_MASK),
    /* SPLICE     */ (OPpARG4_MASK),
    /* PUSH       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* POP        */ (OPpARG1_MASK),
    /* SHIFT      */ (OPpARG1_MASK),
    /* UNSHIFT    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SORT       */ (OPpSORT_NUMERIC|OPpSORT_INTEGER|OPpSORT_REVERSE|OPpSORT_INPLACE|OPpSORT_DESCEND|OPpSORT_QSORT|OPpSORT_STABLE),
    /* REVERSE    */ (OPpARG1_MASK|OPpREVERSE_INPLACE),
    /* GREPSTART  */ (OPpARG1_MASK|OPpGREP_LEX),
    /* GREPWHILE  */ (OPpARG1_MASK|OPpGREP_LEX),
    /* MAPSTART   */ (OPpARG1_MASK|OPpGREP_LEX),
    /* MAPWHILE   */ (OPpARG1_MASK|OPpGREP_LEX),
    /* RANGE      */ (OPpARG1_MASK),
    /* FLIP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* FLOP       */ (OPpARG1_MASK|OPpFLIP_LINENUM),
    /* AND        */ (OPpARG1_MASK),
    /* OR         */ (OPpARG1_MASK),
    /* XOR        */ (OPpARG2_MASK),
    /* DOR        */ (OPpARG1_MASK),
    /* COND_EXPR  */ (OPpARG1_MASK|OPpLVAL_INTRO),
    /* ANDASSIGN  */ (OPpARG1_MASK),
    /* ORASSIGN   */ (OPpARG1_MASK),
    /* DORASSIGN  */ (OPpARG1_MASK),
    /* METHOD     */ (OPpARG1_MASK),
    /* ENTERSUB   */ (OPpENTERSUB_INARGS|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpDEREF|OPpENTERSUB_DB|OPpLVAL_INTRO),
    /* ENTERXSSUB */ (OPpENTERSUB_INARGS|OPpHINT_STRICT_REFS|OPpENTERSUB_HASTARG|OPpENTERSUB_AMPER|OPpDEREF|OPpENTERSUB_DB|OPpLVAL_INTRO),
    /* LEAVESUB   */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* LEAVESUBLV */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* CALLER     */ (OPpARG4_MASK|OPpOFFBYONE),
    /* WARN       */ (OPpARG4_MASK),
    /* DIE        */ (OPpARG4_MASK),
    /* RESET      */ (OPpARG4_MASK),
    /* LINESEQ    */ (0),
    /* NEXTSTATE  */ (OPpHUSH_VMSISH),
    /* DBSTATE    */ (OPpHUSH_VMSISH),
    /* UNSTACK    */ (0),
    /* ENTER      */ (0),
    /* LEAVE      */ (OPpLEAVE_SP|OPpREFCOUNTED|OPpLVALUE),
    /* SCOPE      */ (0),
    /* ENTERITER  */ (OPpITER_REVERSED|OPpITER_DEF|OPpOUR_INTRO|OPpLVAL_INTRO),
    /* ITER       */ (OPpITER_REVERSED),
    /* ENTERLOOP  */ (0),
    /* LEAVELOOP  */ (OPpARG2_MASK|OPpLVALUE),
    /* RETURN     */ (0),
    /* LAST       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* NEXT       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* REDO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* DUMP       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* GOTO       */ (OPpARG1_MASK|OPpPV_IS_UTF8),
    /* EXIT       */ (OPpARG4_MASK),
    /* METHOD_NAMED */ (OPpARG1_MASK),
    /* METHOD_SUPER */ (OPpARG1_MASK),
    /* METHOD_REDIR */ (OPpARG1_MASK),
    /* METHOD_REDIR_SUPER */ (OPpARG1_MASK),
    /* ENTERGIVEN */ (OPpARG1_MASK),
    /* LEAVEGIVEN */ (OPpARG1_MASK),
    /* ENTERWHEN  */ (OPpARG1_MASK),
    /* LEAVEWHEN  */ (OPpARG1_MASK),
    /* BREAK      */ (0),
    /* CONTINUE   */ (0),
    /* OPEN       */ (OPpARG4_MASK|OPpOPEN_IN_RAW|OPpOPEN_IN_CRLF|OPpOPEN_OUT_RAW|OPpOPEN_OUT_CRLF),
    /* CLOSE      */ (OPpARG4_MASK),
    /* PIPE_OP    */ (OPpARG4_MASK),
    /* FILENO     */ (OPpARG4_MASK),
    /* UMASK      */ (OPpARG4_MASK),
    /* BINMODE    */ (OPpARG4_MASK),
    /* TIE        */ (OPpARG4_MASK),
    /* UNTIE      */ (OPpARG1_MASK),
    /* TIED       */ (OPpARG1_MASK),
    /* DBMOPEN    */ (OPpARG4_MASK),
    /* DBMCLOSE   */ (OPpARG1_MASK),
    /* SSELECT    */ (OPpARG4_MASK),
    /* SELECT     */ (OPpARG4_MASK),
    /* GETC       */ (OPpARG4_MASK),
    /* READ       */ (OPpARG4_MASK),
    /* ENTERWRITE */ (OPpARG4_MASK),
    /* LEAVEWRITE */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* PRTF       */ (0),
    /* PRINT      */ (0),
    /* SAY        */ (0),
    /* SYSOPEN    */ (OPpARG4_MASK),
    /* SYSSEEK    */ (OPpARG4_MASK),
    /* SYSREAD    */ (OPpARG4_MASK),
    /* SYSWRITE   */ (OPpARG4_MASK),
    /* EOF        */ (OPpARG4_MASK),
    /* TELL       */ (OPpARG4_MASK),
    /* SEEK       */ (OPpARG4_MASK),
    /* TRUNCATE   */ (OPpARG4_MASK),
    /* FCNTL      */ (OPpARG4_MASK),
    /* IOCTL      */ (OPpARG4_MASK),
    /* FLOCK      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SEND       */ (OPpARG4_MASK),
    /* RECV       */ (OPpARG4_MASK),
    /* SOCKET     */ (OPpARG4_MASK),
    /* SOCKPAIR   */ (OPpARG4_MASK),
    /* BIND       */ (OPpARG4_MASK),
    /* CONNECT    */ (OPpARG4_MASK),
    /* LISTEN     */ (OPpARG4_MASK),
    /* ACCEPT     */ (OPpARG4_MASK),
    /* SHUTDOWN   */ (OPpARG4_MASK),
    /* GSOCKOPT   */ (OPpARG4_MASK),
    /* SSOCKOPT   */ (OPpARG4_MASK),
    /* GETSOCKNAME */ (OPpARG1_MASK),
    /* GETPEERNAME */ (OPpARG1_MASK),
    /* LSTAT      */ (OPpARG1_MASK),
    /* STAT       */ (OPpARG1_MASK),
    /* FTRREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTRWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTREXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEREAD    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEWRITE   */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEEXEC    */ (OPpARG1_MASK|OPpFT_ACCESS|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTIS       */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSIZE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTMTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTATIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCTIME    */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTROWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTEOWNED   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTZERO     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSOCK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTCHR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBLK      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTFILE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTDIR      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTPIPE     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSUID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSGID     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTSVTX     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTLINK     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTTY      */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTTEXT     */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* FTBINARY   */ (OPpARG1_MASK|OPpFT_STACKED|OPpFT_STACKING|OPpFT_AFTER_t),
    /* CHDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHOWN      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHROOT     */ (OPpARG1_MASK|OPpTARGET_MY),
    /* UNLINK     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* CHMOD      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* UTIME      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RENAME     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* LINK       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYMLINK    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* READLINK   */ (OPpARG1_MASK),
    /* MKDIR      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* RMDIR      */ (OPpARG1_MASK|OPpTARGET_MY),
    /* OPEN_DIR   */ (OPpARG4_MASK),
    /* READDIR    */ (OPpARG1_MASK),
    /* TELLDIR    */ (OPpARG1_MASK),
    /* SEEKDIR    */ (OPpARG4_MASK),
    /* REWINDDIR  */ (OPpARG1_MASK),
    /* CLOSEDIR   */ (OPpARG1_MASK),
    /* FORK       */ (0),
    /* WAIT       */ (OPpTARGET_MY),
    /* WAITPID    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SYSTEM     */ (OPpARG4_MASK|OPpTARGET_MY),
    /* EXEC       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* KILL       */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPPID    */ (OPpTARGET_MY),
    /* GETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPGRP    */ (OPpARG4_MASK|OPpTARGET_MY),
    /* GETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SETPRIORITY */ (OPpARG4_MASK|OPpTARGET_MY),
    /* TIME       */ (OPpTARGET_MY),
    /* TMS        */ (0),
    /* LOCALTIME  */ (OPpARG1_MASK),
    /* GMTIME     */ (OPpARG4_MASK),
    /* ALARM      */ (OPpARG1_MASK),
    /* SLEEP      */ (OPpARG4_MASK|OPpTARGET_MY),
    /* SHMGET     */ (OPpARG4_MASK),
    /* SHMCTL     */ (OPpARG4_MASK),
    /* SHMREAD    */ (OPpARG4_MASK),
    /* SHMWRITE   */ (OPpARG4_MASK),
    /* MSGGET     */ (OPpARG4_MASK),
    /* MSGCTL     */ (OPpARG4_MASK),
    /* MSGSND     */ (OPpARG4_MASK),
    /* MSGRCV     */ (OPpARG4_MASK),
    /* SEMOP      */ (OPpARG4_MASK),
    /* SEMGET     */ (OPpARG4_MASK),
    /* SEMCTL     */ (OPpARG4_MASK),
    /* REQUIRE    */ (OPpARG1_MASK),
    /* DOFILE     */ (OPpARG1_MASK),
    /* HINTSEVAL  */ (0),
    /* ENTEREVAL  */ (OPpARG1_MASK|OPpEVAL_HAS_HH|OPpEVAL_UNICODE|OPpEVAL_BYTES|OPpEVAL_COPHH|OPpEVAL_RE_REPARSING),
    /* LEAVEEVAL  */ (OPpARG1_MASK|OPpREFCOUNTED),
    /* ENTERTRY   */ (OPpARG1_MASK),
    /* LEAVETRY   */ (0),
    /* GHBYNAME   */ (OPpARG1_MASK),
    /* GHBYADDR   */ (OPpARG4_MASK),
    /* GHOSTENT   */ (0),
    /* GNBYNAME   */ (OPpARG1_MASK),
    /* GNBYADDR   */ (OPpARG4_MASK),
    /* GNETENT    */ (0),
    /* GPBYNAME   */ (OPpARG1_MASK),
    /* GPBYNUMBER */ (OPpARG4_MASK),
    /* GPROTOENT  */ (0),
    /* GSBYNAME   */ (OPpARG4_MASK),
    /* GSBYPORT   */ (OPpARG4_MASK),
    /* GSERVENT   */ (0),
    /* SHOSTENT   */ (OPpARG1_MASK),
    /* SNETENT    */ (OPpARG1_MASK),
    /* SPROTOENT  */ (OPpARG1_MASK),
    /* SSERVENT   */ (OPpARG1_MASK),
    /* EHOSTENT   */ (0),
    /* ENETENT    */ (0),
    /* EPROTOENT  */ (0),
    /* ESERVENT   */ (0),
    /* GPWNAM     */ (OPpARG1_MASK),
    /* GPWUID     */ (OPpARG1_MASK),
    /* GPWENT     */ (0),
    /* SPWENT     */ (0),
    /* EPWENT     */ (0),
    /* GGRNAM     */ (OPpARG1_MASK),
    /* GGRGID     */ (OPpARG1_MASK),
    /* GGRENT     */ (0),
    /* SGRENT     */ (0),
    /* EGRENT     */ (0),
    /* GETLOGIN   */ (0),
    /* SYSCALL    */ (OPpARG4_MASK),
    /* LOCK       */ (OPpARG1_MASK),
    /* ONCE       */ (OPpARG1_MASK),
    /* CUSTOM     */ (0xff),
    /* REACH      */ (OPpARG1_MASK),
    /* RKEYS      */ (OPpARG1_MASK|OPpMAYBE_LVSUB),
    /* RVALUES    */ (OPpARG1_MASK),
    /* COREARGS   */ (OPpCOREARGS_DEREF1|OPpCOREARGS_DEREF2|OPpCOREARGS_SCALARMOD|OPpCOREARGS_PUSHMARK),
    /* RUNCV      */ (OPpOFFBYONE),
    /* FC         */ (OPpARG1_MASK),
    /* PADCV      */ (0),
    /* INTROCV    */ (0),
    /* CLONECV    */ (0),
    /* PADRANGE   */ (OPpPADRANGE_COUNTMASK|OPpLVAL_INTRO),
    /* REFASSIGN  */ (OPpARG2_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREF      */ (OPpARG1_MASK|OPpLVREF_ELEM|OPpLVREF_ITER|OPpLVREF_TYPE|OPpPAD_STATE|OPpLVAL_INTRO),
    /* LVREFSLICE */ (OPpLVAL_INTRO),
    /* LVAVREF    */ (OPpARG1_MASK|OPpPAD_STATE|OPpLVAL_INTRO),
    /* ANONCONST  */ (OPpARG1_MASK),

};

#  endif /* !DOINIT */
#endif /* !PERL_GLOBAL_STRUCT_INIT */

END_EXTERN_C



/* ex: set ro: */
