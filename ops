{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1491729068,"metadata":{"github-id":"MDU6SXNzdWUyMjA0NTg3NTU=","github-url":"https://github.com/perl11/cperl/issues/266","origin":"github"},"title":"switch to PCRE2 with jit (evtl. Hyperscan with fallback)","message":"PCRE2 is about 40% faster,\nmore compatible than perl5 in most cases,\nhas an acceptable code quality unlike our old slow 2-pass spencer regcomp/regexec code with setjmp/longjmp logic and iteration over recursion,\nhas minor cornercase problems: empty \\N names, \\B{}, see http://www.pcre.org/current/doc/html/pcre2compat.html,\nonly one major blocking bug https://github.com/rurban/re-engine-PCRE2/issues/15\nand overall almost less regex bugs than older perls. Which is relevant when writing portable code.\nSee https://github.com/rurban/re-engine-PCRE2/#failing-tests\n\nFor the cornercases we can always fallback to the old core re engine, maybe as dynamic module.\nIn the current tests it's the other way round. PCRE2 as dynamic module falls back to core. Need stats (dtrace probes?)\n\nWith boolean matches only, without capture groups, backtracking, ...\nand only on Intel CPUs, also try use the much faster Hyperscan engine, \nif provided by the system (c++ and very new Boost). \nE.g. only the latest 2 Ubuntu's, not the LTE, not on travis.\nSee https://github.com/rurban/re-engine-Hyperscan and https://rust-leipzig.github.io/regex/2017/03/28/comparison-of-regex-engines/ (3x faster than pcre2-jit)","files":null}]}