{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1500445613,"metadata":{"github-id":"MDU6SXNzdWUyNDM5MzQ3NDc=","github-url":"https://github.com/perl11/cperl/issues/307","origin":"github"},"title":"new enum type?","message":"See https://docs.perl6.org/language/typesystem#index-entry-Enumeration-_Enums-_enum\nBasically constant typed arrays (Int or Str), starting with 0, with auto-incrementing values which can be overridden by using an optional pair syntax in the decl.\n\nThe current perl6 design is a bit *unfortunate* (i.e. broken), \nas barewords don't return the value, but the name,\nand they look now like hashes, not arrays.\n`enum Names ( name1 =\u003e 1, name2 =\u003e 2 );`\n`say name1, ' ', name2; # OUTPUT: «name1 name2␤»`\nand you need to manually expand it: `say name1.value, ' ', name2.value; # OUTPUT: «1 2␤»`\nand not the other way round, as expected. They also say Number, not Int. (i.e. + Num, Rat. Wonder how to increment those).\n\nThe old design was correct: https://design.perl6.org/S12.html#Enumerations\nThat is,\n```\n     enum E \u003ca b c\u003e;\n```\nis largely syntactic sugar for:\n```\n     package E {\n        constant a = 0;\n        constant b = 1;\n        constant c = 2;\n    }\n```\n\nThe cperl plan is:\n```\nenum E (a b c);\nenum E1 (d =\u003e 1, e, f);  # but not the perl6 syntax: `enum E (:a(1), b c);` \nenum E2 (g, h =\u003e 4, i);  # pairs allowed everywhere \nprint a; # OUTPUT: «1»   but not «a»\n\nenum E3 (j =\u003e 1.0, k, l); # =\u003e error: Invalid enum type Num 1.0\n```","files":null}]}