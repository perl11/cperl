{"version":1,"ops":[{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537859634,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzM3MzQ5Mg=="},"target":"1b4de78d65443a0a536926c0528d475bba65b6ec4aee9cded0ede78025cdac31","message":"A direct method call with :: stays utf8,\nbut a method call with -\u003e strips the utf8 flags.\nIn cperl this leads to an invalid identifier error under strict names.\n\n`'use utf8; package Føø::Bær { sub nèw { bless {}, shift }} Føø::Bær-\u003enèw'`\n\nFøø::Bær::nèw() keeps the METHOP/ENTERSUB utf8 flag in the GV SVOP.\nBut with Føø::Bær-\u003enèw() the nèw is stored interim as shared pvn, which strips off the utf8 to be stored in the strtab - `newSVpvn_share: bytes_from_utf8 \u0026is_utf8` - which leads to the conversion to the entersub gv without the utf8 flag. Even the WAS_UTF8 flag is not stored!","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537872499,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzQ1MTgzNg=="},"target":"1b4de78d65443a0a536926c0528d475bba65b6ec4aee9cded0ede78025cdac31","message":"A direct method call with :: stays utf8,\nbut a method call with -\u003e strips the utf8 flags.\nIn cperl this leads to an invalid identifier error under strict names.\n\n`'use utf8; package Føø::Bær { sub nèw { bless {}, shift }} Føø::Bær-\u003enèw'`\n\nFøø::Bær::nèw() keeps the METHOP/ENTERSUB utf8 flag in the GV SVOP.\nBut with Føø::Bær-\u003enèw() the nèw is stored interim as shared pvn, which strips off the utf8 to be stored in the strtab - `newSVpvn_share: bytes_from_utf8 \u0026is_utf8` - which leads to the conversion to the entersub gv without the utf8 flag. Even the WAS_UTF8 flag is not stored!\n\nThe fix needs to be backported to v.5.28.1c","files":null},{"type":5,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537859344,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDE4NjQ4ODYwMDE="},"added":["bug"],"removed":[]},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537859833,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNDIzMzEyNw==","github-url":"https://github.com/perl11/cperl/issues/377#issuecomment-424233127"},"message":"The fix is to pass was_utf8 to sharepvn() in newSVpvn_share()","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537859833,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzM3NDU4NQ=="},"target":"cdea1ba144ec9604aa671751d70c40863bd39d02ee72298c24cd3c655881cd59","message":"The fix is to pass was_utf8 to sharepvn() in newSVpvn_share()\n```\n--- sv.c\n+++ sv.c\n@@ -9584,12 +9584,12 @@ Perl_newSVpvn_share(pTHX_ const char *src, I32 len, U32 hash)\n {\n     dVAR;\n     SV *sv;\n-    bool is_utf8 = FALSE;\n+    bool was_utf8 = len \u003c 0 ? TRUE : FALSE;\n+    bool is_utf8 = was_utf8;\n     const char *const orig_src = src;\n \n-    if (len \u003c 0) {\n+    if (is_utf8) {\n        STRLEN tmplen = -len;\n-        is_utf8 = TRUE;\n        /* See the note in hv.c:hv_fetch() --jhi */\n        src = (char*)bytes_from_utf8((const U8*)src, \u0026tmplen, \u0026is_utf8);\n        len = tmplen;\n@@ -9600,7 +9600,7 @@ Perl_newSVpvn_share(pTHX_ const char *src, I32 len, U32 hash)\n     /* The logic for this is inlined in S_mro_get_linear_isa_dfs(), so if it\n        changes here, update it there too.  */\n     sv_upgrade(sv, SVt_PV);\n-    SvPV_set(sv, sharepvn(src, is_utf8?-len:len, hash));\n+    SvPV_set(sv, sharepvn(src, was_utf8?-len:len, hash));\n     SvCUR_set(sv, len);\n     SvLEN_set(sv, 0);\n     SvIsCOW_on(sv);\n```","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537860085,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzM3NjIwMQ=="},"target":"cdea1ba144ec9604aa671751d70c40863bd39d02ee72298c24cd3c655881cd59","message":"The first part of a fix is to pass was_utf8 to sharepvn() in newSVpvn_share()\n```\n--- sv.c\n+++ sv.c\n@@ -9584,12 +9584,12 @@ Perl_newSVpvn_share(pTHX_ const char *src, I32 len, U32 hash)\n {\n     dVAR;\n     SV *sv;\n-    bool is_utf8 = FALSE;\n+    bool was_utf8 = len \u003c 0 ? TRUE : FALSE;\n+    bool is_utf8 = was_utf8;\n     const char *const orig_src = src;\n \n-    if (len \u003c 0) {\n+    if (is_utf8) {\n        STRLEN tmplen = -len;\n-        is_utf8 = TRUE;\n        /* See the note in hv.c:hv_fetch() --jhi */\n        src = (char*)bytes_from_utf8((const U8*)src, \u0026tmplen, \u0026is_utf8);\n        len = tmplen;\n@@ -9600,7 +9600,7 @@ Perl_newSVpvn_share(pTHX_ const char *src, I32 len, U32 hash)\n     /* The logic for this is inlined in S_mro_get_linear_isa_dfs(), so if it\n        changes here, update it there too.  */\n     sv_upgrade(sv, SVt_PV);\n-    SvPV_set(sv, sharepvn(src, is_utf8?-len:len, hash));\n+    SvPV_set(sv, sharepvn(src, was_utf8?-len:len, hash));\n     SvCUR_set(sv, len);\n     SvLEN_set(sv, 0);\n     SvIsCOW_on(sv);\n```","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537870568,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQyNDI4NTg1Ng==","github-url":"https://github.com/perl11/cperl/issues/377#issuecomment-424285856"},"message":"The second part fixes valid_ident to use isIDCONT_LC instead of isIDCONT_A which returns false on \u003e128chars. This works then fine also for downgraded strings","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537870568,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzQ0MTMwMw=="},"target":"3aeef76a1e5b5c56d1b6216b41dd1607d57143e13fe21827001461c8ab46a346","message":"The second part fixes valid_ident to use isIDCONT_LC instead of isIDCONT_A which returns false on \u003e128chars. This works then fine also for downgraded strings.\nThis allows locale specific identifiers. (L1 would be locale independent)","files":null},{"type":6,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1537872556,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDEzMzQ1MjIyMA=="},"target":"3aeef76a1e5b5c56d1b6216b41dd1607d57143e13fe21827001461c8ab46a346","message":"The second part fixes valid_ident to use isIDCONT_LC or L1 (locale specific or not) instead of isIDCONT_A which returns false on \u003e128chars. This works then fine also for downgraded strings.\nLC allows locale specific identifiers. L1 would be locale independent. Since most such strings are already downgraded from utf8, we need to use L1","files":null},{"type":4,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1538049971,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTg3MDg3MjIwNA=="},"status":2}]}