{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1444035362,"metadata":{"github-id":"MDU6SXNzdWUxMDk3NTQ5NDE=","github-url":"https://github.com/perl11/cperl/issues/62","origin":"github"},"title":"static AV/HV/CV","message":"Add AvSTATIC, HvSTATIC and CvSTATIC bits for the alloc ptrs.\nto protect them from free on scope exit, and global destruction.\n\nThis allows the compiler to statically allocate the {A,H}vARRAY arrays and PAD lists, and add COW or COG (copy-on-write, copy-on-grow)\n\nWe have 3 options in the compiler: \n- COW: put the static SV*\\* array as const into the .rodata segment. writes trigger cow, set SVf_READONLY and AvSTATIC flags\n- COG: put the static SV*\\* array not as const into the .data segment. writes are ok, extends trigger cow. AvSTATIC flag only.\n- no static SV*\\* array, dynamic alloc in the compiler init, (preferably with ptmalloc3 _independent_comalloc and -fav-init2), no cow. no SVf_READONLY, no AvSTATIC.\n\nFor PADLIST (xpadl_alloc) and PADNAMELIST (xpadnl_alloc) we have no bit, \nbut those only change when a function is redefined. So use a CvFLAGS bit.\n\nAvSTATIC is tricky: I try using the combination of `!AvREAL(av) \u0026 !AvREIFY(av)`.\n`!AvREAL(av)` is only used with `@_`. Better would be to special case accessors for `@_` and \nhave these 2 flags then freed for us.\nThe alternative would be to add an av_aux field at the end of the array, or a special AvFLAGS word in the body.\nBut the best alternative is to use the `SVf_IsCOW` flag for AvSTATIC (=COG) and together with `SVf_READONLY` add COW.\n\nHvSTATIC and CvSTATIC is easy, there's enough room for it.","files":null}]}