{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1520508783,"metadata":{"github-id":"MDU6SXNzdWUzMDM0NDg2NzU=","github-url":"https://github.com/perl11/cperl/issues/357","origin":"github"},"title":"fix double-free in fclose of already closed stdio handle","message":"\"Avoid newGVgen in default typemap\" in 6da090e6cb9d18c5db3bb70c8c4d0c7e58183273 (5.27.7) introduced a new test for PerlIO_exportFILE which closes STDIN when going out of scope (even if inc'ing the PerlIO refcnt. It does dup stdin after the close though), and then again in global destruction, leading to closing stdin twice, which is fatal on glibc. We need to fix the double-close.\n\nperl5 went on to disable the crashing test.\nWe rather fix the cause by preventing a double close.\n\nBut the underlying issue for the T_STDIO typemap and PerlIO_exportFILE is completely wrong.\nIf the 1st arg is a global GV or LV or string just keep this symbol. Introducing a new anon sym for an already named and global sym is unexpected and avoidable.\nOnly if it's a lexical (IO, RV) we need to gensym it. \nUsing this new `__ANONIO__` GV is always wrong, as there may be more than one XS IO handle per package.\nThen if the IO was already open, just bump the fd refcnt, to avoid the close when the temp. name goes out of scope.\n\nSee a392cd572ea910ba86fa5188d894273ffbdbd2de for the fix.","files":null}]}