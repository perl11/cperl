{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1478504530,"metadata":{"github-id":"MDU6SXNzdWUxODc2NDQyOTc=","github-url":"https://github.com/perl11/cperl/issues/219","origin":"github"},"title":"study possibly broken rpeep PL_op vs o","message":"867fa1e2da145229b4d by demerphq 2009 used `cLOGOP-\u003e` and not `cLOGOPo-\u003e` in rpeep() for boolkeys, PL_op instead of o.\nWonder why this worked at all. (in fact there are subtle bugs for long).\n\nAlso 24fcb59fc Father Chrysostomos  2011 with right = cBINOP-\u003eop_first in SASSIGN.\nBut it started earlier, 29f2e9126 Nicholas Clark 2007-04-06 with cPMOP-\u003e in OP_SUBST\n58cccf98a Stephen McCamant 2001 cLOOP-\u003eop_nextop\nAnd the first: fd4d14078 Ilya Zakharevich 1998, cLOGOP-\u003eop_other.\n\nThese look wrong: SUBST, LOGIC shortcuts, SASSIGN, MATCH/QR, SORT, KVHSLICE, ENTERITER, ENTERLOOP, COND_EXPR, MAPWHILE, GREPWHILE, logASSIGN, RANGE, ONCE, ...\n\nMost of the new rpeep ops do look wrong, but need only to check the rpeep code of these guys, the others are ok.\n\n-------\nThe explanation is a0d0e21e Larry Wall 1994, which already copies the local o to the global PL_op before processing each op. So it's not a bug, just a potential bug and bad style.\n`PL_op` could serve as `o` backup here.","files":null}]}