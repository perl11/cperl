{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1441997248,"metadata":{"github-id":"MDU6SXNzdWUxMDYwNjkyNjI=","github-url":"https://github.com/perl11/cperl/issues/17","origin":"github"},"title":"... for efficient varargs passing","message":"`...` in sigs for the stack pointer as in other languages, and not as in perl5+6 for empty bodies only.\nthis is better than passing @_ through, which needs to copy the args. ... just passes the mark stack pointer through\n\n`...` as empty function body already has a special meaning as `yadayada`\noperator, just croaking, but interestingly not the usual meaning of varargs.\n\ncperl uses `...` in the natural way to denote unnamed and uncopied\nrest args, and passes the varargs through to the next call.\n\n`...` denotes a slurpy unnamed signature, and `...` in a otherwise\nnon-empy function body denotes passing those arguments efficiently to\nthe next function.  Internally `...` does not need to copy the values\ninto a temporary array, we just need to pass the argument stack\nposition down to the next calls using `...`. By using `...` instead\nof `@_` we can avoid copying the values to `@_`, we only need the stack\nindex, not all the values.\n\n```\nsub foometh($self, ...) { func(...) }\n```","files":null}]}