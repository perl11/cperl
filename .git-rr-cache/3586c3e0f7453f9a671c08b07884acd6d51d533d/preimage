/* ex: set ro ft=c: -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 119 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 3:
#line 123 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 129 "perly.y"
    {
			  parser->expect = XTERM;
			}
    break;

  case 5:
#line 133 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 138 "perly.y"
    {
			  parser->expect = XBLOCK;
			}
    break;

  case 7:
#line 142 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 8:
#line 150 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 9:
#line 154 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 10:
#line 162 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 11:
#line 166 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 12:
#line 174 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 13:
#line 178 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 186 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 194 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 201 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 206 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 213 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 219 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 20:
#line 221 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 230 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 22:
#line 232 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 241 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 245 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 249 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 26:
#line 253 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 27:
#line 260 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 28:
#line 262 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}
    break;

  case 29:
#line 272 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
                        }
    break;

  case 30:
<<<<<<<
#line 291 "perly.y"
=======
#line 294 "perly.y"
>>>>>>>
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
<<<<<<<
#line 302 "perly.y"
=======
#line 305 "perly.y"
>>>>>>>
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
                          CvFLAGS(PL_compcv) |= (ps[(1) - (3)].val.ival);
			}
    break;

  case 32:
<<<<<<<
#line 325 "perly.y"
=======
#line 327 "perly.y"
>>>>>>>
    {
			  OP *sig = (ps[(6) - (10)].val.opval), *body = (ps[(9) - (10)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (10)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
<<<<<<<
#line 342 "perly.y"
=======
#line 349 "perly.y"
>>>>>>>
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 34:
<<<<<<<
#line 349 "perly.y"
=======
#line 356 "perly.y"
>>>>>>>
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
    break;

  case 35:
<<<<<<<
#line 351 "perly.y"
=======
#line 358 "perly.y"
>>>>>>>
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 36:
<<<<<<<
#line 358 "perly.y"
=======
#line 365 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 37:
<<<<<<<
#line 364 "perly.y"
=======
#line 371 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 38:
<<<<<<<
#line 370 "perly.y"
=======
#line 377 "perly.y"
>>>>>>>
    {
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 39:
<<<<<<<
#line 381 "perly.y"
=======
#line 388 "perly.y"
>>>>>>>
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
    break;

  case 40:
<<<<<<<
#line 383 "perly.y"
=======
#line 390 "perly.y"
>>>>>>>
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
    break;

  case 41:
<<<<<<<
#line 385 "perly.y"
=======
#line 392 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 42:
<<<<<<<
#line 392 "perly.y"
=======
#line 399 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 43:
<<<<<<<
#line 399 "perly.y"
=======
#line 406 "perly.y"
>>>>>>>
    { parser->expect = XTERM; }
    break;

  case 44:
<<<<<<<
#line 401 "perly.y"
=======
#line 408 "perly.y"
>>>>>>>
    { parser->expect = XTERM; }
    break;

  case 45:
<<<<<<<
#line 404 "perly.y"
=======
#line 411 "perly.y"
>>>>>>>
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 46:
<<<<<<<
#line 419 "perly.y"
=======
#line 426 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 47:
<<<<<<<
#line 424 "perly.y"
=======
#line 431 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 48:
<<<<<<<
#line 430 "perly.y"
=======
#line 437 "perly.y"
>>>>>>>
    { parser->in_my = 0; (yyval.opval) = my((ps[(5) - (5)].val.opval)); }
    break;

  case 49:
<<<<<<<
#line 432 "perly.y"
=======
#line 439 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end(
				(ps[(4) - (11)].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[(6) - (11)].val.opval)),
					    OP_ENTERLOOP),
					 (ps[(8) - (11)].val.opval), (ps[(10) - (11)].val.opval), (ps[(11) - (11)].val.opval))
			  );
			  parser->copline = (line_t)(ps[(1) - (11)].val.ival);
			}
    break;

  case 50:
<<<<<<<
#line 445 "perly.y"
=======
#line 452 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[(3) - (9)].val.opval)),
					     OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 51:
<<<<<<<
#line 453 "perly.y"
=======
#line 460 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 52:
<<<<<<<
#line 459 "perly.y"
=======
#line 466 "perly.y"
>>>>>>>
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 53:
<<<<<<<
#line 465 "perly.y"
=======
#line 472 "perly.y"
>>>>>>>
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 54:
<<<<<<<
#line 472 "perly.y"
=======
#line 479 "perly.y"
>>>>>>>
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 55:
<<<<<<<
#line 480 "perly.y"
=======
#line 487 "perly.y"
>>>>>>>
    {
			  package((ps[(2) - (4)].val.opval));
			}
    break;

  case 56:
<<<<<<<
#line 484 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(4) - (7)].val.ival), (ps[(6) - (7)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(3) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(3) - (7)].val.ival);
			}
    break;

  case 57:
#line 492 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

  case 58:
#line 496 "perly.y"
=======
#line 491 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = (OP*)NULL;
			  parser->copline = NOLINE;
			}
    break;

<<<<<<<
  case 57:
#line 499 "perly.y"
=======
  case 59:
#line 504 "perly.y"
>>>>>>>
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
    break;

<<<<<<<
  case 58:
#line 516 "perly.y"
=======
  case 60:
#line 521 "perly.y"
>>>>>>>
    { (yyval.opval) = NULL; }
    break;

<<<<<<<
  case 59:
#line 518 "perly.y"
=======
  case 61:
#line 523 "perly.y"
>>>>>>>
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
    break;

<<<<<<<
  case 60:
#line 523 "perly.y"
=======
  case 62:
#line 528 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 61:
#line 525 "perly.y"
=======
  case 63:
#line 530 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 62:
#line 527 "perly.y"
=======
  case 64:
#line 532 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 63:
#line 529 "perly.y"
=======
  case 65:
#line 534 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 64:
#line 531 "perly.y"
=======
  case 66:
#line 536 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 65:
#line 533 "perly.y"
=======
  case 67:
#line 538 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 66:
#line 535 "perly.y"
=======
  case 68:
#line 540 "perly.y"
>>>>>>>
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
    break;

<<<<<<<
  case 67:
#line 538 "perly.y"
=======
  case 69:
#line 543 "perly.y"
>>>>>>>
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
    break;

<<<<<<<
  case 68:
#line 543 "perly.y"
=======
  case 70:
#line 548 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 69:
#line 545 "perly.y"
=======
  case 71:
#line 550 "perly.y"
>>>>>>>
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

<<<<<<<
  case 70:
#line 550 "perly.y"
=======
  case 72:
#line 555 "perly.y"
>>>>>>>
    { parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

<<<<<<<
  case 71:
#line 560 "perly.y"
=======
  case 73:
#line 565 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 72:
#line 562 "perly.y"
=======
  case 74:
#line 567 "perly.y"
>>>>>>>
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 73:
#line 567 "perly.y"
=======
  case 75:
#line 572 "perly.y"
>>>>>>>
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

<<<<<<<
  case 74:
#line 573 "perly.y"
=======
  case 76:
#line 578 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 76:
#line 579 "perly.y"
=======
  case 78:
#line 584 "perly.y"
>>>>>>>
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
    break;

<<<<<<<
  case 78:
#line 587 "perly.y"
=======
  case 80:
#line 592 "perly.y"
>>>>>>>
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
    break;

<<<<<<<
  case 79:
#line 592 "perly.y"
=======
  case 81:
#line 597 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

<<<<<<<
  case 80:
#line 596 "perly.y"
=======
  case 82:
#line 601 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

<<<<<<<
  case 81:
#line 600 "perly.y"
=======
  case 83:
#line 605 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
    break;

<<<<<<<
  case 82:
#line 603 "perly.y"
=======
  case 84:
#line 608 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 83:
#line 604 "perly.y"
=======
  case 85:
#line 609 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 84:
#line 608 "perly.y"
=======
  case 86:
#line 612 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 87:
#line 613 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 88:
#line 614 "perly.y"
    { (yyval.ival) = (ps[(1) - (1)].val.ival); }
    break;

  case 89:
#line 618 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 85:
#line 614 "perly.y"
=======
  case 90:
#line 623 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 86:
#line 619 "perly.y"
=======
  case 91:
#line 628 "perly.y"
>>>>>>>
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

<<<<<<<
  case 89:
#line 630 "perly.y"
=======
  case 94:
#line 639 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 91:
#line 636 "perly.y"
=======
  case 96:
#line 645 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 92:
#line 638 "perly.y"
=======
  case 97:
#line 647 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

<<<<<<<
  case 93:
#line 640 "perly.y"
=======
  case 98:
#line 649 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 94:
#line 645 "perly.y"
=======
  case 99:
#line 654 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

<<<<<<<
  case 100:
#line 656 "perly.y"
=======
  case 95:
#line 647 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 101:
#line 661 "perly.y"
=======
  case 96:
#line 651 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = parse_subsignature();
			  parser->expect = XATTRBLOCK;
			}
    break;

<<<<<<<
  case 102:
#line 671 "perly.y"
=======
  case 97:
#line 656 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = (ps[(2) - (3)].val.ival);
			  parser->expect = XATTRBLOCK;
			}
    break;

<<<<<<<
  case 104:
#line 680 "perly.y"
=======
  case 99:
#line 664 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 100:
#line 669 "perly.y"
=======
  case 105:
#line 685 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 101:
#line 671 "perly.y"
=======
  case 106:
#line 687 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 102:
#line 673 "perly.y"
=======
  case 107:
#line 689 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 104:
#line 679 "perly.y"
=======
  case 109:
#line 695 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
    break;

<<<<<<<
  case 105:
#line 681 "perly.y"
=======
  case 110:
#line 697 "perly.y"
>>>>>>>
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
    break;

<<<<<<<
  case 107:
#line 690 "perly.y"
=======
  case 112:
#line 706 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			}
    break;

<<<<<<<
  case 108:
#line 694 "perly.y"
=======
  case 113:
#line 710 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			}
    break;

<<<<<<<
  case 109:
#line 698 "perly.y"
=======
  case 114:
#line 714 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			}
    break;

<<<<<<<
  case 110:
#line 704 "perly.y"
=======
  case 115:
#line 720 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			}
    break;

<<<<<<<
  case 111:
#line 709 "perly.y"
=======
  case 116:
#line 725 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			}
    break;

<<<<<<<
  case 112:
#line 715 "perly.y"
=======
  case 117:
#line 731 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
    break;

<<<<<<<
  case 113:
#line 721 "perly.y"
=======
  case 118:
#line 737 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 114:
#line 723 "perly.y"
=======
  case 119:
#line 739 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

<<<<<<<
  case 115:
#line 725 "perly.y"
=======
  case 120:
#line 741 "perly.y"
>>>>>>>
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 116:
#line 728 "perly.y"
=======
  case 121:
#line 744 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
    break;

<<<<<<<
  case 119:
#line 743 "perly.y"
=======
  case 124:
#line 759 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
    break;

<<<<<<<
  case 120:
#line 745 "perly.y"
=======
  case 125:
#line 761 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
    break;

<<<<<<<
  case 121:
#line 748 "perly.y"
=======
  case 126:
#line 764 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			}
    break;

<<<<<<<
  case 122:
#line 753 "perly.y"
=======
  case 127:
#line 769 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			}
    break;

<<<<<<<
  case 123:
#line 758 "perly.y"
=======
  case 128:
#line 774 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
    break;

<<<<<<<
  case 124:
#line 761 "perly.y"
=======
  case 129:
#line 777 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
    break;

<<<<<<<
  case 125:
#line 765 "perly.y"
=======
  case 130:
#line 781 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
    break;

<<<<<<<
  case 126:
#line 769 "perly.y"
=======
  case 131:
#line 785 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval)))); }
    break;

<<<<<<<
  case 127:
#line 772 "perly.y"
=======
  case 132:
#line 788 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval))))); }
    break;

<<<<<<<
  case 128:
#line 777 "perly.y"
=======
  case 133:
#line 793 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval))))); }
    break;

<<<<<<<
  case 129:
#line 781 "perly.y"
=======
  case 134:
#line 797 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval)))); }
    break;

<<<<<<<
  case 130:
#line 784 "perly.y"
=======
  case 135:
#line 800 "perly.y"
>>>>>>>
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
    break;

<<<<<<<
  case 131:
#line 786 "perly.y"
=======
  case 136:
#line 802 "perly.y"
>>>>>>>
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 132:
#line 788 "perly.y"
=======
  case 137:
#line 804 "perly.y"
>>>>>>>
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL); }
    break;

<<<<<<<
  case 133:
#line 793 "perly.y"
=======
  case 138:
#line 809 "perly.y"
>>>>>>>
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 134:
#line 795 "perly.y"
=======
  case 139:
#line 811 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 135:
#line 797 "perly.y"
=======
  case 140:
#line 813 "perly.y"
>>>>>>>
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

<<<<<<<
  case 136:
#line 802 "perly.y"
=======
  case 141:
#line 818 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 137:
#line 804 "perly.y"
=======
  case 142:
#line 820 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 138:
#line 806 "perly.y"
=======
  case 143:
#line 822 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 139:
#line 808 "perly.y"
=======
  case 144:
#line 824 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 140:
#line 810 "perly.y"
=======
  case 145:
#line 826 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 141:
#line 812 "perly.y"
=======
  case 146:
#line 828 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 142:
#line 814 "perly.y"
=======
  case 147:
#line 830 "perly.y"
>>>>>>>
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
    break;

<<<<<<<
  case 143:
#line 816 "perly.y"
=======
  case 148:
#line 832 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 144:
#line 818 "perly.y"
=======
  case 149:
#line 834 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 145:
#line 820 "perly.y"
=======
  case 150:
#line 836 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 146:
#line 822 "perly.y"
=======
  case 151:
#line 838 "perly.y"
>>>>>>>
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 147:
#line 827 "perly.y"
=======
  case 152:
#line 843 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

<<<<<<<
  case 148:
#line 829 "perly.y"
=======
  case 153:
#line 845 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

<<<<<<<
  case 149:
#line 832 "perly.y"
=======
  case 154:
#line 848 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

<<<<<<<
  case 150:
#line 834 "perly.y"
=======
  case 155:
#line 850 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

<<<<<<<
  case 151:
#line 836 "perly.y"
=======
  case 156:
#line 852 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
    break;

<<<<<<<
  case 152:
#line 839 "perly.y"
=======
  case 157:
#line 855 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

<<<<<<<
  case 153:
#line 842 "perly.y"
=======
  case 158:
#line 858 "perly.y"
>>>>>>>
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
    break;

<<<<<<<
  case 154:
#line 853 "perly.y"
=======
  case 159:
#line 869 "perly.y"
>>>>>>>
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }
    break;

<<<<<<<
  case 155:
#line 856 "perly.y"
=======
  case 160:
#line 872 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
    break;

<<<<<<<
  case 156:
#line 859 "perly.y"
=======
  case 161:
#line 875 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
    break;

<<<<<<<
  case 157:
#line 866 "perly.y"
=======
  case 162:
#line 882 "perly.y"
>>>>>>>
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
    break;

<<<<<<<
  case 158:
#line 868 "perly.y"
=======
  case 163:
#line 884 "perly.y"
>>>>>>>
    { (yyval.opval) = newANONLIST((OP*)NULL);}
    break;

<<<<<<<
  case 159:
#line 870 "perly.y"
=======
  case 164:
#line 886 "perly.y"
>>>>>>>
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
    break;

<<<<<<<
  case 160:
#line 872 "perly.y"
=======
  case 165:
#line 888 "perly.y"
>>>>>>>
    { (yyval.opval) = newANONHASH((OP*)NULL); }
    break;

<<<<<<<
  case 161:
#line 874 "perly.y"
=======
  case 166:
#line 890 "perly.y"
>>>>>>>
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

<<<<<<<
  case 162:
#line 877 "perly.y"
=======
  case 167:
#line 893 "perly.y"
>>>>>>>
    {
			  OP *sig = (ps[(4) - (8)].val.opval), *body = (ps[(7) - (8)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && (!sig || !OpHAS_SIBLING(sig)))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
			}
    break;

<<<<<<<
  case 163:
#line 896 "perly.y"
=======
  case 168:
#line 907 "perly.y"
>>>>>>>
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
    break;

<<<<<<<
  case 164:
#line 898 "perly.y"
=======
  case 169:
#line 909 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
    break;

<<<<<<<
  case 169:
#line 906 "perly.y"
=======
  case 174:
#line 917 "perly.y"
>>>>>>>
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

<<<<<<<
  case 170:
#line 908 "perly.y"
=======
  case 175:
#line 919 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 171:
#line 910 "perly.y"
=======
  case 176:
#line 921 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 172:
#line 912 "perly.y"
=======
  case 177:
#line 923 "perly.y"
>>>>>>>
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

<<<<<<<
  case 173:
#line 914 "perly.y"
=======
  case 178:
#line 925 "perly.y"
>>>>>>>
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

<<<<<<<
  case 174:
#line 916 "perly.y"
=======
  case 179:
#line 927 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 175:
#line 918 "perly.y"
=======
  case 180:
#line 929 "perly.y"
>>>>>>>
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

<<<<<<<
  case 176:
#line 920 "perly.y"
=======
  case 181:
#line 931 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 177:
#line 922 "perly.y"
=======
  case 182:
#line 933 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 178:
#line 924 "perly.y"
=======
  case 183:
#line 935 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 179:
#line 926 "perly.y"
=======
  case 184:
#line 937 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 180:
#line 928 "perly.y"
=======
  case 185:
#line 939 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
    break;

<<<<<<<
  case 181:
#line 930 "perly.y"
=======
  case 186:
#line 941 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 182:
#line 932 "perly.y"
=======
  case 187:
#line 943 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 183:
#line 942 "perly.y"
=======
  case 188:
#line 953 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 184:
#line 952 "perly.y"
=======
  case 189:
#line 963 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 185:
#line 962 "perly.y"
=======
  case 190:
#line 973 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 186:
#line 972 "perly.y"
=======
  case 191:
#line 983 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 187:
#line 974 "perly.y"
=======
  case 192:
#line 985 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
    break;

<<<<<<<
  case 188:
#line 976 "perly.y"
=======
  case 193:
#line 987 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
    break;

<<<<<<<
  case 189:
#line 979 "perly.y"
=======
  case 194:
#line 990 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			}
    break;

<<<<<<<
  case 190:
#line 984 "perly.y"
=======
  case 195:
#line 995 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
			}
    break;

<<<<<<<
  case 191:
#line 988 "perly.y"
=======
  case 196:
#line 999 "perly.y"
>>>>>>>
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 192:
#line 990 "perly.y"
=======
  case 197:
#line 1001 "perly.y"
>>>>>>>
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 193:
#line 992 "perly.y"
=======
  case 198:
#line 1003 "perly.y"
>>>>>>>
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 194:
#line 994 "perly.y"
=======
  case 199:
#line 1005 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
    break;

<<<<<<<
  case 195:
#line 997 "perly.y"
=======
  case 200:
#line 1008 "perly.y"
>>>>>>>
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 196:
#line 999 "perly.y"
=======
  case 201:
#line 1010 "perly.y"
>>>>>>>
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
    break;

<<<<<<<
  case 197:
#line 1002 "perly.y"
=======
  case 202:
#line 1013 "perly.y"
>>>>>>>
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 198:
#line 1004 "perly.y"
=======
  case 203:
#line 1015 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
    break;

<<<<<<<
  case 199:
#line 1006 "perly.y"
=======
  case 204:
#line 1017 "perly.y"
>>>>>>>
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

<<<<<<<
  case 200:
#line 1008 "perly.y"
=======
  case 205:
#line 1019 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 201:
#line 1010 "perly.y"
=======
  case 206:
#line 1021 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 202:
#line 1012 "perly.y"
=======
  case 207:
#line 1023 "perly.y"
>>>>>>>
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
    break;

<<<<<<<
  case 203:
#line 1014 "perly.y"
=======
  case 208:
#line 1025 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 204:
#line 1016 "perly.y"
=======
  case 209:
#line 1027 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

<<<<<<<
  case 205:
#line 1018 "perly.y"
=======
  case 210:
#line 1029 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
    break;

<<<<<<<
  case 206:
#line 1021 "perly.y"
=======
  case 211:
#line 1032 "perly.y"
>>>>>>>
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
    break;

<<<<<<<
  case 207:
#line 1023 "perly.y"
=======
  case 212:
#line 1034 "perly.y"
>>>>>>>
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
    break;

<<<<<<<
  case 208:
#line 1025 "perly.y"
=======
  case 213:
#line 1036 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 209:
#line 1027 "perly.y"
=======
  case 214:
#line 1038 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
    break;

<<<<<<<
  case 210:
#line 1029 "perly.y"
=======
  case 215:
#line 1040 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
    break;

<<<<<<<
  case 211:
#line 1031 "perly.y"
=======
  case 216:
#line 1042 "perly.y"
>>>>>>>
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
    break;

<<<<<<<
  case 212:
#line 1035 "perly.y"
=======
  case 217:
#line 1046 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

<<<<<<<
  case 213:
#line 1037 "perly.y"
=======
  case 218:
#line 1048 "perly.y"
>>>>>>>
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
    break;

<<<<<<<
  case 214:
#line 1048 "perly.y"
=======
  case 219:
#line 1059 "perly.y"
>>>>>>>
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
    break;

<<<<<<<
  case 217:
#line 1052 "perly.y"
=======
  case 222:
#line 1063 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
			}
    break;

<<<<<<<
  case 219:
#line 1061 "perly.y"
=======
  case 224:
#line 1072 "perly.y"
>>>>>>>
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
    break;

<<<<<<<
  case 220:
#line 1063 "perly.y"
=======
  case 225:
#line 1074 "perly.y"
>>>>>>>
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
    break;

<<<<<<<
  case 221:
#line 1068 "perly.y"
=======
  case 226:
#line 1079 "perly.y"
>>>>>>>
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
    break;

<<<<<<<
  case 222:
#line 1070 "perly.y"
=======
  case 227:
#line 1081 "perly.y"
>>>>>>>
    { (yyval.opval) = sawparens(newNULLLIST()); }
    break;

<<<<<<<
  case 223:
#line 1073 "perly.y"
=======
  case 228:
#line 1084 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 224:
#line 1075 "perly.y"
=======
  case 229:
#line 1086 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 225:
#line 1077 "perly.y"
=======
  case 230:
#line 1088 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 226:
#line 1079 "perly.y"
=======
  case 231:
#line 1090 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 227:
#line 1084 "perly.y"
=======
  case 232:
#line 1095 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 228:
#line 1086 "perly.y"
=======
  case 233:
#line 1097 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 229:
#line 1090 "perly.y"
=======
  case 234:
#line 1101 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 230:
#line 1092 "perly.y"
=======
  case 235:
#line 1103 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

<<<<<<<
  case 231:
#line 1096 "perly.y"
=======
  case 236:
#line 1107 "perly.y"
>>>>>>>
    { (yyval.opval) = (OP*)NULL; }
    break;

<<<<<<<
  case 232:
#line 1098 "perly.y"
=======
  case 237:
#line 1109 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
    break;

<<<<<<<
  case 233:
#line 1104 "perly.y"
=======
  case 238:
#line 1115 "perly.y"
>>>>>>>
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
    break;

<<<<<<<
  case 239:
#line 1117 "perly.y"
=======
  case 244:
#line 1128 "perly.y"
>>>>>>>
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 240:
#line 1121 "perly.y"
=======
  case 245:
#line 1132 "perly.y"
>>>>>>>
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 241:
#line 1125 "perly.y"
=======
  case 246:
#line 1136 "perly.y"
>>>>>>>
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

<<<<<<<
  case 242:
#line 1131 "perly.y"
=======
  case 247:
#line 1142 "perly.y"
>>>>>>>
    {
                          SV *constsv = cSVOPx_sv((ps[(4) - (5)].val.opval));
                          assert((ps[(2) - (5)].val.opval)->op_targ);
                          if (SvTYPE(constsv) != SVt_IV)
                            croak("Invalid array size %s[%s]",
                                  PadnamePV(PAD_COMPNAME((ps[(2) - (5)].val.opval)->op_targ)),
                                  SvPOK(constsv) ? SvPVX(constsv) : "");
                          /* - is not a THING, syntax error near "[-"
                          if (size <= 0)
                            croak("Invalid array size %s[%d]",
                                  PadnamePV(PAD_COMPNAME($2->op_targ)), size);
                          */
			  if (!FEATURE_SHAPED_ARRAYS_IS_ENABLED)
                              croak("Experimental "
                                    "shaped_arrays not enabled");
#if 0
                          /* Policies... Either provide a stable feature or not.
                             No need to be defensive about every single new feature */
			  ck_warner_d(
				packWARN(WARN_EXPERIMENTAL__SHAPED_ARRAYS),
				"The shaped_arrays feature is experimental");
#endif
			  (yyval.opval) = newAVREF((ps[(2) - (5)].val.opval));
                          av_init_shaped(MUTABLE_AV(PAD_SV((ps[(2) - (5)].val.opval)->op_targ)), SvIVX(constsv),
                                        PadnameTYPE(PAD_COMPNAME((ps[(2) - (5)].val.opval)->op_targ)));
			}
    break;

<<<<<<<
  case 243:
#line 1160 "perly.y"
=======
  case 248:
#line 1171 "perly.y"
>>>>>>>
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

<<<<<<<
  case 244:
#line 1166 "perly.y"
=======
  case 249:
#line 1177 "perly.y"
>>>>>>>
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 245:
#line 1168 "perly.y"
=======
  case 250:
#line 1179 "perly.y"
>>>>>>>
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
    break;

<<<<<<<
  case 246:
#line 1172 "perly.y"
=======
  case 251:
#line 1183 "perly.y"
>>>>>>>
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
    break;

<<<<<<<
  case 248:
#line 1177 "perly.y"
=======
  case 253:
#line 1188 "perly.y"
>>>>>>>
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 250:
#line 1182 "perly.y"
=======
  case 255:
#line 1193 "perly.y"
>>>>>>>
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 252:
#line 1187 "perly.y"
=======
  case 257:
#line 1198 "perly.y"
>>>>>>>
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
    break;

<<<<<<<
  case 253:
#line 1192 "perly.y"
=======
  case 258:
#line 1203 "perly.y"
>>>>>>>
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

<<<<<<<
  case 254:
#line 1194 "perly.y"
=======
  case 259:
#line 1205 "perly.y"
>>>>>>>
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
    break;

<<<<<<<
  case 255:
#line 1196 "perly.y"
=======
  case 260:
#line 1207 "perly.y"
>>>>>>>
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
    break;

<<<<<<<
  case 256:
#line 1199 "perly.y"
=======
  case 261:
#line 1210 "perly.y"
>>>>>>>
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

      default: break;
    

/* Generated from:
<<<<<<<
 * d4a1b66215a9cd90c7961228c6279e17d31177b49b30cda4568e66df2c82f981 perly.y
 * af369e0c00095e7003f0182d06a52d35c908c9d43a864a7e300b79c1d34fbfdc regen_perly.pl
=======
 * df2b0af4f7c8aa46e628f252f7b42e3f0c2b4ec115b415ca778bc1f69e6b9403 perly.y
 * d1d4df7b8e30ac9dede664af9179e6e5e7ddc7f2ad9c4eff9e2e5b32c9e16a6e regen_perly.pl
>>>>>>>
 * ex: set ro: */
