=begin none -*- pod -*-

NOTE: To be published only when the critical points are already implemented.
      i.e. end of summer 2015

=end none

=head1 NAME

cperl - a perl5 with classes, types, compilable, for the business environment

=head1 SYNOPSIS

Description of changes and enhancements of the cperl variant of perl5.

=head1 DEVELOPMENT SETUP

    git remote add cp ssh://git@enterprise.cpanel.net:7999/~reini/cperl.git
    # NOTE: later we will switch to: ssh://git@github.com/perl11/cperl.git
    git fetch cp
    git checkout -t cp master
    git config rerere enable
    git config rerere.autoupdate true
    ln -s ../.git-rr-cache .git/rr-cache
    git branch -r | grep cp/

We need a shared rerere cache to be able to continously merge and rebase with perl5
upstream.
See L<https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67>
The F<rr-cache> commits can be safely ignored upstream.

=head1 Fix breakage and bad design

=head2 signatures

p5p came with the worst of all signature implementions which already
do exist. The slowest and with the least features, actually blocking
critical progress.

=over

=item Add optional types in signatures

    sub (int $i) # or
    sub ($i: int)

Same as provided for lexical variable declarations. In both variants,
in leading position as with C<my int $a;> and as attribute, as with
C<($i :int :const)>

We need to seperate coretypes (int, str, num) and user-defined types
(existing class names), and the 2 core attributes C<:const> and
C<:unsigned>. Maybe more later.

Follow the same rules as in lexical declarations. The type must exist
already as package, otherwise a syntax error is thrown.

    $ cperl -e'sub x(x $x){}'
    No such class x at -e line 1, near "sub x(x"

    $ cperl -e'sub x(str $s){}'          # coretypes implicitly loaded

    $ cperl -e'%Str::; sub x(Str $s){}'  # user-defined type Str

=item Add subroutine return types

For easier implementation we support subattributes, C<< :<type> >> only.
 not the other possible syntax variants C<< => type >> or C<< returns type >>.

There are just a few semantic conflicts.
Note that we can use the builtin attributes C<:lvalue>, C<:method>,
C<:const> and C<:unsigned> also here.

C<:const> does not mean constant result, it rather means constant subroutine.
Having this constant means that the compiler is able to inline it without
run-time checks if it has changed.

C<:unsigned> as coretype or not?  As sub attribute it could mean
strictly typed to a return result of C<UV>, like C<:int :unsigned>,
where the C<:int> is optional. C<:-unsigned> would mean C<:int> then,
return a signed int.  C<:unsigned> could also be no coretype, just a
hint for C<:int>, and without C<:int> it will just be an attribute,
not a strictly checked coretype. This decision is still open.

=item Add call by-ref via \$arg

Support scalar lvalue references - sub (\$var)

With perl5 upstream all arguments are copied only, as with C<my $arg1 = shift;> but
alternate syntax for fast C<$_[0]> access is not provided. So they have to keep
the otherwise unneeded C<@_> array around.

cperl uses C<\$name> to denote references to scalar lvalues, which change the
calling variable.
e.g. C<sub myfunc(int \$i) : int { $i++; }>

for now scalar lvalue references only, C<\@a> or C<\%h> would be nice with
type checks for arrayref or hashref.  maybe C<\[$]> also.

=item Improve C<@_> handling

Remove C<@_> when not needed.

With cperl C<@_> will only hold the C<&rest> args, the undeclared rest
if no other slurpy args are declared.  i.e. C<@_> will be empty when
signatures are declared with a slurpy ending C<@> or C<%> arg, and
C<@_> is not referenced in the immediate function body, visible to
the compiler, i.e. not hidden by a string eval.

Internally the elements of C<@_> are accessed via aelem, not
aelemfast.  But this is moot with the introduction of the new OP_SIGNATURE
op, which is even faster.

The perl5 arity check is overly big and needs two checks and big strings
with fixed arity subs.

    perl -MO=Deparse -e'sub x($a){$a++}'
    sub x {
        die sprintf("Too many arguments for subroutine at %s line %d.\n",
          (caller)[1, 2]) unless @_ <= 1;
        die sprintf("Too few arguments for subroutine at %s line %d.\n",
          (caller)[1, 2]) unless @_ >= 1;
        my $a = $_[0];
        ();
        $a++;
    }

cperl changes all arity errors to "Wrong number arguments".

    cperl -MO=Deparse -e'sub x($a){$a++}'
    sub x {
        die sprintf("Wrong number arguments for subroutine %s at %s line %d.\n",
          (caller(0))[3, 1, 2]) if @_ != 1;
        my $a = $_[0];
        ();
        $a++;
    }

    cperl -MO=Deparse -e'sub x(\$a){$a++}'
    sub x {
        die sprintf("Wrong number arguments for subroutine %s at %s line %d.\n",
          (caller(0))[3, 1, 2]) if @_ != 1;
        $_[0]++;
    }

=item Parse signatures with the parser, not undocumented functions

We'll see later on this one. Maybe keep it as horrible as it is now.

=item Improved error reporting

In violations do not only print the position, also the declaration which is violated.
e.g.

    @a=(); sub x(\@b) {$b->[0]++} print x(\$a)

C<Type of arg 1 to main::x must be arrayref (not a scalar ref) at -e
line 1, near "\$a)">

C<< => >>

C<Type of arg 1 \@b to main::x must be arrayref (not a scalar ref) at
-e line 1, near "\$a)">

Proper signature types are not only a great help for catching errors
early, they are performance critical, see coffescript, dart, microsoft
typescript, google soundscript, facebook hack, mypy, ruby 3.0 and
partially even perl6.  The type inferencer will not be able to infer
many types without explicit types.  But with typed signatures, besides
the obvious solution of private methods or closed classes we can
inline most small methods, and improve most loops and array
accesses. It is also critical to implement multi methods and an
advanced object system.

=item Support C<...> for efficient varargs passing

C<...> as empty function body already has a special meaning as B<yadayada>
operator, just croaking, but interestingly not the usual meaning of varargs.

cperl uses C<...> in the natural way to denote unnamed and uncopied
rest args, and passes the varargs through to the next call.

C<...> denotes a slurpy unnamed signature, and C<...> in a otherwise
non-empy function body denotes passing those arguments efficiently to
the next function.  Internally C<...> does not need to copy the values
into a temporay array, we just need to pass the argument stack
position down to the next calls using C<...>. By using C<...> instead
of C<@_> we can avoid copying the values to C<@_>, we only need the stack
index, not all the values.

    sub foometh($self, ...) { func(...) }

=item strict prototype and signature syntax, no pragmas required.

Illegal prototype and signature syntax does not just warn, it dies with
an syntax error.

    $ cperl -e'no warnings "illegalproto"; sub x(x){}'
    No such class x at -e line 1, near "sub x(x"

C<no warnings "illegalproto";> is a noop.

=item no signatures or lexsubs pragmas required

C<use feature "signatures"> or C<use feature "lexsubs"> is not
required and is ignored.  All prototypes and signatures are parsed either
as prototypes or signature, regardless of the scope of a C<use feature
"signatures"> pragma. C<my sub> is parsed without previous activation.

=back

=head2 Undo blocked dynamic optimizations

We unblock the possibility to perform dynamic run-time
optimizations. This is basically the same as C<eval "sub bla {}">,
changing the definition of a function at run-time, just with an
optimized optree. We need this to perform type optimizations on
modules loaded at run-time.  Dynamic optimizations are the basis for
all fast dynamic language implementations.  Blocking L<B::Generate> and
internal optimizations for no technical reasons already did too much
harm.

=head2 Undo B bootstrap breakage

L<B> was changed to support C<use strict> from the very beginning,
which broke the L<B::Bytecode> compiler performance advantage by all
compiler internal constants to the emitted bytecode.  Reverting this
breakage was denied because this developer did not understand the code.
It is too bothersome in the long run to maintain our reversion of this
breakage.  It easier to check for I<usecperl> in the compiler to be
able to compile to bytecode properly again.

=head2 Undo constant folding iopt de-optimization

One particular member of p5p which was also responsible for all the
other compiler breakages described above, removed automatic integer
optimizations while doing constant folding against community consent
in the early times of his work.  We re-add this optimization to treat
constant integers as such (as via an implicit use integer) in constant
foldable expressions. I.e. integer overflow in constant expressions is
only checked at compile-time, not run-time.

=head2 Undo support for binary names

By introducing unicode support for names, p5p silently allowed C<\0>
inside names, which they called an advantage by supporting now binary
safe names.  In reality they didn't support binary names in all other
code parts which had to deal with names, and thus enabled a huge
attack vector to hide arbitrary user strings behind C<\0> names, which
was silently stripped before and when used in syscalls.  They moved
resonsibility to the user, as previously for input strings, now also
for input names, esp. for package names which search the filesystem.

We have to keep the new GV API - accepting the string length - but
even without C<strict names> we strip everything behind the C<\0> as
before 5.16.

=head2 Warn on \0shellcode attempts for names

Make our C<use warnings "syscalls"> the default.

Any attempt to attack package names with shellcode behing C<\0> is
being warned per default, and not only optionally with . There is no
uninnocent or wrong usage of such names, only malicious intent, and
this must appear in logfiles. This is worse than syntax errors and
syntax errors are warned by default. p5p was vehemently against this
change.

=head2 strict names

With C<use strict "names"> we do not accept unparsable symbols created
from strings.  this is a new run-time error for use strict. There's
currently no room for an explicit C<use strict 'names'> hint due to a
bad strict implementation. but later when we freed some PL_hint bits
to hold strict defaults we can add support for that.

=head2 TR39 confusable names

Reject confusables as described in TR39. Theoretically this can be
added with L</"strict names"> only, but since this is only dangerous since
5.16 we can just throw a syntax error by default as in other languages
with proper unicode support. (I<Java>)

The compiler had to add this warning since 5.16:

I<Perl handling of new unicode identifiers - package and symbol names ->
I<without proper TR39 handling is considered a security risc and is not fully supported.>
I<See> L<http://websec.github.io/unicode-security-guide/>.

I<Check your code for syntax spoofs, confusables, strip \0 from package names>
I<and enable use warnings 'syscalls'>.

=head2 undo the double readonly system

In order to support Hash unlock code, i.e. undoing readonly setting of
hash values, p5p added a second readonly bit for special values which
are not allowed to be writable. This of course pure non-sense, as the
check for this special values at Hash unlock is trivial. It does not
need to take away the last free SV bit, which we used to implement
fast coretype checks, and unlock really only needs to unlock the
previously locked values, not make all values unconditionally
writable, thus making previously readonly values writable. C<SVf_PROTECT>
does not help with that and is pure nonsense.

=head2 fix the hashes

Hash functions need to be implemented as macros, not functions, undo
that. (maybe)

Provide proper abstraction, we dont need 5 times the same bad code
copied along.  Use fast hash functions, not secure slow ones.  Use
cache-friendly open addressing, not simple, slow and DOS'able linked
lists.  Seperate the keys from the values to fit the search into a
cache line.

=head2 fast arithmetic - use new intrinsics

gcc-5 and clang-3.6 provide new platform compatible fast intrinsics to
check for overflow on add, sub or mul and promote the result to double
then. This is basically just a C<jo +2> instruction on x86. perl5 uses
a huge and slow logic to check for overflow on these simple ops.
HAS_BUILTIN_ARITH_OVERFLOW / d_builtin_arith_overflow

=head2 lexical methods

Lexical methods are of course private to its enclosing class, i.e. not
visable from outside the class. And they are also closed, i.e. they
cannot be changed later. This enables the compiler to inline them
automatically when its worthwhile. e.g. when they are small enough.
They are either defined in the new style: `class .. { my method .. }`
or old style: `package .. { my sub .. }`

Since all this implementation blockage is too heavy, all the
decade-long planned features could not go forward. The blocks need to
come to an end, and the implementation needs to improve.


=head1 Plans for further core features

=head2 compile-time attribute hooks

C<CHECK_SCALAR_ATTRIBUTES> (for C<:const>, C<:int>, C<:num>, C<:str>)
This is basically a read-only C<MODIFY_*_ATTRIBUTES> hook at
compile-time with a better name to disassociate from the run-time
check of C<FETCH_*_ATTRIBUTES> with my lexicals.  See also L</"rewrite
critical core modules in C as builtins"> below.

=head2 coretypes: int, num, str

Make coretypes can only be a builtin.
Provide fast ops variants for these three types to omit type checks at
run-time. With a jit only these will benefit from a jit.  Also add a
C<:const> attribute for all data: scalar, arrays, hash, functions,
packages+classes.

=head2 types

Provide a compile-time type inferencer and type checker. The
inferencer runs automatically and can currently only infer int on
array indices and str on hash keys, but with the help of declarations
and type checks, as e.g.  in smartmatch it can infer much more.

    if (type $a == "int") {  => $a is an int in this scope }

Compile-time type checks need to be enabled with C<use types;> though.

Typed signatures are backwards incompatible to perl5, as this is not
yet supported upstream. The expected performance win is ~2-10x faster,
you get compile-time type warnings, a business friendly coding
environment and the possibility to display and put infered types
automatically in your code, with a cooperating editor. e.g.

    my $n=1000;
    for (my $i=0; $i<$n; $i++) { }
=>
    my int $n :const = 1000;
    for (my int $i=0; $i<$n; $i++) { }

Note: When in doubt leave out types. If the inferer cannot find it, it
might not be worth the trouble. But for hot code always use types, as
types prevent from costly run-time checks for types and magic hooks.

=head2 typed and sized arrays

Enable faster array access, uniformly typed array values, use less
memory (cache friendly), help the type system. See L<perltypes.pod>.

  my int $a[20];         # or
  my int[20] $a;         # (probably not), or
  my int[int] $a[20];    # (probably not)

  my int %h;             # or
  my str{int} %h;        # (probably not)
  my str %a;             # hash with str values only
  my int $a{20};         # hash with int values only. fixed hash size, no grow on insertion.
  my str $a{20} :const   # fixed hash size, no grow on insertion, perfect hash (keys may not change, values do).
     = (...);

no sparse arrays (i.e. hash with int keys) yet. but this would need a
different declaration syntax if to be supported natively. e.g. C<my
int{int} %a;> - sparsehash with int keys and int values.
variant 2: C<my intsparsehash %a>, which can go with a user class
and methods, but this will be slow, without native ops.

=head2 rewrite critical core modules in C as builtins

Builtins: C<strict>, C<Exporter>, C<DynaLoader>, C<Carp>, C<attributes>.

As shared lib: C<warnings>, C<Config> and I<unicode folding tables> to save
memory, startup time and reduce bloat.

Big constant hashes and tables need to be in a shared memory segment,
not recompiled for every fork or thread, similar to the Encode tables,
which are done properly. The risc to introduce even more performance
regressions by keeping some critical core modules as C<.pm> is too high
and broke the compiler too often. Those developers have no idea of the
impact of innocently looking additions.

We need to reduce memory, and want to reduce the size of compiled code
by 30%, but in some cases it will be 200%.
As builtin or shared library we go to zero startup-time overhead for those
modules.

=head2 remove Attribute::Handler from core

This evals all attributes at compile-time. Discourage its usage.

=head2 add the compiler back to core

The testsuite runs too long for cpan users, and it needs to be
developed in sync to avoid typical 6 months wait-time after a core
change.  Maybe provide python-like precompiled C<ByteCache> F<.pmc> as
default. You could pre-compile then modules with higher optimization
levels, esp. the type inferencer.

Maybe include a C<Data::Compile> module to dump only data without all
the code to a shared library, and possibly C<Perfect::Hash> and a new
F<ph.c> to create and optimize readonly hashes, which is needed for the
shared XS hashes of Config, warnings and unicode tables.

=head2 backport core testsuite fixes for the compiler

Honor differences between compile-time und run-time, when run
compiled.  Other than a few wrong testcases, the compilers does pass
the core testsuite.

=head1 Longer term goals

=head2 tailcall optimization

Detect tail positions and replace the call with a fast goto. This needs
to be in core, not as external module.

=head2 proper object system

No, not moose. rather an optimizable perl6-like object system in core.
provide a mop, i.e. metaobjects for classes, proper class and method
syntax, anonymous classes by pointer not name, proper multi dispatch
with types, roles, class and method lookup by pointer, not by name,
Create native optimized shapes via mixins as in p2 (an enhanced bless),
Lexical methods are private, optimize dispatch for single
inheritance. i.e the convenient class syntax extends on a single class
only, classes are finalizable by the calling application.

=head2 libffi in core

Declare extern functions and libraries and call them. There's no need
for XS and seperate compilation for most bindings. Not everybody has a
compiler, the very same compiler perl was compiled with.
libffi is the slowest ffi library, but has the best platform support, as it is
integrated with gcc for java jni support.

=head2 editor integration

With type inference we can provide a much nicer development
environment, which also supports the debugger. I'm thinking of a port
of B<ZeroBrane Studio> for perl. This means provide core support for the
needed serializers and introspection facilities.

=head2 jit

Add a jit for the easiest platforms, and provide dynamic javascript-based
optimizations when stacks need to be replaced.
Eventually even promote to bignum not double automatically,
as in perl6. But this is optional, the next points are more important.
Jit's are a bit overrated. a fast bytecode loop can easily beat a jit and optimizing
compiler, see luajit2, L<http://www.emulators.com/docs/nx25_nostradamus.htm> or
L<http://nominolo.blogspot.de/2012/07/implementing-fast-interpreters.html>

=head2 optimize the vm, the runloop

We carry around way too much bloat in the ops and the data, which is
not needed at run-time. e.g. the compiler throws away the nested
symbol table stashes if not needed, which frees 20% memory.
But think of a lua/p2-like redesign of tagged values and slimmer ops,
and eventually put the stack onto the stack.

Maybe rewrite to a better register-based compiler with fixed-length 2
operands as in p2, but this might be too tricky for XS, mapping the
global stack to the local stack.  Probably no SSA (three arguments),
just a cpu friendly two argument form as in p2/lua 5.1.

Allow faster XS calls, user-provided function calls and method calls.
provide support for named arguments in the vm, fast not via hashes.
Many of the current io+sys ops are better implemented as library
methods.  With ~50ops instead of >300 the runloop might fit into the
L1 cache again.  Seperate calling of fixed arity methods from varargs.
detect and use tailcalls automatically.  Do not step into a seperate
runloop for every single function call, only for coros, which do need
to record the the stack information.

Run-time optimize the data, no 2x indirection to access hash and array
structs.
Provide forwarding pointers to single tuples to hold all.
This could provide also the possibility for a GC if a second sweep
for timely destruction is doable.

=head2 coro

Keep native threads asis (this is not fixable, better remove it), but
actively help coro support.

=head2 untangle the IO layer mess

A stack is a stack

=head2 bring back proper `match` and `given/when`

With type support it would be even efficient and helps the inferencer.

=head2 clp

Possibly add a clp library, a constraint logic solver, with possible
bindings to external sat solvers, like minisat, which can be included
due to its small size and license.  It is solved by checking for lvalue
function calls in assignments, when the function is not declared as
C<:lvalue>.

    use clp;
    sub fact(int $i=0) :int { assert $i>=0; return $i ? fact($i-1) : 1 }
    say fact(7);     # => 5040
    fact($_) = 5040; # solve it!
    say $_;          # => 7

=head1 Different development policies

p5p development and discussions are essentially fruitless since the
original author Larry Wall left the perl5 community.  No single
non-trivial feature p5p discussed and implemented was ever successful
besides defined-or, which I count as trivial, even if the discussion
about it was enormous.  Switch, smartmatch, given/when, pseudohashes,
attributes, types, signatures, classes + mop, hash security, unicode
symbols.

With cperl we do offer technical competence and encourage discussions.
the lead should be the most competent, not the loudest or most likeable one.
We do encourage criticism on bad design and implementation.
We develop in branches only, and only if the branch passes the test
suite on all major platforms it can be merged. we do need build servers
and performance regression tests.
We follow the perl6 development principles.
We take github pull request and do not ignore them.

We track stable upstream releases only. The previous stable release
was 5.14.4, as 5.16 introduced critical instabilities which were not
fixed mostly until 5.20 and this version, and 5.20 alone was not worth
to update cperl to. The previous stable release was 5.8.9 and the one
before was 5.6.2.  So we do not know which will be the next stable
cperl release. It could be 5.24, but usually upstream development
makes grave mistakes which needs several releases to overcome. So
something like 5.30 sounds realistic.


=head1 How to detect cperl?

=over

=item config.h defines <USE_CPERL>

=item Config.pm defines C<usecperl>

=item cperl changed modules end with C<_0<num>c>, typically C<_01c> (hopefully)

=back

=head1 Links

Most dynamic languages are currently in the process to get type
support.  This happened for perl5 at around 2002, but was never
properly led (the developers left p5p) and was then destroyed with
5.10.

=over

=item L<http://www.typescriptlang.org/Content/TypeScript%20Language%20Specification.pdf>  (microsoft's javascript with types)

=item L<https://code.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/> (facebook's javascript with types)

=item L<https://github.com/rwaldron/tc39-notes/blob/master/es6/2015-01/JSExperimentalDirections.pdf> Soundscript, google's javascript with types

=item L<https://www.python.org/dev/peps/pep-0484/>  (planned python with types)

=item L<http://www.mypy-lang.org/> (existing python with types)

=item L<https://news.ycombinator.com/item?id=8620129> (ruby 3.0 planned with types)

=item L<http://crystal-lang.org/> (a good existing ruby with types)

=item L<http://hacklang.org/> (facebook's php with types)

=item L<http://blog.pascal-martin.fr/post/in-favor-of-rfc-scalar-type-hints.html> (php 7 types overview)

=item L<https://wiki.php.net/rfc/scalar_type_hints> (php 7)

=item L<https://wiki.php.net/rfc/return_types> (php 7)

=item L<http://blogs.perl.org/users/rurban/2012/09/my-perl5-todo-list.html> (the old plan, ignored)

=item L<http://perl11.org/cperl> (not yet)

=item L<https://github.com/perl11/cperl> (not yet)

=item L<https://github.com/rurban/perl> (no branches yet, just master)

=back
