{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1441997996,"metadata":{"github-id":"MDU6SXNzdWUxMDYwNzE5MDg=","github-url":"https://github.com/perl11/cperl/issues/22","origin":"github"},"title":"ffi","message":"probe for libffi and link to it if found. useffi, ffi_targets for the valid :nativconv() ABI args.\nparse syntax:\n\n```\nuse NativeCall;\nextern sub NAME SIG ATTRIB?;\n#or\nsub NAME SIG :native() ATTRIB?;\n```\n\nThe alternative for `extern` is the perl6-style `:native` attribute, with optional\narg `:native(\"libname\")` and optional `:symbol(\"c_name\")`. \nStr arg or return types can have optional `:encoded('utf8')` attributes.\nThe default return type is `:Int`.\nSee https://docs.perl6.org/language/nativecall\nResolve the attribute arguments, safely. See #291. (Not as in Attribute::Handlers)\n\nUse a new op dlcall/enterffi for it, instead of entersub. leaveffi not needed, as no blocks are stored for extern subs, just the call and the sigop. the sigop holds the info for argument and returntype translations, the callop does the translation, call, translation.\n\nWithout a :native(libname) the symbol searched in all loaded shared libraries.\nSo you can preload shared libs via the DynaLoader.\n\nAdd and separate a function to DynaLoad a pure shared library, without xs bootstrap, so extern does not need any library name. Other languages do it eg. with `use lib (\"mysqlclient.so\");`\n\nTranslate args in the optimizer to such a sub, upgrade to native.\n\nEnforce native types for the sub parameters, resp. provide casts (unbox).\nditto for the return value.\n\nA CvEXTERN(cv) needs a temp. libptr for the loaded shared lib (shared with the ffi cif), and an optional PV for the symbolname.\n(mangled or unmangled, :symbol() override, `_` prefix or not).\nIt doesn't need a CvSTART, nor a CvROOT, so overload those two.\nAt runtime libffi needs the XSUB address, and the cif, i.e. the ffi signature. \nThe symbolname is resolved to the XSUB address via DynaLoader, the sig is converted to a cif at compile-time.\n\nWe need a few more Configure probes and keys: useffi (to disable it), d_libffi (if the definition probed ok), i_ffi (if to include \u003cffi.h\u003e), i_alloca (if to include alloca.h), d_alloca or d__alloca (for fast arg preperation).\n\nNote that Larry had this in his TODO, but p5p removed it later.\nEst. 2w\n\n# Architecture\n\nparser: `extern sub name (sig) :native() :symbol();`\n\n* sig is stored as sigop attached to the CvEXTERN sub, not in the block (CvROOT). needed for prep_cif.\n* attrs store the lib and symname in xsutils, \n* NY: add the runtime attributes-\u003eimport call to the stmt list there. compile-time works fine.\n\nattributes::import (either compile-time or run-time):\n\n* resolve the lib and name via DynaLoader (i.e. not in miniperl). See #291 for run-time attrs support :native($libname). \n* set libhandle (temp. CvFFILIB) via dl_load_file\n* resolve symbol ptr via dl_find_symbol \n* store ptr at CvXFFI(). CvFFILIB is now unneeded, and re-used for the cif.\n* ffi_prep_cif: prepare sig arity and type translations. \n* set CvFFILIB from lib handle to cif.\n\ncompiler:\n\n* ck_entersub_args_proto_or_list checks for CvEXTERN\n* sets op from ENTERSUB to ENTERFFI (*as with ENTERXSSUB*)\n* type check the call args\n\nruntime: pp_enterffi\n\n* prep_sig: copy args from perl stack to arg_values[] via sigop aux info.\n* `ffi_call(cif, CvXFFI(cv), \u0026rvalue, argvalues);`\n* prep_ret: copy rvalue to perl stack.","files":null}]}