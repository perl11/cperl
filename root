{"version":1,"ops":[{"type":1,"author":{"id":"6d7fb09fa3ae189b06bde5ab1e2337ab0e9dd7cb"},"timestamp":1571529974,"metadata":{"github-id":"MDU6SXNzdWU1MDk1MjQ4MzY=","github-url":"https://github.com/perl11/cperl/issues/405","origin":"github"},"title":"\"called too early to check prototype\" with empty signature","message":"```\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\nuse feature 'signatures';\nno warnings 'experimental::signatures';\n\nfunc();\nsub func() { }\n```\nWhen I invoke this with `perl` 5.30 (built from source on Ubuntu 18.04.3 LTS), it runs with no warnings or errors, producing no output as expected.\n\nWhen I invoke it with `cperl` 5.30 (built from source on the same system), I get this fatal error:\n```\nmain::func() called too early to check prototype at ./too-early line 8.\n```\n\nIf I comment out the `use feature 'signatures';` and `no warnings 'experimental::signatures'` lines, I get the diagnostic from both perl and cperl (as expected).\n\nIf I instead change the last two lines to:\n```\nfunc(42);\nsub func($n) { }\n```\nit runs without error with both `perl` and `cperl`. And if I change the call to `func(42, 43)`, I get a fatal error from both `perl` and `cperl`:\n```\nToo many arguments for subroutine 'main::func' at ./too-early line 8.\n```\nor\n```\nToo many arguments for subroutine func. Want: 1, but got: 2 at ./too-early line 8.\n```\n(again, as expected).\n\n(I *think* what's happening is that `perl`, but not `cperl`, is correctly treating the empty parentheses as an empty *signature* rather than as an empty *prototype*. Please ignore this speculation if it's not helpful.)","files":null}]}