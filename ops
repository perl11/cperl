{"version":1,"ops":[{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1484859351,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3Mzg5NTg0NQ==","github-url":"https://github.com/perl11/cperl/issues/242#issuecomment-273895845"},"message":"And he is indeed right. There's a lot of slack.\n\n`-Accflags=-DHASH_FILL_RATE=200`\n\nmemtest.sh: fillrate 200% vs 90%. \n7% less memory with p1, which is unicode regex. `-e'use utf8; my $s=\"x≈x\"; $s=~s/a≈e//i;'`\ntimings are similar, 2-7% slower.\n\nmassif.2xfillrate.m0 256060\nmassif.2xfillrate.m1 380829\nmassif.2xfillrate.p0 717081\nmassif.2xfillrate.p1 2566637\n\nmassif.perl.m0 255977\nmassif.perl.m1 382614\nmassif.perl.p0 720200\nmassif.perl.p1 2756405\n\nbench-mini (more is faster):\n```\n                        200%    90%\nhash/copy                132    135\nhash/each                107    105\nhash/foreach-sort         88    83\nhash/foreach              85    89\nhash/get                 117    115\nhash/set                 102    105\n```","files":null},{"type":4,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1484859931,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50OTI5Nzg1NzMy"},"status":2},{"type":3,"author":{"id":"ba1546ceae604fb8ea9c157f7f74aaf3a991276b"},"timestamp":1484905331,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3NDAyNTYwNA==","github-url":"https://github.com/perl11/cperl/issues/242#issuecomment-274025604"},"message":"\"smaller arrays with double collisions\"\nie hash is still uses chaining, but looks at two bucket slots?","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1484905490,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3NDAyNjI4OA==","github-url":"https://github.com/perl11/cperl/issues/242#issuecomment-274026288"},"message":"yes. half HvARRAY size, and double the HE chain depth.\nless space, more time.\n\ntoddr prefers memory over speed.","files":null},{"type":3,"author":{"id":"359f61d019f0e33ea6caa62de7d92d65af260680"},"timestamp":1484934086,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3NDEzMjg5MA==","github-url":"https://github.com/perl11/cperl/issues/242#issuecomment-274132890"},"message":"for reference here is a work in progress playing with this and some benchmarks:\nhttps://rt.perl.org/Public/Bug/Display.html?id=130084\n\nThe main difficulty here is to find a solution universally better, in all/most contexts.\nIt's pretty easy to come with samples that show a degradation either in speed or memory.\n\nIt's always a tradeoff. I think at the end whatever is the choice it probably should be a compiled option.","files":null},{"type":3,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1484939867,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3NDE1NTcxNA==","github-url":"https://github.com/perl11/cperl/issues/242#issuecomment-274155714"},"message":"Note that this [perl #130084] patch will never make it into cperl.\n\ncperl instead offers the easy `-Accflags=-DHASH_FILL_RATE=200` configuration if someone wants to trash his hash linked lists with this.\n\ncperl uses an optimized version of the split calculation with __builtin_ctz, so it can afford the uneven customized fill rate. your patch doesn't use that. so it's much slower than cperl.\n\nfor less memory wait until one of these cperl hash refactors land:\n\n  feature/gh102-smallhash\n  feature/gh117-hashiter\n  feature/gh24-base-hash\n  feature/gh24-oldnew-hash-table\n  featurex/gh24-hash-loop\n  featurex/gh24-hash-loop+utf8\n  featurex/gh24-hash-utf8\n  featurex/gh24-open-hash\n  feature/gh24-he-array\n  featurex/gh24-array_he\n  featurex/gh24-one-word-ahe\n\nsmallhash, open-hash and one-word-ahe all use dramatically less memory, and I haven't even added yet the new python/ruby/php hashes with the indirect small index, with factor 2 for bigger hashes.","files":null}]}