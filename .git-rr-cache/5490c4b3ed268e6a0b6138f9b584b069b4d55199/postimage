use Config;
our $VERSION = "2.00c";

sub to_string {
    my ($value) = @_;
    $value =~ s/\\/\\\\/g;
    $value =~ s/'/\\'/g;
    return "'$value'";
}
sub to_dqstring {
    my ($value) = @_;
    $value =~ s/\\/\\\\/g;
    $value =~ s/"/\\"/g;
    return "\"$value\"";
}

# symlinks are currently also resolved.
# e.g.
#    ("/usr/lib", "/lib/x86_64-linux-gnu", "/lib/../lib", "/usr/lib/x86_64-linux-gnu", "/usr/lib/../lib")
# => ("/usr/lib", "/lib/x86_64-linux-gnu", "/lib", "/usr/lib/x86_64-linux-gnu")
sub resolve_duplicate_paths {
    # first resolve w/../w => w
    foreach (@_) {
        s{(\w+)/\.\./$1$}{$1};
    }
    # then remove duplicates, but keep order intact
    my %p = ();
    my @out = ();
    foreach (@_) {
        unless (exists $p{$_}) {
            if (-l $_ && -e readlink $_) {
                $_ = readlink $_;
            }
            if (-e $_) {
                push @out, $_;
                $p{$_} = 1;
            }
        }
    }
    @out
}

sub line_prefix {
    my $line = shift;
    $line++;
    return "#line $line \"dlboot_c.PL\"\n" . shift;
}

unlink "dlboot.c" if -f "dlboot.c";
open OUT, ">dlboot.c" or die $!;

my $ldlibpthname_defined = defined $Config{ldlibpthname};

print OUT line_prefix(__LINE__, <<'EOT');
/* ex: set ro ft=c: -*- buffer-read-only:t -*-
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * Any changes made here will be lost
 * Generated from dlboot_c.PL
 *
 * Copyright (C) 2015 cPanel Inc
 * Licensed under the same terms as Perl itself.
 */

/* DynaLoader globals */
SV *do_expand;               /* if to call dl_expandspec hook */
/* dl_debug;                 -- IV from $ENV{PERL_DL_DEBUG}, stored in CTX */

#define AV_PUSH(av, val) av_store(av, AvFILLp(av)+1, val)

#ifdef VMS
#  define DL_DO_EXPAND 1
#else
#  define DL_DO_EXPAND 0
#endif
static const char file[]  = __FILE__;
static const char utilsfile[]  = "dsutils.c";
const char pthsep[]       = PATH_SEP;
const char ldlibpthname[] = LDLIBPTHNAME;

static SV * dl_findfile(pTHX_ AV* args, int gimme);
static char * av_tostr(pTHX_ AV *args);
PERL_CALLCONV void XS_DynaLoader_bootstrap_inherit(pTHX_ CV *cv);
PERL_CALLCONV void XS_DynaLoader_bootstrap(pTHX_ CV *cv);
PERL_CALLCONV void XS_DynaLoader_dl_findfile(pTHX_ CV *cv);
#ifndef VMS
PERL_CALLCONV void XS_DynaLoader_dl_expandspec(pTHX_ CV *cv);
#endif
PERL_CALLCONV void XS_DynaLoader_dl_find_symbol_anywhere(pTHX_ CV *cv);
#ifdef HAS_LIBNAME_UNIQUE
PERL_CALLCONV void XS_DynaLoader_mod2fname(pTHX_ CV *cv);
#endif

EXTERN_C void
dl_boot (pTHX) {
    dSP;
    char *env;
#ifdef DEBUGGING
    const char *debug = PerlEnv_getenv("PERL_DL_DEBUG");
    UV tmp_dl_debug;
#endif
    HV * dl_stash = get_hv("main::DynaLoader::", GV_ADDMULTI);
    newCONSTSUB( dl_stash, "dl_load_flags", newSViv(0) );
#ifdef DEBUGGING
    /* enable debug/trace messages from DynaLoader perl code */
    if (debug && *debug
       && (grok_number(debug, strlen(debug), &tmp_dl_debug) & IS_NUMBER_IN_UV)
       && tmp_dl_debug <= INT_MAX)
    {
        SV *sv = get_sv("DynaLoader::dl_debug", GV_ADDMULTI);
        sv_upgrade(sv, SVt_IV);
        SvIV_set(sv, tmp_dl_debug);
        dl_debug = (int)tmp_dl_debug;
    }
#endif
    do_expand = get_sv("DynaLoader::dl_expand", GV_ADDMULTI);
    if (SvTYPE(do_expand) < SVt_IV || !SvIOK(do_expand)) {
        sv_upgrade(do_expand, SVt_IV);
        SvIV_set(do_expand, DL_DO_EXPAND);
    }
    dl_library_path = get_av("DynaLoader::dl_library_path", GV_ADDMULTI);
    (void)hv_store(GvHVn(PL_incgv), "DynaLoader.pm", sizeof("DynaLoader.pm")-1,
                   SvREFCNT_inc_simple_NN(newSVpv_share(__FILE__, 0)), 0);
EOT
my $NUMVER = 0+$VERSION;
print OUT line_prefix(__LINE__, <<"EOT");
    Perl_set_version(aTHX_ STR_WITH_LEN("DynaLoader::VERSION"), STR_WITH_LEN("$VERSION"), $NUMVER);
EOT
print OUT line_prefix(__LINE__, <<'EOT');
    newXS("DynaLoader::bootstrap_inherit", XS_DynaLoader_bootstrap_inherit, utilsfile);
    newXS("DynaLoader::bootstrap",         XS_DynaLoader_bootstrap, utilsfile);
    newXS("DynaLoader::dl_findfile",       XS_DynaLoader_dl_findfile, utilsfile);
#ifndef VMS
    newXS("DynaLoader::dl_expandspec",     XS_DynaLoader_dl_expandspec, utilsfile);
#endif
    newXS("DynaLoader::dl_find_symbol_anywhere", XS_DynaLoader_dl_find_symbol_anywhere, utilsfile);
#ifdef HAS_LIBNAME_UNIQUE
    newXS("DynaLoader::mod2fname", 	   XS_DynaLoader_mod2fname, utilsfile);
#endif

    /* with duplicates removed and symlinks resolved from $Config{libpth} */
EOT

# resolve duplicates at least here, if Configure is not up to the task
# TODO: Do this in Configure, put this into config.h to get rid of miniperl.
# This is the only non-trivial part to get rid of miniperl.
for my $pth (resolve_duplicate_paths(split(' ', $Config{libpth}))) {
  $pth = to_dqstring($pth);
  print OUT <<"EOT";
    AV_PUSH(dl_library_path, newSVpvs($pth));
EOT
}

print OUT line_prefix(__LINE__, <<'EOT');
#ifdef PATH_SEP
    if (*ldlibpthname) {
        if ((env = getenv(LDLIBPTHNAME)) != NULL) {
            char *cur = env;
            for (; *env; cur++) {
                if (*cur == *pthsep || !*cur) {
                    AV_PUSH(dl_library_path, newSVpvn(env, cur-env));
                    if (!*cur) break;
                    env = cur + 1;
                }
            }
        }
        /* E.g. HP-UX supports both its native SHLIB_PATH *and* LD_LIBRARY_PATH. */
        /* Not so sure about LIBPATH, but just add it. This is the original logic. */
        if (strNE(ldlibpthname,"LD_LIBRARY_PATH") && (env = getenv("LD_LIBRARY_PATH")) != NULL) {
            char *cur = env;
            for (; *env; cur++) {
                if (*cur == *pthsep || !*cur) {
                    AV_PUSH(dl_library_path, newSVpvn(env, cur-env));
                    if (!*cur) break;
                    env = cur + 1;
                }
            }
        }
    }
#endif

    /* No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
       NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB */
    if (get_cv("DynaLoader::boot_DynaLoader", 0) && !get_cv("DynaLoader::dl_error", 0)) {
        PUSHMARK(SP);
        XPUSHs(newSVpvs("DynaLoader"));
        PUTBACK;
        call_pv("boot_DynaLoader", G_DISCARD);
        /* SP = PL_stack_base + POPMARK; */
    }
#ifdef DEBUGGING
    if (dl_debug) {
        PerlIO_printf(Perl_debug_log, "DynaLoader.pm loaded (%s %s)\n",
                      av_tostr(aTHX_ GvAV(PL_incgv)), av_tostr(aTHX_ dl_library_path));
        if (!get_cv("DynaLoader::boot_DynaLoader", 0))
            PerlIO_printf(Perl_debug_log, "DynaLoader not linked into this perl\n");
    }
#endif
}
EOT

close OUT or die $!;

