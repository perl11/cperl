/* ex: set ro ft=c: -*- buffer-read-only: t -*-
   !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
   This file is built by regen_perly.pl from perly.y.
   Any changes made here will be lost!
 */

case 2:
#line 115 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 3:
#line 119 "perly.y"
    {
			  newPROG(block_end((ps[(3) - (4)].val.ival),(ps[(4) - (4)].val.opval)));
			  PL_compiling.cop_seq = 0;
			  (yyval.ival) = 0;
			}
    break;

  case 4:
#line 125 "perly.y"
    {
			  parser->expect = XTERM;
			}
    break;

  case 5:
#line 129 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 6:
#line 134 "perly.y"
    {
			  parser->expect = XBLOCK;
			}
    break;

  case 7:
#line 138 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 8:
#line 146 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 9:
#line 150 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 10:
#line 158 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 11:
#line 162 "perly.y"
    {
			  PL_pad_reset_pending = TRUE;
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			  yyunlex();
			  parser->yychar = YYEOF;
			}
    break;

  case 12:
#line 170 "perly.y"
    {
			  parser->expect = XSTATE;
			}
    break;

  case 13:
#line 174 "perly.y"
    {
			  PL_eval_root = (ps[(3) - (3)].val.opval);
			  (yyval.ival) = 0;
			}
    break;

  case 14:
#line 182 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 15:
#line 190 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (7)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (7)].val.ival), (ps[(5) - (7)].val.opval));
			}
    break;

  case 16:
#line 197 "perly.y"
    { (yyval.ival) = block_start(TRUE);
			  parser->parsed_sub = 0; }
    break;

  case 17:
#line 202 "perly.y"
    { if (parser->copline > (line_t)(ps[(1) - (4)].val.ival))
			      parser->copline = (line_t)(ps[(1) - (4)].val.ival);
			  (yyval.opval) = block_end((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval));
			}
    break;

  case 18:
#line 209 "perly.y"
    { (yyval.ival) = block_start(FALSE);
			  parser->parsed_sub = 0; }
    break;

  case 19:
#line 215 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 20:
#line 217 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 21:
#line 226 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
    break;

  case 22:
#line 228 "perly.y"
    {   (yyval.opval) = op_append_list(OP_LINESEQ, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval));
			    PL_pad_reset_pending = TRUE;
			    if ((ps[(1) - (2)].val.opval) && (ps[(2) - (2)].val.opval))
				PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 23:
#line 237 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (1)].val.opval) ? newSTATEOP(0, NULL, (ps[(1) - (1)].val.opval)) : NULL;
			}
    break;

  case 24:
#line 241 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 25:
#line 245 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 26:
#line 249 "perly.y"
    {
			  (yyval.opval) = newSTATEOP(SVf_UTF8 * (ps[(1) - (2)].val.pval)[strlen((ps[(1) - (2)].val.pval))+1], (ps[(1) - (2)].val.pval), (ps[(2) - (2)].val.opval));
			}
    break;

  case 27:
#line 256 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 28:
#line 258 "perly.y"
    {
			  CV *fmtcv = PL_compcv;
			  newFORM((ps[(2) - (4)].val.ival), (ps[(3) - (4)].val.opval), (ps[(4) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			  if (CvOUTSIDE(fmtcv) && !CvEVAL(CvOUTSIDE(fmtcv))) {
			      pad_add_weakref(fmtcv);
			  }
			  parser->parsed_sub = 1;
			}
    break;

  case 29:
#line 268 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 30:
#line 290 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (7)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			      : newMYSUB((ps[(3) - (7)].val.ival), (ps[(2) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval))
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 31:
#line 301 "perly.y"
    {
			  if ((ps[(2) - (3)].val.opval)->op_type == OP_CONST) {
			    const char *const name =
				SvPV_nolen_const(((SVOP*)(ps[(2) - (3)].val.opval))->op_sv);
			    if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK")
			      || strEQ(name, "UNITCHECK"))
			      CvSPECIAL_on(PL_compcv);
			  }
			  else
			  /* State subs inside anonymous subs need to be
			     clonable themselves. */
			  if (CvANON(CvOUTSIDE(PL_compcv))
			   || CvCLONE(CvOUTSIDE(PL_compcv))
			   || !PadnameIsSTATE(PadlistNAMESARRAY(CvPADLIST(
						CvOUTSIDE(PL_compcv)
					     ))[(ps[(2) - (3)].val.opval)->op_targ]))
			      CvCLONE_on(PL_compcv);
			  parser->in_my = 0;
			  parser->in_my_stash = NULL;
			}
    break;

  case 32:
#line 323 "perly.y"
    {
			  OP *sig = (ps[(6) - (10)].val.opval), *body = (ps[(9) - (10)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && !OpHAS_SIBLING(sig))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(8) - (10)].val.ival))
			      parser->copline = (line_t)(ps[(8) - (10)].val.ival);
			  body = block_end((ps[(5) - (10)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));

			  SvREFCNT_inc_simple_void(PL_compcv);
			  (ps[(2) - (10)].val.opval)->op_type == OP_CONST
			      ? newATTRSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			      : newMYSUB((ps[(3) - (10)].val.ival), (ps[(2) - (10)].val.opval), NULL, (ps[(7) - (10)].val.opval), body)
			  ;
			  (yyval.opval) = (OP*)NULL;
			  intro_my();
			  parser->parsed_sub = 1;
			}
    break;

  case 33:
#line 345 "perly.y"
    {
			  package((ps[(3) - (4)].val.opval));
			  if ((ps[(2) - (4)].val.opval))
			      package_version((ps[(2) - (4)].val.opval));
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 34:
<<<<<<<
#line 347 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
=======
#line 352 "perly.y"
    { CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
>>>>>>>
    break;

  case 35:
#line 354 "perly.y"
    {
			  SvREFCNT_inc_simple_void(PL_compcv);
			  utilize((ps[(1) - (7)].val.ival), (ps[(2) - (7)].val.ival), (ps[(4) - (7)].val.opval), (ps[(5) - (7)].val.opval), (ps[(6) - (7)].val.opval));
			  parser->parsed_sub = 1;
			  (yyval.opval) = (OP*)NULL;
			}
    break;

  case 36:
#line 361 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 37:
#line 367 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
			      newCONDOP(0, (ps[(4) - (7)].val.opval), op_scope((ps[(6) - (7)].val.opval)), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 38:
#line 373 "perly.y"
    {
			  const PADOFFSET offset = pad_findmy_pvs("$_", 0);
			  (yyval.opval) = block_end((ps[(3) - (6)].val.ival),
				  newGIVENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)),
				    offset == NOT_IN_PAD
				    || PAD_COMPNAME_FLAGS_isOUR(offset)
				      ? 0
				      : offset));
			  parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			}
    break;

  case 39:
<<<<<<<
#line 379 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
=======
#line 384 "perly.y"
    { (yyval.opval) = block_end((ps[(3) - (6)].val.ival), newWHENOP((ps[(4) - (6)].val.opval), op_scope((ps[(6) - (6)].val.opval)))); }
>>>>>>>
    break;

  case 40:
<<<<<<<
#line 381 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
=======
#line 386 "perly.y"
    { (yyval.opval) = newWHENOP(0, op_scope((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 41:
#line 388 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 42:
#line 395 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (8)].val.ival),
				  newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      (ps[(4) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval), (ps[(6) - (8)].val.ival)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 43:
<<<<<<<
#line 397 "perly.y"
    { parser->expect = XTERM; }
=======
#line 402 "perly.y"
    { parser->expect = XTERM; }
>>>>>>>
    break;

  case 44:
<<<<<<<
#line 399 "perly.y"
    { parser->expect = XTERM; }
=======
#line 404 "perly.y"
    { parser->expect = XTERM; }
>>>>>>>
    break;

  case 45:
#line 407 "perly.y"
    {
			  OP *initop = (ps[(4) - (13)].val.opval);
			  OP *forop = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				      scalar((ps[(7) - (13)].val.opval)), (ps[(13) - (13)].val.opval), (ps[(11) - (13)].val.opval), (ps[(10) - (13)].val.ival));
			  if (initop) {
			      forop = op_prepend_elem(OP_LINESEQ, initop,
				  op_append_elem(OP_LINESEQ,
				      newOP(OP_UNSTACK, OPf_SPECIAL),
				      forop));
			  }
			  PL_hints |= HINT_BLOCK_SCOPE;
			  (yyval.opval) = block_end((ps[(3) - (13)].val.ival), forop);
			  parser->copline = (line_t)(ps[(1) - (13)].val.ival);
			}
    break;

  case 46:
#line 422 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (9)].val.ival), newFOROP(0, (ps[(4) - (9)].val.opval), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 47:
#line 427 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(4) - (8)].val.ival), newFOROP(0,
				      op_lvalue((ps[(2) - (8)].val.opval), OP_ENTERLOOP), (ps[(5) - (8)].val.opval), (ps[(7) - (8)].val.opval), (ps[(8) - (8)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (8)].val.ival);
			}
    break;

  case 48:
<<<<<<<
#line 428 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(5) - (5)].val.opval)); }
=======
#line 433 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(5) - (5)].val.opval)); }
>>>>>>>
    break;

  case 49:
#line 435 "perly.y"
    {
			  (yyval.opval) = block_end(
				(ps[(4) - (11)].val.ival),
				newFOROP(0,
					 op_lvalue(
					    newUNOP(OP_REFGEN, 0,
						    (ps[(6) - (11)].val.opval)),
					    OP_ENTERLOOP),
					 (ps[(8) - (11)].val.opval), (ps[(10) - (11)].val.opval), (ps[(11) - (11)].val.opval))
			  );
			  parser->copline = (line_t)(ps[(1) - (11)].val.ival);
			}
    break;

  case 50:
#line 448 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(5) - (9)].val.ival), newFOROP(
				0, op_lvalue(newUNOP(OP_REFGEN, 0,
						     (ps[(3) - (9)].val.opval)),
					     OP_ENTERLOOP), (ps[(6) - (9)].val.opval), (ps[(8) - (9)].val.opval), (ps[(9) - (9)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (9)].val.ival);
			}
    break;

  case 51:
#line 456 "perly.y"
    {
			  (yyval.opval) = block_end((ps[(3) - (7)].val.ival),
				  newFOROP(0, (OP*)NULL, (ps[(4) - (7)].val.opval), (ps[(6) - (7)].val.opval), (ps[(7) - (7)].val.opval)));
			  parser->copline = (line_t)(ps[(1) - (7)].val.ival);
			}
    break;

  case 52:
#line 462 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, (ps[(1) - (2)].val.opval), (ps[(2) - (2)].val.opval), 0);
			}
    break;

  case 53:
#line 468 "perly.y"
    {
			  package((ps[(3) - (5)].val.opval));
			  if ((ps[(2) - (5)].val.opval)) {
			      package_version((ps[(2) - (5)].val.opval));
			  }
			}
    break;

  case 54:
#line 475 "perly.y"
    {
			  /* a block is a loop that happens once */
			  (yyval.opval) = newWHILEOP(0, 1, (LOOP*)(OP*)NULL,
				  (OP*)NULL, block_end((ps[(5) - (8)].val.ival), (ps[(7) - (8)].val.opval)), (OP*)NULL, 0);
			  if (parser->copline > (line_t)(ps[(4) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(4) - (8)].val.ival);
			}
    break;

  case 55:
#line 483 "perly.y"
    {
			  (yyval.opval) = (ps[(1) - (2)].val.opval);
			}
    break;

  case 56:
#line 487 "perly.y"
    {
			  (yyval.opval) = (OP*)NULL;
			  parser->copline = NOLINE;
			}
    break;

  case 57:
#line 495 "perly.y"
    { OP *list;
			  if ((ps[(2) - (2)].val.opval)) {
			      OP *term = (ps[(2) - (2)].val.opval);
			      list = op_append_elem(OP_LIST, (ps[(1) - (2)].val.opval), term);
			  }
			  else {
			      list = (ps[(1) - (2)].val.opval);
			  }
			  if (parser->copline == NOLINE)
			       parser->copline = CopLINE(PL_curcop)-1;
			  else parser->copline--;
			  (yyval.opval) = newSTATEOP(0, NULL,
					  op_convert_list(OP_FORMLINE, 0, list));
			}
    break;

  case 58:
<<<<<<<
#line 507 "perly.y"
    { (yyval.opval) = NULL; }
=======
#line 512 "perly.y"
    { (yyval.opval) = NULL; }
>>>>>>>
    break;

  case 59:
<<<<<<<
#line 509 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
=======
#line 514 "perly.y"
    { (yyval.opval) = op_unscope((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 60:
<<<<<<<
#line 514 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 519 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 61:
<<<<<<<
#line 516 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 521 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 62:
<<<<<<<
#line 518 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 523 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 63:
<<<<<<<
#line 520 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 525 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 64:
<<<<<<<
#line 522 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
=======
#line 527 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, scalar((ps[(3) - (3)].val.opval)), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 65:
<<<<<<<
#line 524 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
=======
#line 529 "perly.y"
    { (yyval.opval) = newLOOPOP(OPf_PARENS, 1, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 66:
#line 531 "perly.y"
    { (yyval.opval) = newFOROP(0, (OP*)NULL, (ps[(3) - (3)].val.opval), (ps[(1) - (3)].val.opval), (OP*)NULL);
			  parser->copline = (line_t)(ps[(2) - (3)].val.ival); }
    break;

  case 67:
<<<<<<<
#line 529 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
=======
#line 534 "perly.y"
    { (yyval.opval) = newWHENOP((ps[(3) - (3)].val.opval), op_scope((ps[(1) - (3)].val.opval))); }
>>>>>>>
    break;

  case 68:
<<<<<<<
#line 534 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 539 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 69:
#line 541 "perly.y"
    {
			  ((ps[(2) - (2)].val.opval))->op_flags |= OPf_PARENS;
			  (yyval.opval) = op_scope((ps[(2) - (2)].val.opval));
			}
    break;

  case 70:
#line 546 "perly.y"
    { parser->copline = (line_t)(ps[(1) - (6)].val.ival);
			    (yyval.opval) = newCONDOP(0,
				newSTATEOP(OPf_SPECIAL,NULL,(ps[(3) - (6)].val.opval)),
				op_scope((ps[(5) - (6)].val.opval)), (ps[(6) - (6)].val.opval));
			  PL_hints |= HINT_BLOCK_SCOPE;
			}
    break;

  case 71:
<<<<<<<
#line 551 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 556 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 72:
<<<<<<<
#line 553 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
=======
#line 558 "perly.y"
    { (yyval.opval) = op_scope((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 73:
#line 563 "perly.y"
    { (yyval.ival) = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
    break;

  case 74:
<<<<<<<
#line 564 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 569 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 76:
#line 575 "perly.y"
    { YYSTYPE tmplval;
			  (void)scan_num("1", &tmplval);
			  (yyval.opval) = tmplval.opval; }
    break;

  case 78:
<<<<<<<
#line 578 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
=======
#line 583 "perly.y"
    { (yyval.opval) = invert(scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 79:
<<<<<<<
#line 583 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
=======
#line 588 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
>>>>>>>
    break;

  case 80:
<<<<<<<
#line 587 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
=======
#line 592 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
>>>>>>>
    break;

  case 81:
<<<<<<<
#line 591 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
=======
#line 596 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); intro_my(); }
>>>>>>>
    break;

  case 82:
<<<<<<<
#line 594 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 599 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 83:
<<<<<<<
#line 595 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 600 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 84:
#line 604 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 85:
#line 610 "perly.y"
    { (yyval.ival) = start_subparse(FALSE, CVf_ANON);
			    SAVEFREESV(PL_compcv); }
    break;

  case 86:
#line 615 "perly.y"
    { (yyval.ival) = start_subparse(TRUE, 0);
			    SAVEFREESV(PL_compcv); }
    break;

  case 89:
<<<<<<<
#line 621 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 626 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 91:
<<<<<<<
#line 627 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 632 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 92:
<<<<<<<
#line 629 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 634 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 93:
<<<<<<<
#line 631 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 636 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 94:
<<<<<<<
#line 636 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 641 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 95:
<<<<<<<
#line 638 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 643 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 96:
#line 648 "perly.y"
    {
			  /* We shouldn't get here otherwise */
			  assert(FEATURE_SIGNATURES_IS_ENABLED);

			  Perl_ck_warner_d(aTHX_
				packWARN(WARN_EXPERIMENTAL__SIGNATURES),
				"The signatures feature is experimental");
			  (yyval.opval) = parse_subsignature();
			}
    break;

  case 97:
#line 658 "perly.y"
    {
			  (yyval.opval) = (ps[(2) - (3)].val.opval);
			  parser->expect = XATTRBLOCK;
			}
    break;

  case 99:
<<<<<<<
#line 662 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 666 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 100:
<<<<<<<
#line 667 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 671 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 101:
<<<<<<<
#line 669 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 673 "perly.y"
    { (yyval.opval) = newLOGOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 102:
<<<<<<<
#line 671 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 675 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 104:
<<<<<<<
#line 677 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
=======
#line 681 "perly.y"
    { (yyval.opval) = (ps[(1) - (2)].val.opval); }
>>>>>>>
    break;

  case 105:
#line 683 "perly.y"
    {
			  OP* term = (ps[(3) - (3)].val.opval);
			  (yyval.opval) = op_append_elem(OP_LIST, (ps[(1) - (3)].val.opval), term);
			}
    break;

  case 107:
#line 692 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (3)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (3)].val.ival),(ps[(2) - (3)].val.opval)), (ps[(3) - (3)].val.opval)) );
			}
    break;

  case 108:
#line 696 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (5)].val.ival), OPf_STACKED,
				op_prepend_elem(OP_LIST, newGVREF((ps[(1) - (5)].val.ival),(ps[(3) - (5)].val.opval)), (ps[(4) - (5)].val.opval)) );
			}
    break;

  case 109:
#line 700 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, scalar((ps[(1) - (6)].val.opval)), (ps[(5) - (6)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (6)].val.opval))));
			}
    break;

  case 110:
#line 706 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, scalar((ps[(1) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(3) - (3)].val.opval))));
			}
    break;

  case 111:
#line 711 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (3)].val.opval), (ps[(3) - (3)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (3)].val.opval))));
			}
    break;

  case 112:
#line 717 "perly.y"
    { (yyval.opval) = op_convert_list(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST,
				    op_prepend_elem(OP_LIST, (ps[(2) - (5)].val.opval), (ps[(4) - (5)].val.opval)),
				    newMETHOP(OP_METHOD, 0, (ps[(1) - (5)].val.opval))));
			}
    break;

  case 113:
<<<<<<<
#line 719 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 723 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 114:
<<<<<<<
#line 721 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
=======
#line 725 "perly.y"
    { (yyval.opval) = op_convert_list((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
>>>>>>>
    break;

  case 115:
#line 727 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (3)].val.ival), 0, (OP*)NULL, (ps[(3) - (3)].val.opval)); }
    break;

  case 116:
#line 730 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 op_append_elem(OP_LIST,
				   op_prepend_elem(OP_LIST, (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)), (ps[(1) - (5)].val.opval)));
			}
    break;

  case 119:
<<<<<<<
#line 741 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
=======
#line 745 "perly.y"
    { (yyval.opval) = newBINOP(OP_GELEM, 0, (ps[(1) - (5)].val.opval), scalar((ps[(3) - (5)].val.opval))); }
>>>>>>>
    break;

  case 120:
#line 747 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0, oopsAV((ps[(1) - (4)].val.opval)), scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 121:
#line 750 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (5)].val.opval)),OP_RV2AV),
					scalar((ps[(4) - (5)].val.opval)));
			}
    break;

  case 122:
#line 755 "perly.y"
    { (yyval.opval) = newBINOP(OP_AELEM, 0,
					ref(newAVREF((ps[(1) - (4)].val.opval)),OP_RV2AV),
					scalar((ps[(3) - (4)].val.opval)));
			}
    break;

  case 123:
#line 760 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0, oopsHV((ps[(1) - (5)].val.opval)), jmaybe((ps[(3) - (5)].val.opval)));
			}
    break;

  case 124:
#line 763 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (6)].val.opval)),OP_RV2HV),
					jmaybe((ps[(4) - (6)].val.opval))); }
    break;

  case 125:
#line 767 "perly.y"
    { (yyval.opval) = newBINOP(OP_HELEM, 0,
					ref(newHVREF((ps[(1) - (5)].val.opval)),OP_RV2HV),
					jmaybe((ps[(3) - (5)].val.opval))); }
    break;

  case 126:
#line 771 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (4)].val.opval)))); }
    break;

  case 127:
#line 774 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(4) - (5)].val.opval),
				       newCVREF(0, scalar((ps[(1) - (5)].val.opval))))); }
    break;

  case 128:
#line 779 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval),
					       newCVREF(0, scalar((ps[(1) - (4)].val.opval))))); }
    break;

  case 129:
#line 783 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar((ps[(1) - (3)].val.opval)))); }
    break;

  case 130:
<<<<<<<
#line 782 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
=======
#line 786 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(5) - (6)].val.opval), (ps[(2) - (6)].val.opval)); }
>>>>>>>
    break;

  case 131:
<<<<<<<
#line 784 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
=======
#line 788 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(3) - (4)].val.opval), (ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 132:
<<<<<<<
#line 786 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL); }
=======
#line 790 "perly.y"
    { (yyval.opval) = newSLICEOP(0, (ps[(4) - (5)].val.opval), (OP*)NULL); }
>>>>>>>
    break;

  case 133:
<<<<<<<
#line 791 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
=======
#line 795 "perly.y"
    { (yyval.opval) = newASSIGNOP(OPf_STACKED, (ps[(1) - (3)].val.opval), (ps[(2) - (3)].val.ival), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 134:
<<<<<<<
#line 793 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 797 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 135:
#line 799 "perly.y"
    {   if ((ps[(2) - (3)].val.ival) != OP_REPEAT)
				scalar((ps[(1) - (3)].val.opval));
			    (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, (ps[(1) - (3)].val.opval), scalar((ps[(3) - (3)].val.opval)));
			}
    break;

  case 136:
<<<<<<<
#line 800 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 804 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 137:
<<<<<<<
#line 802 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 806 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 138:
<<<<<<<
#line 804 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 808 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 139:
<<<<<<<
#line 806 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 810 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 140:
<<<<<<<
#line 808 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 812 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 141:
<<<<<<<
#line 810 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 814 "perly.y"
    { (yyval.opval) = newBINOP((ps[(2) - (3)].val.ival), 0, scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 142:
<<<<<<<
#line 812 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
=======
#line 816 "perly.y"
    { (yyval.opval) = newRANGE((ps[(2) - (3)].val.ival), scalar((ps[(1) - (3)].val.opval)), scalar((ps[(3) - (3)].val.opval))); }
>>>>>>>
    break;

  case 143:
<<<<<<<
#line 814 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 818 "perly.y"
    { (yyval.opval) = newLOGOP(OP_AND, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 144:
<<<<<<<
#line 816 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 820 "perly.y"
    { (yyval.opval) = newLOGOP(OP_OR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 145:
<<<<<<<
#line 818 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 822 "perly.y"
    { (yyval.opval) = newLOGOP(OP_DOR, 0, (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 146:
<<<<<<<
#line 820 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
=======
#line 824 "perly.y"
    { (yyval.opval) = bind_match((ps[(2) - (3)].val.ival), (ps[(1) - (3)].val.opval), (ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 147:
<<<<<<<
#line 825 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 829 "perly.y"
    { (yyval.opval) = newUNOP(OP_NEGATE, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 148:
<<<<<<<
#line 827 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 831 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 149:
<<<<<<<
#line 830 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 834 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 150:
<<<<<<<
#line 832 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 836 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 151:
#line 838 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTINC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTINC)); }
    break;

  case 152:
#line 841 "perly.y"
    { (yyval.opval) = newUNOP(OP_POSTDEC, 0,
					op_lvalue(scalar((ps[(1) - (2)].val.opval)), OP_POSTDEC));}
    break;

  case 153:
#line 844 "perly.y"
    { (yyval.opval) = op_convert_list(OP_JOIN, 0,
				       op_append_elem(
					OP_LIST,
					newSVREF(scalar(
					    newSVOP(OP_CONST,0,
						    newSVpvs("\""))
					)),
					(ps[(1) - (2)].val.opval)
				       ));
			}
    break;

  case 154:
<<<<<<<
#line 851 "perly.y"
    { (yyval.opval) = newBINOP(OP_POW, 0, scalar((ps[(1) - (2)].val.opval)),
                                        newSVOP(OP_CONST, 0, newSViv(parser->yylval.ival))); }
=======
#line 855 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
>>>>>>>
    break;

  case 155:
<<<<<<<
#line 854 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREINC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREINC)); }
=======
#line 858 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
>>>>>>>
    break;

  case 156:
<<<<<<<
#line 857 "perly.y"
    { (yyval.opval) = newUNOP(OP_PREDEC, 0,
					op_lvalue(scalar((ps[(2) - (2)].val.opval)), OP_PREDEC)); }
=======
#line 865 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 157:
<<<<<<<
#line 864 "perly.y"
    { (yyval.opval) = newANONLIST((ps[(2) - (3)].val.opval)); }
=======
#line 867 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);}
>>>>>>>
    break;

  case 158:
<<<<<<<
#line 866 "perly.y"
    { (yyval.opval) = newANONLIST((OP*)NULL);}
=======
#line 869 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
>>>>>>>
    break;

  case 159:
<<<<<<<
#line 868 "perly.y"
    { (yyval.opval) = newANONHASH((ps[(2) - (4)].val.opval)); }
=======
#line 871 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL); }
>>>>>>>
    break;

  case 160:
<<<<<<<
#line 870 "perly.y"
    { (yyval.opval) = newANONHASH((OP*)NULL); }
=======
#line 873 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
>>>>>>>
    break;

  case 161:
<<<<<<<
#line 872 "perly.y"
    { SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (5)].val.ival), (ps[(3) - (5)].val.opval), (ps[(4) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
    break;

  case 162:
#line 875 "perly.y"
=======
#line 876 "perly.y"
>>>>>>>
    {
			  OP *sig = (ps[(4) - (8)].val.opval), *body = (ps[(7) - (8)].val.opval);
                          /* empty sig sub needs a nextstate at the end
                           * to clear the stack of any default expression
                           * detritus */
                          if (!body && !OpHAS_SIBLING(sig))
                               body = newSTATEOP(0, NULL, NULL);
			  if (parser->copline > (line_t)(ps[(6) - (8)].val.ival))
			      parser->copline = (line_t)(ps[(6) - (8)].val.ival);
			  body = block_end((ps[(3) - (8)].val.ival),
				op_append_list(OP_LINESEQ, sig, body));
			  SvREFCNT_inc_simple_void(PL_compcv);
			  (yyval.opval) = newANONATTRSUB((ps[(2) - (8)].val.ival), NULL, (ps[(5) - (8)].val.opval), body);
<<<<<<<
			}
=======
			}
    break;

  case 162:
#line 895 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
>>>>>>>
    break;

  case 163:
<<<<<<<
#line 889 "perly.y"
    { (yyval.opval) = dofile((ps[(2) - (2)].val.opval), (ps[(1) - (2)].val.ival));}
=======
#line 897 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
>>>>>>>
    break;

<<<<<<<
  case 164:
#line 891 "perly.y"
    { (yyval.opval) = newUNOP(OP_NULL, OPf_SPECIAL, op_scope((ps[(2) - (2)].val.opval)));}
=======
  case 168:
#line 905 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
>>>>>>>
    break;

  case 169:
<<<<<<<
#line 899 "perly.y"
    { (yyval.opval) = newCONDOP(0, (ps[(1) - (5)].val.opval), (ps[(3) - (5)].val.opval), (ps[(5) - (5)].val.opval)); }
=======
#line 907 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 170:
<<<<<<<
#line 901 "perly.y"
    { (yyval.opval) = newUNOP(OP_REFGEN, 0, (ps[(2) - (2)].val.opval)); }
=======
#line 909 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 171:
<<<<<<<
#line 903 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 911 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
>>>>>>>
    break;

  case 172:
<<<<<<<
#line 905 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
=======
#line 913 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 173:
<<<<<<<
#line 907 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
=======
#line 915 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 174:
<<<<<<<
#line 909 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 917 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
>>>>>>>
    break;

  case 175:
<<<<<<<
#line 911 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
=======
#line 919 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 176:
<<<<<<<
#line 913 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 921 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 177:
<<<<<<<
#line 915 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 923 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 178:
<<<<<<<
#line 917 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 925 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 179:
<<<<<<<
#line 919 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 927 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
>>>>>>>
    break;

  case 180:
<<<<<<<
#line 921 "perly.y"
    { (yyval.opval) = newUNOP(OP_AV2ARYLEN, 0, ref((ps[(1) - (1)].val.opval), OP_AV2ARYLEN));}
=======
#line 929 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 181:
<<<<<<<
#line 923 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

  case 182:
#line 925 "perly.y"
=======
#line 931 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref((ps[(1) - (4)].val.opval), OP_ASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 182:
#line 941 "perly.y"
=======
  case 183:
#line 935 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVASLICE, 0,
					list((ps[(3) - (4)].val.opval)),
					ref(oopsAV((ps[(1) - (4)].val.opval)), OP_KVASLICE)));
			  if ((yyval.opval) && (ps[(1) - (4)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (4)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 183:
#line 951 "perly.y"
=======
  case 184:
#line 945 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref(oopsHV((ps[(1) - (5)].val.opval)), OP_HSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
			}
    break;

<<<<<<<
  case 184:
#line 961 "perly.y"
=======
  case 185:
#line 955 "perly.y"
>>>>>>>
    { (yyval.opval) = op_prepend_elem(OP_KVHSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_KVHSLICE, 0,
					list((ps[(3) - (5)].val.opval)),
					ref((ps[(1) - (5)].val.opval), OP_KVHSLICE)));
			  if ((yyval.opval) && (ps[(1) - (5)].val.opval))
			      (yyval.opval)->op_private |=
				  (ps[(1) - (5)].val.opval)->op_private & OPpSLICEWARNING;
<<<<<<<
			}
=======
			}
    break;

  case 185:
#line 971 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 186:
<<<<<<<
#line 965 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 973 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 187:
<<<<<<<
#line 967 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 975 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
>>>>>>>
    break;

  case 188:
<<<<<<<
#line 969 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (3)].val.opval)));
			}
    break;

  case 189:
#line 972 "perly.y"
=======
#line 978 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
				op_append_elem(OP_LIST, (ps[(3) - (4)].val.opval), scalar((ps[(1) - (4)].val.opval))));
			}
    break;

<<<<<<<
  case 189:
#line 983 "perly.y"
=======
  case 190:
#line 977 "perly.y"
>>>>>>>
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(3) - (3)].val.opval), scalar((ps[(2) - (3)].val.opval))));
<<<<<<<
			}
=======
			}
    break;

  case 190:
#line 987 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 191:
<<<<<<<
#line 981 "perly.y"
    { (yyval.opval) = newSVREF((ps[(1) - (4)].val.opval)); }
=======
#line 989 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 192:
<<<<<<<
#line 983 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
=======
#line 991 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 193:
<<<<<<<
#line 985 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (4)].val.opval)); }
=======
#line 993 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
>>>>>>>
    break;

  case 194:
<<<<<<<
#line 987 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, 0,
				       scalar(newCVREF((ps[(3) - (4)].val.ival),(ps[(1) - (4)].val.opval)))); }
=======
#line 996 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 195:
<<<<<<<
#line 990 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (4)].val.opval)); }
=======
#line 998 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
>>>>>>>
    break;

  case 196:
<<<<<<<
#line 1001 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
=======
#line 992 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
>>>>>>>
    break;

  case 197:
<<<<<<<
#line 1003 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
=======
#line 995 "perly.y"
    { (yyval.opval) = newLOOPEX((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 198:
<<<<<<<
#line 1005 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
=======
#line 997 "perly.y"
    { (yyval.opval) = newUNOP(OP_NOT, 0, scalar((ps[(2) - (2)].val.opval))); }
>>>>>>>
    break;

  case 199:
<<<<<<<
#line 1007 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 999 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
>>>>>>>
    break;

  case 200:
<<<<<<<
#line 1001 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1009 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 201:
<<<<<<<
#line 1003 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (2)].val.ival), 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1011 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
>>>>>>>
    break;

  case 202:
<<<<<<<
#line 1005 "perly.y"
    { (yyval.opval) = newOP(OP_REQUIRE, (ps[(1) - (1)].val.ival) ? OPf_SPECIAL : 0); }
=======
#line 1013 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 203:
<<<<<<<
#line 1007 "perly.y"
    { (yyval.opval) = newUNOP(OP_REQUIRE, (ps[(1) - (2)].val.ival) ? OPf_SPECIAL : 0, (ps[(2) - (2)].val.opval)); }
=======
#line 1015 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 204:
<<<<<<<
#line 1009 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 1017 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
>>>>>>>
    break;

  case 205:
<<<<<<<
#line 1011 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    op_append_elem(OP_LIST, (ps[(2) - (2)].val.opval), scalar((ps[(1) - (2)].val.opval)))); }
=======
#line 1020 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
>>>>>>>
    break;

  case 206:
<<<<<<<
#line 1014 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (1)].val.ival), 0); }
=======
#line 1022 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
>>>>>>>
    break;

  case 207:
<<<<<<<
#line 1016 "perly.y"
    { (yyval.opval) = newOP((ps[(1) - (3)].val.ival), 0);}
=======
#line 1024 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 208:
<<<<<<<
#line 1018 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1026 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
>>>>>>>
    break;

  case 209:
<<<<<<<
#line 1020 "perly.y"
    { (yyval.opval) = (ps[(1) - (3)].val.opval); }
=======
#line 1028 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
>>>>>>>
    break;

  case 210:
<<<<<<<
#line 1022 "perly.y"
    { (yyval.opval) = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar((ps[(1) - (1)].val.opval))); }
=======
#line 1030 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
>>>>>>>
    break;

  case 211:
<<<<<<<
#line 1024 "perly.y"
    { (yyval.opval) = ((ps[(1) - (3)].val.ival) == OP_NOT)
                          ? newUNOP((ps[(1) - (3)].val.ival), 0, newSVOP(OP_CONST, 0, newSViv(0)))
                          : newOP((ps[(1) - (3)].val.ival), OPf_SPECIAL); }
=======
#line 1034 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
>>>>>>>
    break;

  case 212:
<<<<<<<
#line 1028 "perly.y"
    { (yyval.opval) = newUNOP((ps[(1) - (4)].val.ival), 0, (ps[(3) - (4)].val.opval)); }
    break;

  case 213:
#line 1030 "perly.y"
=======
#line 1036 "perly.y"
>>>>>>>
    {
			    if (   (ps[(1) - (1)].val.opval)->op_type != OP_TRANS
			        && (ps[(1) - (1)].val.opval)->op_type != OP_TRANSR
				&& (((PMOP*)(ps[(1) - (1)].val.opval))->op_pmflags & PMf_HAS_CV))
			    {
				(yyval.ival) = start_subparse(FALSE, CVf_ANON);
				SAVEFREESV(PL_compcv);
			    } else
				(yyval.ival) = 0;
			}
    break;

<<<<<<<
  case 213:
#line 1047 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
=======
  case 214:
#line 1041 "perly.y"
    { (yyval.opval) = pmruntime((ps[(1) - (6)].val.opval), (ps[(4) - (6)].val.opval), (ps[(5) - (6)].val.opval), 1, (ps[(2) - (6)].val.ival)); }
>>>>>>>
    break;

<<<<<<<
  case 216:
#line 1051 "perly.y"
=======
  case 217:
#line 1045 "perly.y"
>>>>>>>
    {
			  (yyval.opval) = newLISTOP(OP_DIE, 0, newOP(OP_PUSHMARK, 0),
				newSVOP(OP_CONST, 0, newSVpvs("Unimplemented")));
<<<<<<<
			}
=======
			}
    break;

  case 218:
#line 1060 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
>>>>>>>
    break;

  case 219:
<<<<<<<
#line 1054 "perly.y"
    { (yyval.opval) = my_attrs((ps[(2) - (3)].val.opval),(ps[(3) - (3)].val.opval)); }
=======
#line 1062 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
>>>>>>>
    break;

  case 220:
<<<<<<<
#line 1056 "perly.y"
    { (yyval.opval) = localize((ps[(2) - (2)].val.opval),(ps[(1) - (2)].val.ival)); }
=======
#line 1067 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
>>>>>>>
    break;

  case 221:
<<<<<<<
#line 1061 "perly.y"
    { (yyval.opval) = sawparens((ps[(2) - (3)].val.opval)); }
=======
#line 1069 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
>>>>>>>
    break;

  case 222:
<<<<<<<
#line 1063 "perly.y"
    { (yyval.opval) = sawparens(newNULLLIST()); }
=======
#line 1072 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 223:
<<<<<<<
#line 1066 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1074 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 224:
<<<<<<<
#line 1068 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1076 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 225:
<<<<<<<
#line 1070 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1081 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 226:
<<<<<<<
#line 1075 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 1083 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 227:
<<<<<<<
#line 1077 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1087 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 228:
<<<<<<<
#line 1081 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 1089 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

  case 229:
<<<<<<<
#line 1083 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
=======
#line 1093 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
>>>>>>>
    break;

  case 230:
<<<<<<<
#line 1087 "perly.y"
    { (yyval.opval) = (OP*)NULL; }
=======
#line 1095 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
>>>>>>>
    break;

  case 231:
<<<<<<<
#line 1089 "perly.y"
    { (yyval.opval) = (ps[(2) - (2)].val.opval); }
=======
#line 1101 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 232:
#line 1095 "perly.y"
    { parser->in_my = 0; (yyval.opval) = my((ps[(1) - (1)].val.opval)); }
=======
  case 237:
#line 1114 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 238:
<<<<<<<
#line 1108 "perly.y"
    { (yyval.opval) = newCVREF((ps[(1) - (2)].val.ival),(ps[(2) - (2)].val.opval)); }
=======
#line 1118 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 239:
<<<<<<<
#line 1112 "perly.y"
    { (yyval.opval) = newSVREF((ps[(2) - (2)].val.opval)); }
=======
#line 1122 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
>>>>>>>
    break;

  case 240:
<<<<<<<
#line 1116 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval));
=======
#line 1128 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
>>>>>>>
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
    break;

  case 241:
<<<<<<<
#line 1122 "perly.y"
    { (yyval.opval) = newHVREF((ps[(2) - (2)].val.opval));
			  if ((yyval.opval)) (yyval.opval)->op_private |= (ps[(1) - (2)].val.ival);
			}
=======
#line 1134 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

  case 242:
<<<<<<<
#line 1128 "perly.y"
    { (yyval.opval) = newAVREF((ps[(2) - (2)].val.opval)); }
=======
#line 1136 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
>>>>>>>
    break;

  case 243:
<<<<<<<
#line 1130 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (4)].val.opval)); }
=======
#line 1140 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 244:
#line 1134 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(2) - (2)].val.opval)); }
=======
  case 245:
#line 1145 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 246:
#line 1139 "perly.y"
    { (yyval.opval) = newAVREF((ps[(1) - (3)].val.opval)); }
=======
  case 247:
#line 1150 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

<<<<<<<
  case 248:
#line 1144 "perly.y"
    { (yyval.opval) = newHVREF((ps[(1) - (3)].val.opval)); }
=======
  case 249:
#line 1155 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
>>>>>>>
    break;

  case 250:
<<<<<<<
#line 1149 "perly.y"
    { (yyval.opval) = newGVREF(0,(ps[(1) - (3)].val.opval)); }
=======
#line 1160 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 251:
<<<<<<<
#line 1154 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
=======
#line 1162 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 252:
<<<<<<<
#line 1156 "perly.y"
    { (yyval.opval) = scalar((ps[(1) - (1)].val.opval)); }
=======
#line 1164 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
>>>>>>>
    break;

  case 253:
<<<<<<<
#line 1158 "perly.y"
    { (yyval.opval) = op_scope((ps[(1) - (1)].val.opval)); }
=======
#line 1167 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
>>>>>>>
    break;

<<<<<<<
=======
  case 254:
#line 1161 "perly.y"
    { (yyval.opval) = (ps[(1) - (1)].val.opval); }
    break;

>>>>>>>
      default: break;
    

/* Generated from:
<<<<<<<
 * 4d8d8ce4a0efb48cf8c80f44859cb492450033fe13330aa98b6a7e7933ff21eb perly.y
=======
 * c78d30631689a37d3d03de010015d76b6c7c1265a8ef4db6aa86503a1f6c9d06 perly.y
>>>>>>>
 * d1d4df7b8e30ac9dede664af9179e6e5e7ddc7f2ad9c4eff9e2e5b32c9e16a6e regen_perly.pl
 * ex: set ro: */
