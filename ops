{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1486493082,"metadata":{"github-id":"MDU6SXNzdWUyMDU5Nzg0MjI=","github-url":"https://github.com/perl11/cperl/issues/249","origin":"github"},"title":"compile-time classes","message":"Add an API to detect packages/classes with a compile-time known @ISA.\nTo be able to type-check classes at compile-time.\n\n1. `package Bar; use base \"Foo\"; use fields qw(baz);`\n2. `class Bar is Foo { has $baz; }`\n  *(Which would be `class Bar extends Foo` in a normal language terminology, but `is` nicely fits to the @ISA dynamic inheritance terminology.)*\n\n`class Bar does Foo` would be using the **role** foo. We care about old-style ISA inheritance here.\nAll other package declarations can add @ISA's at run-time, and they usually do, which forbids\ncompile-time type checking of those user classes. Only coretypes can be checked at compile-time currently.\nSo any class which uses base or fields has now a closed over ISA and gets the HvCLASS flag assigned, which is basically a basic unsugared cperl class.\n\nSee e.g. https://docs.perl6.org/language/classtut#Multiple_inheritance and\nhttps://docs.perl6.org/routine/does#(Typesystem)_trait_does\n\nThe new API is in cperl: `Internals::HvCLASS(class, [1])` and in C: `HvCLASS` and `can_class_typecheck`.\nbase.pm and fields.pm turn on HvCLASS. `HvCLASS_on` turns on SvREADONLY `@ISA`.\n\nesp. defer user-type checks to run-time, for run-time classes, which is needed to fix `dist/base/t/fields-base.t` Wrong type B2, expected D3 at dist/base/t/fields-base.t line 156.\nType of scalar assignment to $obj2 must be D3 (not B2) at dist/base/t/fields-base.t line 156.\nwhich was detected with #247 ck_assign type inference.\n\nD3 is B2 is not known at compile-time (or should be, because it's using base and fields, both of them compile-time). This is needed as fix for the new #247 assign type checks.\n\nregarding classes: instantiating classes will lead to different objects, with a compile-time optimized representation of fields and methods. essentially fields (just rewritten in C, and hiding pseudohashes from the user API).","files":null}]}