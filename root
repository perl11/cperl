{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1443700638,"metadata":{"github-id":"MDU6SXNzdWUxMDkyODQ5MDg=","github-url":"https://github.com/perl11/cperl/issues/57","origin":"github"},"title":"unrestricted readonly hashes","message":"yves had in his `yves/unrestricted_readonly_hashes` branch https://github.com/rurban/perl/commit/4628ab6baf6387cd8e945b09269268efb73cd878 work to seperate readonly from restricted hashes, basically to allow fetch from unrestricted readonly hashes.\n\nThis feature is stable in the branch `feature/gh57-hash-restricted`, the question is only if to add it or not.\n\nreopening, now that p5p is threatening perl5 with yet another outragious deprecation and change.\nbasically their spin is that locked hashes where only useful for fields, the old object system.\nthey only want to keep readonly hashes, but move locked hashes to a vtable interface.\nhttp://www.nntp.perl.org/group/perl.perl5.porters/2017/01/msg242664.html\nthere are of course multiple problems with this approach:\n\n1. locked (restricted) hashes still serve their purpose to disallow invalid keys, which is essentially error access to unknown object fields, usually caused by typos. this is still a very requested feature, our devs just requested it last week.  readonly keys do not help, they only help with improved internal performance (perfect hashes: much faster, less memory, see XSConfig. Unicode tables not, they need something better).\n\n2. a vtable interface makes it even slower and worse than it is now. cleaning up the messy implementation yes, already done in several cperl branches, but adding another indirection would make it even worse than better.\n\nWe will defer to use this branch for our new object system, which might rely on hashes or pseudohashes. And until we have no optimized readonly hashes. I see no way that p5p doing this will have any improvement, esp. changing the API that drastically. But it is a big threat as all of the things they are doing.  Please raise your voice there.\n\nin summary, this branch works fine, and seperates locked (restricted) from readonly-ness.\nit is useful when implementing object accessors which need to be extended at run-time.\nfor closed objects and classes restricted can be kept combined with readonly-ness.","files":null}]}