{"version":1,"ops":[{"type":1,"author":{"id":"04135dc995e2fdcd322aaf4268dbf04630a3cc7c"},"timestamp":1494752540,"metadata":{"github-id":"MDU6SXNzdWUyMjg1MjgzODE=","github-url":"https://github.com/perl11/cperl/issues/281","origin":"github"},"title":"use strict hashpairs","message":"See #280.\n\nFor hash assignments we should restrict the mapwhile producer to accept only pairs, not arbitrary lists. Something like `use strict 'hashpairs'`.\n\nmapwhile will get a private OPp_MAP_HASH flag and warn with \"Odd number of map elements in hash assignment\". Implemented the warning with 8f9bc43\nand the strict 'hashpairs' errror with fb247f2.\n\nProducing lists:\n-e'sub x{$_,\"ouch\"};%h=map{$_=\u003ex}(0..3);while (($k,$v)=each %h){print \"$k=\u003e$v, \"}'\n=\u003e 3=\u003eouch, ouch=\u003e3, 1=\u003eouch, 2=\u003e2, 0=\u003e0 (5 keys!)\nSimilar: -e'%h=map{$_=\u003e(0,1)}(0..3);while (($k,$v)=each %h){print \"$k=\u003e$v, \"}'\n=\u003e 1=\u003e3, 2=\u003e0, 0=\u003e1 (only 3 keys, see below why).\nBecause -e'@h=map{$_=\u003e(0,1)}(0..3);print join\" \",@h' =\u003e 0 0 1 1 0 1 2 0 1 3 0 1\n\n-e'%h=map{$_}(0..3);while (($k,$v)=each %h){print \"$k=\u003e$v, \"}'\n=\u003e 2=\u003e3, 0=\u003e1 (2 keys)\n\nAll but 0 and 2 elements could be ignored, and wrong (uneven) hash assignment needs to be warned with 'Odd number of elements in hash assignment'\nWell, the last cases could be argued to be just `%hash = @array` splicing. The rhs list constructor should not care about the lhs hash. \nBut with mapwhile, padav and rv2av on the rhs and a hash on the lhs of non-scalar assignments we do care now with warnings misc and strict hashpairs.\n\nperl6 does not warn, it throws:\n```\n    my %h=(0..2)\n    Odd number of elements found where hash initializer expected\n```\nAnd there's also a \n`X::Pairup::OddNumber is Exception \"Odd number of elements found for .pairup()`","files":null}]}